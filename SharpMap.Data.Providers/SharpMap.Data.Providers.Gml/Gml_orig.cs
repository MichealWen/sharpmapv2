// /*
//  *  The attached / following is part of SharpMap.Data.Providers.Gml
//  *  SharpMap.Data.Providers.Gml is free software © 2008 Newgrove Consultants Limited, 
//  *  www.newgrove.com; you can redistribute it and/or modify it under the terms 
//  *  of the current GNU Lesser General Public License (LGPL) as published by and 
//  *  available from the Free Software Foundation, Inc., 
//  *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA: http://fsf.org/    
//  *  This program is distributed without any warranty; 
//  *  without even the implied warranty of merchantability or fitness for purpose.  
//  *  See the GNU Lesser General Public License for the full details. 
//  *  
//  *  Author: John Diss 2009
//  * 
//  */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using SharpMap.Entities.Iso.Gco;
using SharpMap.Entities.Iso.Gmd;
using SharpMap.Entities.Ogc.Gml;

namespace SharpMap.Entities.Ogc.Gml
{
    public struct Declarations
    {
        public const string SchemaVersion = "http://www.opengis.net/gml/3.2";
    }


    [Serializable]
    public enum CompassPointEnumeration
    {
        [XmlEnum(Name = "N")] N,
        [XmlEnum(Name = "NNE")] NNE,
        [XmlEnum(Name = "NE")] NE,
        [XmlEnum(Name = "ENE")] ENE,
        [XmlEnum(Name = "E")] E,
        [XmlEnum(Name = "ESE")] ESE,
        [XmlEnum(Name = "SE")] SE,
        [XmlEnum(Name = "SSE")] SSE,
        [XmlEnum(Name = "S")] S,
        [XmlEnum(Name = "SSW")] SSW,
        [XmlEnum(Name = "SW")] SW,
        [XmlEnum(Name = "WSW")] WSW,
        [XmlEnum(Name = "W")] W,
        [XmlEnum(Name = "WNW")] WNW,
        [XmlEnum(Name = "NW")] NW,
        [XmlEnum(Name = "NNW")] NNW
    }

    [Serializable]
    public enum SequenceRuleEnumeration
    {
        [XmlEnum(Name = "Linear")] Linear,
        [XmlEnum(Name = "Boustrophedonic")] Boustrophedonic,
        [XmlEnum(Name = "Cantor-diagonal")] Cantor_diagonal,
        [XmlEnum(Name = "Spiral")] Spiral,
        [XmlEnum(Name = "Morton")] Morton,
        [XmlEnum(Name = "Hilbert")] Hilbert
    }

    [Serializable]
    public enum IncrementOrder
    {
        [XmlEnum(Name = "+x+y")] PlusXPlusY,
        [XmlEnum(Name = "+y+x")] PlusYPlusX,
        [XmlEnum(Name = "+x-y")] PlusXMinusY,
        [XmlEnum(Name = "-x-y")] MinusXMinusY
    }


    [Serializable]
    public enum MD_pixelOrientationCode_Type
    {
        [XmlEnum(Name = "center")] Center,
        [XmlEnum(Name = "lowerLeft")] LowerLeft,
        [XmlEnum(Name = "lowerRight")] LowerRight,
        [XmlEnum(Name = "upperRight")] UpperRight,
        [XmlEnum(Name = "upperLeft")] UpperLeft
    }

    [Serializable]
    public enum Show
    {
        [XmlEnum(Name = "new")] New,
        [XmlEnum(Name = "replace")] Replace,
        [XmlEnum(Name = "embed")] Embed,
        [XmlEnum(Name = "other")] Other,
        [XmlEnum(Name = "none")] None
    }


    [Serializable]
    public enum KnotTypesType
    {
        [XmlEnum(Name = "uniform")]  Uniform,
        [XmlEnum(Name = "quasiUniform")]  QuasiUniform,
        [XmlEnum(Name = "piecewiseBezier")]  PiecewiseBezier
    }

    [Serializable]
    public enum RelativePosition
    {
        [XmlEnum(Name = "Before")] Before,
        [XmlEnum(Name = "After")] After,
        [XmlEnum(Name = "Begins")] Begins,
        [XmlEnum(Name = "Ends")] Ends,
        [XmlEnum(Name = "During")] During,
        [XmlEnum(Name = "Equals")] Equals,
        [XmlEnum(Name = "Contains")] Contains,
        [XmlEnum(Name = "Overlaps")] Overlaps,
        [XmlEnum(Name = "Meets")] Meets,
        [XmlEnum(Name = "OverlappedBy")] OverlappedBy,
        [XmlEnum(Name = "MetBy")] MetBy,
        [XmlEnum(Name = "BegunBy")] BegunBy,
        [XmlEnum(Name = "EndedBy")] EndedBy
    }

    [Serializable]
    public enum MD_obligationCode_Type
    {
        [XmlEnum(Name = "mandatory")]  Mandatory,
        [XmlEnum(Name = "optional")]  Optional,
        [XmlEnum(Name = "conditional")]  Conditional
    }


    [Serializable]
    public enum SuccessionType
    {
        [XmlEnum(Name = "substitution")]  Substitution,
        [XmlEnum(Name = "division")]  Division,
        [XmlEnum(Name = "fusion")]  Fusion,
        [XmlEnum(Name = "initiation")]  Initiation
    }


    [Serializable]
    public enum SignType
    {
        [XmlEnum(Name = "-")] Negative,
        [XmlEnum(Name = "+")] Positive
    }


    [Serializable]
    public enum TimeIndeterminateValueType
    {
        [XmlEnum(Name = "after")]  After,
        [XmlEnum(Name = "before")]  Before,
        [XmlEnum(Name = "now")]  Now,
        [XmlEnum(Name = "unknown")]  Unknown
    }

    [Serializable]
    public enum Actuate
    {
        [XmlEnum(Name = "onLoad")]  OnLoad,
        [XmlEnum(Name = "onRequest")]  OnRequest,
        [XmlEnum(Name = "other")]  Other,
        [XmlEnum(Name = "none")]  None
    }


    [Serializable]
    public enum AggregationType
    {
        [XmlEnum(Name = "set")] Set,
        [XmlEnum(Name = "bag")]  Bag,
        [XmlEnum(Name = "sequence")]  Sequence,
        [XmlEnum(Name = "array")]  Array,
        [XmlEnum(Name = "record")]  Record,
        [XmlEnum(Name = "table")]  Table
    }


    [Serializable]
    public enum TimeUnitType
    {
        [XmlEnum(Name = "year")]  Year,
        [XmlEnum(Name = "month")]  Month,
        [XmlEnum(Name = "day")]  Day,
        [XmlEnum(Name = "hour")]  Hour,
        [XmlEnum(Name = "minute")]  Minute,
        [XmlEnum(Name = "second")]  Second
    }


    [Serializable]
    public enum MD_topicCategoryCode_Type
    {
        [XmlEnum(Name = "farming")]  Farming,
        [XmlEnum(Name = "biota")]  Biota,
        [XmlEnum(Name = "boundaries")]  Boundaries,
        [XmlEnum(Name = "climatologyMeteorologyAtmosphere")]  ClimatologyMeteorologyAtmosphere,
        [XmlEnum(Name = "economy")]  Economy,
        [XmlEnum(Name = "elevation")]  Elevation,
        [XmlEnum(Name = "environment")]  Environment,
        [XmlEnum(Name = "geoscientificInformation")]  GeoscientificInformation,
        [XmlEnum(Name = "health")]  Health,
        [XmlEnum(Name = "imageryBaseMapsEarthCover")]  ImageryBaseMapsEarthCover,
        [XmlEnum(Name = "intelligenceMilitary")]  IntelligenceMilitary,
        [XmlEnum(Name = "inlandWaters")]  InlandWaters,
        [XmlEnum(Name = "location")]  Location,
        [XmlEnum(Name = "oceans")]  Oceans,
        [XmlEnum(Name = "planningCadastre")]  PlanningCadastre,
        [XmlEnum(Name = "society")]  Society,
        [XmlEnum(Name = "structure")]  Structure,
        [XmlEnum(Name = "transportation")]  Transportation,
        [XmlEnum(Name = "utilitiesCommunication")]  UtilitiesCommunication
    }


    [Serializable]
    public enum NilReasonType
    {
        [XmlEnum(Name = "inapplicable")]  Inapplicable,
        [XmlEnum(Name = "missing")]  Missing,
        [XmlEnum(Name = "template")]  Template,
        [XmlEnum(Name = "unknown")]  Unknown,
        [XmlEnum(Name = "withheld")]  Withheld
    }


    [Serializable]
    public enum Directions
    {
        [XmlEnum(Name = "N")] N,
        [XmlEnum(Name = "E")] E,
        [XmlEnum(Name = "S")] S,
        [XmlEnum(Name = "W")] W,
        [XmlEnum(Name = "+")] Positive,
        [XmlEnum(Name = "-")] Negative
    }


    [Serializable]
    public enum CurveInterpolationType
    {
        [XmlEnum(Name = "linear")]  Linear,
        [XmlEnum(Name = "geodesic")]  Geodesic,
        [XmlEnum(Name = "circularArc3Points")] CircularArc3Points,
        [XmlEnum(Name = "circularArc2PointWithBulge")] CircularArc2PointWithBulge,
        [XmlEnum(Name = "circularArcCenterPointWithRadius")]  CircularArcCenterPointWithRadius,
        [XmlEnum(Name = "elliptical")]  Elliptical,
        [XmlEnum(Name = "clothoid")]  Clothoid,
        [XmlEnum(Name = "conic")]  Conic,
        [XmlEnum(Name = "polynomialSpline")]  PolynomialSpline,
        [XmlEnum(Name = "cubicSpline")]  CubicSpline,
        [XmlEnum(Name = "rationalSpline")]  RationalSpline
    }


    [XmlType(TypeName = "CodeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CodeType
    {
        [XmlIgnore] private String _codeSpace;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public String CodeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CodeWithAuthorityType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CodeWithAuthorityType : CodeType
    {
        [XmlIgnore] private String _codeSpace;

        public CodeWithAuthorityType()
        {
            CodeSpace = string.Empty;
        }

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public String CodeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MeasureType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MeasureType
    {
        [XmlIgnore] private String _uom;

        [XmlIgnore] private Double _value;

        [XmlIgnore] public bool ValueSpecified;

        [XmlAttribute(AttributeName = "uom")]
        public String Uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        [XmlText(typeof (Double))]
        public Double Value
        {
            get { return _value; }
            set
            {
                _value = value;
                ValueSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CoordinatesType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CoordinatesType
    {
        [XmlIgnore] private String _cs;
        [XmlIgnore] private String _decimal;
        [XmlIgnore] private String _ts;
        [XmlIgnore] private String _value;

        public CoordinatesType()
        {
            Decimal = ".";
            Cs = ",";
            Ts = " ";
        }

        [XmlAttribute(AttributeName = "decimal", DataType = "string")]
        public String Decimal
        {
            get { return _decimal; }
            set { _decimal = value; }
        }

        [XmlAttribute(AttributeName = "cs", DataType = "string")]
        public String Cs
        {
            get { return _cs; }
            set { _cs = value; }
        }

        [XmlAttribute(AttributeName = "ts", DataType = "string")]
        public String Ts
        {
            get { return _ts; }
            set { _ts = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CodeListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CodeListType
    {
        [XmlIgnore] private String _codeSpace;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public String CodeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CodeOrNilReasonListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CodeOrNilReasonListType
    {
        [XmlIgnore] private String _codeSpace;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public String CodeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MeasureListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MeasureListType
    {
        [XmlIgnore] private String _uom;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "uom")]
        public String Uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MeasureOrNilReasonListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MeasureOrNilReasonListType
    {
        [XmlIgnore] private String _uom;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "uom")]
        public String Uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractGMLType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGMLType
    {
        [XmlIgnore] private Description _description;
        [XmlIgnore] private DescriptionReference _descriptionReference;
        [XmlIgnore] private String _id;
        [XmlIgnore] private Identifier _identifier;

        [XmlIgnore] private List<MetaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<Name> _name;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public String Id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (MetaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<MetaDataProperty> MetaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<MetaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (Description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Description Description
        {
            get
            {
                
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (DescriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DescriptionReference DescriptionReference
        {
            get
            {
                
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (Identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Identifier Identifier
        {
            get
            {
                
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (Name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Name> Name
        {
            get
            {
                if (_name == null) _name = new List<Name>();
                return _name;
            }
            set { _name = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AssociationRoleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AssociationRoleType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;
        [XmlAnyElement] public XmlElement Any;

        public AssociationRoleType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "ReferenceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ReferenceType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public ReferenceType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "InlinePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class InlinePropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        [XmlAnyElement] public XmlElement Any;

        public InlinePropertyType()
        {
            Owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractMemberType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractMemberType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public AbstractMemberType()
        {
            Owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractMetadataPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractMetadataPropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public AbstractMetadataPropertyType()
        {
            Owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "DefinitionBaseType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DefinitionBaseType : AbstractGMLType
    {
        [XmlIgnore] private Description _description;
        [XmlIgnore] private DescriptionReference _descriptionReference;
        [XmlIgnore] private String _id;
        [XmlIgnore] private Identifier _identifier;

        [XmlIgnore] private List<MetaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<Name> _name;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public String Id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (MetaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<MetaDataProperty> MetaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<MetaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (Description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Description Description
        {
            get
            {
                
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (DescriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DescriptionReference DescriptionReference
        {
            get
            {
                
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (Identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Identifier Identifier
        {
            get
            {
                
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (Name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Name> Name
        {
            get
            {
                if (_name == null) _name = new List<Name>();
                return _name;
            }
            set { _name = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DefinitionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DefinitionType : DefinitionBaseType
    {
        [XmlIgnore] private String _remarks;

        [XmlElement(ElementName = "remarks", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string",
            Namespace = Declarations.SchemaVersion)]
        public String Remarks
        {
            get { return _remarks; }
            set { _remarks = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DictionaryType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DictionaryType : DefinitionType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;

        [XmlIgnore] private List<DictionaryEntry> _dictionaryEntry;

        [XmlIgnore] private List<IndirectEntry> _indirectEntry;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (DictionaryEntry), ElementName = "dictionaryEntry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DictionaryEntry> DictionaryEntry
        {
            get
            {
                if (_dictionaryEntry == null) _dictionaryEntry = new List<DictionaryEntry>();
                return _dictionaryEntry;
            }
            set { _dictionaryEntry = value; }
        }

        [XmlElement(Type = typeof (IndirectEntry), ElementName = "indirectEntry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<IndirectEntry> IndirectEntry
        {
            get
            {
                if (_indirectEntry == null) _indirectEntry = new List<IndirectEntry>();
                return _indirectEntry;
            }
            set { _indirectEntry = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DictionaryEntry _c in DictionaryEntry) _c.MakeSchemaCompliant();
            foreach (IndirectEntry _c in IndirectEntry) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DictionaryEntryType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DictionaryEntryType : AbstractMemberType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Definition _definition;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public DictionaryEntryType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Definition), ElementName = "Definition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Definition Definition
        {
            get
            {
                
                return _definition;
            }
            set { _definition = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Definition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UnitOfMeasureType", Namespace = Declarations.SchemaVersion), Serializable]
    public class UnitOfMeasureType
    {
        [XmlIgnore] private String _uom;

        [XmlAttribute(AttributeName = "uom")]
        public String Uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "UnitDefinitionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class UnitDefinitionType : DefinitionType
    {
        [XmlIgnore] private CatalogSymbol _catalogSymbol;
        [XmlIgnore] private QuantityType _quantityType;

        [XmlIgnore] private QuantityTypeReference _quantityTypeReference;

        [XmlElement(Type = typeof (QuantityType), ElementName = "quantityType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public QuantityType QuantityType
        {
            get
            {
                
                return _quantityType;
            }
            set { _quantityType = value; }
        }

        [XmlElement(Type = typeof (QuantityTypeReference), ElementName = "quantityTypeReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public QuantityTypeReference QuantityTypeReference
        {
            get
            {
                
                return _quantityTypeReference;
            }
            set { _quantityTypeReference = value; }
        }

        [XmlElement(Type = typeof (CatalogSymbol), ElementName = "catalogSymbol", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CatalogSymbol CatalogSymbol
        {
            get
            {
                
                return _catalogSymbol;
            }
            set { _catalogSymbol = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BaseUnitType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BaseUnitType : UnitDefinitionType
    {
        [XmlIgnore] private ReferenceType _unitsSystem;

        [XmlElement(Type = typeof (ReferenceType), ElementName = "unitsSystem", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ReferenceType UnitsSystem
        {
            get
            {
                
                return _unitsSystem;
            }
            set { _unitsSystem = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            UnitsSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DerivedUnitType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DerivedUnitType : UnitDefinitionType
    {
        [XmlIgnore] private List<DerivationUnitTerm> _derivationUnitTerm;

        [XmlIgnore]
        public DerivationUnitTerm this[int index]
        {
            get { return DerivationUnitTerm[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return DerivationUnitTerm.Count; }
        }

        [XmlElement(Type = typeof (DerivationUnitTerm), ElementName = "derivationUnitTerm", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DerivationUnitTerm> DerivationUnitTerm
        {
            get
            {
                if (_derivationUnitTerm == null) _derivationUnitTerm = new List<DerivationUnitTerm>();
                return _derivationUnitTerm;
            }
            set { _derivationUnitTerm = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return DerivationUnitTerm.GetEnumerator();
        }

        public void Add(DerivationUnitTerm obj)
        {
            DerivationUnitTerm.Add(obj);
        }

        public void Clear()
        {
            DerivationUnitTerm.Clear();
        }

        public DerivationUnitTerm Remove(Int32 index)
        {
            DerivationUnitTerm obj = DerivationUnitTerm[index];
            DerivationUnitTerm.Remove(obj);
            return obj;
        }

        public bool Remove(DerivationUnitTerm obj)
        {
            return DerivationUnitTerm.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DerivationUnitTerm _c in DerivationUnitTerm) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DerivationUnitTermType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DerivationUnitTermType : UnitOfMeasureType
    {
        [XmlIgnore] private String _exponent;

        [XmlAttribute(AttributeName = "exponent", DataType = "integer")]
        public String Exponent
        {
            get { return _exponent; }
            set { _exponent = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConventionalUnitType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConventionalUnitType : UnitDefinitionType
    {
        [XmlIgnore] private ConversionToPreferredUnit _conversionToPreferredUnit;
        [XmlIgnore] private List<DerivationUnitTerm> _derivationUnitTerm;

        [XmlIgnore] private RoughConversionToPreferredUnit _roughConversionToPreferredUnit;

        [XmlElement(Type = typeof (ConversionToPreferredUnit), ElementName = "conversionToPreferredUnit",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ConversionToPreferredUnit ConversionToPreferredUnit
        {
            get
            {
                
                return _conversionToPreferredUnit;
            }
            set { _conversionToPreferredUnit = value; }
        }

        [XmlElement(Type = typeof (RoughConversionToPreferredUnit), ElementName = "roughConversionToPreferredUnit",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public RoughConversionToPreferredUnit RoughConversionToPreferredUnit
        {
            get
            {
                
                return _roughConversionToPreferredUnit;
            }
            set { _roughConversionToPreferredUnit = value; }
        }

        [XmlElement(Type = typeof (DerivationUnitTerm), ElementName = "derivationUnitTerm", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DerivationUnitTerm> DerivationUnitTerm
        {
            get
            {
                if (_derivationUnitTerm == null) _derivationUnitTerm = new List<DerivationUnitTerm>();
                return _derivationUnitTerm;
            }
            set { _derivationUnitTerm = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            ConversionToPreferredUnit.MakeSchemaCompliant();
            RoughConversionToPreferredUnit.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConversionToPreferredUnitType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConversionToPreferredUnitType : UnitOfMeasureType
    {
        [XmlIgnore] private Double _factor;

        [XmlIgnore] public bool FactorSpecified;


        [XmlIgnore] private Formula _formula;

        public ConversionToPreferredUnitType()
        {
            FactorSpecified = true;
        }

        [XmlElement(ElementName = "factor", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public Double Factor
        {
            get { return _factor; }
            set
            {
                _factor = value;
                FactorSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Formula), ElementName = "formula", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public Formula Formula
        {
            get
            {
                
                return _formula;
            }
            set { _formula = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Formula.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FormulaType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FormulaType
    {
        [XmlIgnore] private Double _a;

        [XmlIgnore] public bool _aSpecified;


        [XmlIgnore] private Double _b;

        [XmlIgnore] public bool _bSpecified;


        [XmlIgnore] private Double _c;

        [XmlIgnore] public bool _cSpecified;


        [XmlIgnore] private Double _d;

        [XmlIgnore] public bool _dSpecified;


        public FormulaType()
        {
            _bSpecified = true;
            _cSpecified = true;
        }

        [XmlElement(ElementName = "a", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public Double a
        {
            get { return _a; }
            set
            {
                _a = value;
                _aSpecified = true;
            }
        }

        [XmlElement(ElementName = "b", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public Double b
        {
            get { return _b; }
            set
            {
                _b = value;
                _bSpecified = true;
            }
        }

        [XmlElement(ElementName = "c", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public Double c
        {
            get { return _c; }
            set
            {
                _c = value;
                _cSpecified = true;
            }
        }

        [XmlElement(ElementName = "d", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public Double d
        {
            get { return _d; }
            set
            {
                _d = value;
                _dSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "LengthType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LengthType : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ScaleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ScaleType : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeType : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridLengthType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridLengthType : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AreaType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AreaType : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VolumeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VolumeType : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SpeedType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SpeedType : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AngleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AngleType : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeometryType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeometryType : AbstractGMLType
    {
        [XmlIgnore] private String _axisLabels;
        [XmlIgnore] private String _srsDimension;
        [XmlIgnore] private String _srsName;
        [XmlIgnore] private String _uomLabels;

        [XmlAttribute(AttributeName = "srsName", DataType = "anyURI")]
        public String SrsName
        {
            get { return _srsName; }
            set { _srsName = value; }
        }

        [XmlAttribute(AttributeName = "srsDimension", DataType = "positiveInteger")]
        public String SrsDimension
        {
            get { return _srsDimension; }
            set { _srsDimension = value; }
        }

        [XmlAttribute(AttributeName = "axisLabels")]
        public String AxisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlAttribute(AttributeName = "uomLabels")]
        public String UomLabels
        {
            get { return _uomLabels; }
            set { _uomLabels = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometryPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class GeometryPropertyType
    {
        [XmlIgnore] private AbstractGeometry _abstractGeometry;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public GeometryPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _abstractGeometry; }
            set { _abstractGeometry = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometryArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class GeometryArrayPropertyType
    {
        [XmlIgnore] private List<AbstractGeometry> _abstractGeometry;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public GeometryArrayPropertyType()
        {
            Owns = false;
        }

        [XmlIgnore]
        public AbstractGeometry this[int index]
        {
            get { return AbstractGeometry[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractGeometry.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractGeometry> AbstractGeometry
        {
            get
            {
                if (_abstractGeometry == null) _abstractGeometry = new List<AbstractGeometry>();
                return _abstractGeometry;
            }
            set { _abstractGeometry = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractGeometry.GetEnumerator();
        }

        public void Add(AbstractGeometry obj)
        {
            AbstractGeometry.Add(obj);
        }

        public void Clear()
        {
            AbstractGeometry.Clear();
        }

        public AbstractGeometry Remove(Int32 index)
        {
            AbstractGeometry obj = AbstractGeometry[index];
            AbstractGeometry.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractGeometry obj)
        {
            return AbstractGeometry.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractGeometry _c in AbstractGeometry) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectPositionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectPositionType
    {
        [XmlIgnore] private String _axisLabels;
        [XmlIgnore] private String _srsDimension;
        [XmlIgnore] private String _srsName;
        [XmlIgnore] private String _uomLabels;
        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "srsName", DataType = "anyURI")]
        public String SrsName
        {
            get { return _srsName; }
            set { _srsName = value; }
        }

        [XmlAttribute(AttributeName = "srsDimension", DataType = "positiveInteger")]
        public String SrsDimension
        {
            get { return _srsDimension; }
            set { _srsDimension = value; }
        }

        [XmlAttribute(AttributeName = "axisLabels")]
        public String AxisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlAttribute(AttributeName = "uomLabels")]
        public String UomLabels
        {
            get { return _uomLabels; }
            set { _uomLabels = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "DirectPositionListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectPositionListType
    {
        [XmlIgnore] private String _axisLabels;
        [XmlIgnore] private String _count;
        [XmlIgnore] private String _srsDimension;
        [XmlIgnore] private String _srsName;
        [XmlIgnore] private String _uomLabels;
        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "srsName", DataType = "anyURI")]
        public String SrsName
        {
            get { return _srsName; }
            set { _srsName = value; }
        }

        [XmlAttribute(AttributeName = "srsDimension", DataType = "positiveInteger")]
        public String SrsDimension
        {
            get { return _srsDimension; }
            set { _srsDimension = value; }
        }

        [XmlAttribute(AttributeName = "axisLabels")]
        public String AxisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlAttribute(AttributeName = "uomLabels")]
        public String UomLabels
        {
            get { return _uomLabels; }
            set { _uomLabels = value; }
        }

        [XmlAttribute(AttributeName = "count", DataType = "positiveInteger")]
        public String Count
        {
            get { return _count; }
            set { _count = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "VectorType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VectorType : DirectPositionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EnvelopeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EnvelopeType
    {
        [XmlIgnore] private String _axisLabels;
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private DirectPositionType _lowerCorner;
        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private String _srsDimension;
        [XmlIgnore] private String _srsName;
        [XmlIgnore] private String _uomLabels;
        [XmlIgnore] private DirectPositionType _upperCorner;

        [XmlAttribute(AttributeName = "srsName", DataType = "anyURI")]
        public String SrsName
        {
            get { return _srsName; }
            set { _srsName = value; }
        }

        [XmlAttribute(AttributeName = "srsDimension", DataType = "positiveInteger")]
        public String SrsDimension
        {
            get { return _srsDimension; }
            set { _srsDimension = value; }
        }

        [XmlAttribute(AttributeName = "axisLabels")]
        public String AxisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlAttribute(AttributeName = "uomLabels")]
        public String UomLabels
        {
            get { return _uomLabels; }
            set { _uomLabels = value; }
        }

        [XmlElement(Type = typeof (DirectPositionType), ElementName = "lowerCorner", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectPositionType LowerCorner
        {
            get
            {
                
                return _lowerCorner;
            }
            set { _lowerCorner = value; }
        }

        [XmlElement(Type = typeof (DirectPositionType), ElementName = "upperCorner", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectPositionType UpperCorner
        {
            get
            {
                
                return _upperCorner;
            }
            set { _upperCorner = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            LowerCorner.MakeSchemaCompliant();
            UpperCorner.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeometricPrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeometricPrimitiveType : AbstractGeometryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometricPrimitivePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractSurfaceType))]
    [XmlInclude(typeof (AbstractSolidType))]
    [XmlInclude(typeof (AbstractCurveType))]
    [XmlInclude(typeof (PointType))]
    public class GeometricPrimitivePropertyType
    {
        [XmlIgnore] private AbstractGeometricPrimitive _abstractGeometricPrimitive;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public GeometricPrimitivePropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometricPrimitive), ElementName = "AbstractGeometricPrimitive",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometricPrimitive AbstractGeometricPrimitive
        {
            get { return _abstractGeometricPrimitive; }
            set { _abstractGeometricPrimitive = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeometricPrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PointType : AbstractGeometricPrimitiveType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private Pos _pos;

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Pos Pos
        {
            get
            {
                
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Pos.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PointPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PointPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private Point _point;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public PointPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Point), ElementName = "Point", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Point Point
        {
            get
            {
                
                return _point;
            }
            set { _point = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Point.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PointArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PointArrayPropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private List<Point> _point;

        public PointArrayPropertyType()
        {
            Owns = false;
        }

        [XmlIgnore]
        public Point this[int index]
        {
            get { return Point[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return Point.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Point), ElementName = "Point", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Point> Point
        {
            get
            {
                if (_point == null) _point = new List<Point>();
                return _point;
            }
            set { _point = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Point.GetEnumerator();
        }

        public void Add(Point obj)
        {
            Point.Add(obj);
        }

        public void Clear()
        {
            Point.Clear();
        }

        public Point Remove(Int32 index)
        {
            Point obj = Point[index];
            Point.Remove(obj);
            return obj;
        }

        public bool Remove(Point obj)
        {
            return Point.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (Point _c in Point) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCurveType : AbstractGeometricPrimitiveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CurvePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (CurveType))]
    [XmlInclude(typeof (CompositeCurveType))]
    [XmlInclude(typeof (OrientableCurveType))]
    [XmlInclude(typeof (LineStringType))]
    public class CurvePropertyType
    {
        [XmlIgnore] private AbstractCurve _abstractCurve;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CurvePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractCurve), ElementName = "AbstractCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCurve AbstractCurve
        {
            get { return _abstractCurve; }
            set { _abstractCurve = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractCurve.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CurveArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (CurveType))]
    [XmlInclude(typeof (CompositeCurveType))]
    [XmlInclude(typeof (OrientableCurveType))]
    [XmlInclude(typeof (LineStringType))]
    public class CurveArrayPropertyType
    {
        [XmlIgnore] private List<AbstractCurve> _abstractCurve;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public CurveArrayPropertyType()
        {
            Owns = false;
        }

        [XmlIgnore]
        public AbstractCurve this[int index]
        {
            get { return AbstractCurve[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractCurve.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractCurve), ElementName = "AbstractCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractCurve> AbstractCurve
        {
            get
            {
                if (_abstractCurve == null) _abstractCurve = new List<AbstractCurve>();
                return _abstractCurve;
            }
            set { _abstractCurve = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractCurve.GetEnumerator();
        }

        public void Add(AbstractCurve obj)
        {
            AbstractCurve.Add(obj);
        }

        public void Clear()
        {
            AbstractCurve.Clear();
        }

        public AbstractCurve Remove(Int32 index)
        {
            AbstractCurve obj = AbstractCurve[index];
            AbstractCurve.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractCurve obj)
        {
            return AbstractCurve.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractCurve _c in AbstractCurve) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LineStringType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LineStringType : AbstractCurveType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;
        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractSurfaceType : AbstractGeometricPrimitiveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SurfacePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (CompositeSurfaceType))]
    [XmlInclude(typeof (PolygonType))]
    [XmlInclude(typeof (SurfaceType))]
    [XmlInclude(typeof (OrientableSurfaceType))]
    public class SurfacePropertyType
    {
        [XmlIgnore] private AbstractSurface _abstractSurface;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public SurfacePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractSurface), ElementName = "AbstractSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractSurface AbstractSurface
        {
            get { return _abstractSurface; }
            set { _abstractSurface = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractSurface.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SurfaceArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (CompositeSurfaceType))]
    [XmlInclude(typeof (PolygonType))]
    [XmlInclude(typeof (SurfaceType))]
    [XmlInclude(typeof (OrientableSurfaceType))]
    public class SurfaceArrayPropertyType
    {
        [XmlIgnore] private List<AbstractSurface> _abstractSurface;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public SurfaceArrayPropertyType()
        {
            Owns = false;
        }

        [XmlIgnore]
        public AbstractSurface this[int index]
        {
            get { return AbstractSurface[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractSurface.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractSurface), ElementName = "AbstractSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractSurface> AbstractSurface
        {
            get
            {
                if (_abstractSurface == null) _abstractSurface = new List<AbstractSurface>();
                return _abstractSurface;
            }
            set { _abstractSurface = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractSurface.GetEnumerator();
        }

        public void Add(AbstractSurface obj)
        {
            AbstractSurface.Add(obj);
        }

        public void Clear()
        {
            AbstractSurface.Clear();
        }

        public AbstractSurface Remove(Int32 index)
        {
            AbstractSurface obj = AbstractSurface[index];
            AbstractSurface.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractSurface obj)
        {
            return AbstractSurface.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractSurface _c in AbstractSurface) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PolygonType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PolygonType : AbstractSurfaceType
    {
        [XmlIgnore] private Exterior _exterior;

        [XmlIgnore] private List<Interior> _interior;

        [XmlElement(Type = typeof (Exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Exterior Exterior
        {
            get
            {
                
                return _exterior;
            }
            set { _exterior = value; }
        }

        [XmlElement(Type = typeof (Interior), ElementName = "interior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<Interior> Interior
        {
            get
            {
                if (_interior == null) _interior = new List<Interior>();
                return _interior;
            }
            set { _interior = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractRingType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractRingType
    {
        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractRingPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (LinearRingType))]
    [XmlInclude(typeof (RingType))]
    public class AbstractRingPropertyType
    {
        [XmlIgnore] private AbstractRing _abstractRing;

        [XmlElement(Type = typeof (AbstractRing), ElementName = "AbstractRing", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractRing AbstractRing
        {
            get { return _abstractRing; }
            set { _abstractRing = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractRing.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LinearRingType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LinearRingType : AbstractRingType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;
        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LinearRingPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LinearRingPropertyType
    {
        [XmlIgnore] private LinearRing _linearRing;

        [XmlElement(Type = typeof (LinearRing), ElementName = "LinearRing", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LinearRing LinearRing
        {
            get
            {
                
                return _linearRing;
            }
            set { _linearRing = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            LinearRing.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CurveType : AbstractCurveType
    {
        [XmlIgnore] private Segments _segments;

        [XmlElement(Type = typeof (Segments), ElementName = "segments", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Segments Segments
        {
            get
            {
                
                return _segments;
            }
            set { _segments = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Segments.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OrientableCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OrientableCurveType : AbstractCurveType
    {
        [XmlIgnore] private BaseCurve _baseCurve;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool OrientationSpecified;

        public OrientableCurveType()
        {
            Orientation = SignType.Positive;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType Orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                OrientationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (BaseCurve), ElementName = "baseCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public BaseCurve BaseCurve
        {
            get
            {
                
                return _baseCurve;
            }
            set { _baseCurve = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            BaseCurve.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCurveSegmentType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCurveSegmentType
    {
        [XmlIgnore] private String _numDerivativeInterior;
        [XmlIgnore] private String _numDerivativesAtEnd;
        [XmlIgnore] private String _numDerivativesAtStart;

        public AbstractCurveSegmentType()
        {
            NumDerivativesAtStart = "0";
            NumDerivativesAtEnd = "0";
            NumDerivativeInterior = "0";
        }

        [XmlAttribute(AttributeName = "numDerivativesAtStart", DataType = "integer")]
        public String NumDerivativesAtStart
        {
            get { return _numDerivativesAtStart; }
            set { _numDerivativesAtStart = value; }
        }

        [XmlAttribute(AttributeName = "numDerivativesAtEnd", DataType = "integer")]
        public String NumDerivativesAtEnd
        {
            get { return _numDerivativesAtEnd; }
            set { _numDerivativesAtEnd = value; }
        }

        [XmlAttribute(AttributeName = "numDerivativeInterior", DataType = "integer")]
        public String NumDerivativeInterior
        {
            get { return _numDerivativeInterior; }
            set { _numDerivativeInterior = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CurveSegmentArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (LineStringSegmentType))]
    [XmlInclude(typeof (ClothoidType))]
    [XmlInclude(typeof (OffsetCurveType))]
    [XmlInclude(typeof (ArcStringByBulgeType))]
    [XmlInclude(typeof (ArcStringType))]
    [XmlInclude(typeof (CubicSplineType))]
    [XmlInclude(typeof (ArcByCenterPointType))]
    [XmlInclude(typeof (GeodesicStringType))]
    [XmlInclude(typeof (BSplineType))]
    public class CurveSegmentArrayPropertyType
    {
        [XmlIgnore] private List<AbstractCurveSegment> _abstractCurveSegment;

        [XmlIgnore]
        public AbstractCurveSegment this[int index]
        {
            get { return AbstractCurveSegment[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractCurveSegment.Count; }
        }

        [XmlElement(Type = typeof (AbstractCurveSegment), ElementName = "AbstractCurveSegment", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractCurveSegment> AbstractCurveSegment
        {
            get
            {
                if (_abstractCurveSegment == null) _abstractCurveSegment = new List<AbstractCurveSegment>();
                return _abstractCurveSegment;
            }
            set { _abstractCurveSegment = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractCurveSegment.GetEnumerator();
        }

        public void Add(AbstractCurveSegment obj)
        {
            AbstractCurveSegment.Add(obj);
        }

        public void Clear()
        {
            AbstractCurveSegment.Clear();
        }

        public AbstractCurveSegment Remove(Int32 index)
        {
            AbstractCurveSegment obj = AbstractCurveSegment[index];
            AbstractCurveSegment.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractCurveSegment obj)
        {
            return AbstractCurveSegment.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractCurveSegment _c in AbstractCurveSegment) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LineStringSegmentType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LineStringSegmentType : AbstractCurveSegmentType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;

        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        public LineStringSegmentType()
        {
            Interpolation = CurveInterpolationType.Linear;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcStringType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcStringType : AbstractCurveSegmentType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;

        [XmlIgnore] private String _numArc;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;

        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        public ArcStringType()
        {
            Interpolation = CurveInterpolationType.CircularArc3Points;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public String NumArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcType : ArcStringType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private String _numArc;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;

        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        public ArcType()
        {
            NumArc = "1";
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public String NumArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CircleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CircleType : ArcType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcStringByBulgeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcStringByBulgeType : AbstractCurveSegmentType
    {
        [XmlIgnore] private List<Double> _bulge;
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;
        [XmlIgnore] private List<VectorType> _normal;

        [XmlIgnore] private String _numArc;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;

        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        public ArcStringByBulgeType()
        {
            Interpolation = CurveInterpolationType.CircularArc2PointWithBulge;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public String NumArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(Type = typeof (Double), ElementName = "bulge", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public List<Double> Bulge
        {
            get
            {
                if (_bulge == null) _bulge = new List<Double>();
                return _bulge;
            }
            set { _bulge = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "normal", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<VectorType> Normal
        {
            get
            {
                if (_normal == null) _normal = new List<VectorType>();
                return _normal;
            }
            set { _normal = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
            foreach (VectorType _c in Normal) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcByBulgeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcByBulgeType : ArcStringByBulgeType
    {
        [XmlIgnore] private Double _bulge;

        [XmlIgnore] public bool BulgeSpecified;
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private VectorType _normal;
        [XmlIgnore] private String _numArc;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;

        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        public ArcByBulgeType()
        {
            NumArc = "1";
            BulgeSpecified = true;
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public String NumArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }


        [XmlElement(ElementName = "bulge", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public Double Bulge
        {
            get { return _bulge; }
            set
            {
                _bulge = value;
                BulgeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "normal", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VectorType Normal
        {
            get
            {
                
                return _normal;
            }
            set { _normal = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
            Normal.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcByCenterPointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcByCenterPointType : AbstractCurveSegmentType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private AngleType _endAngle;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;

        [XmlIgnore] private String _numArc;
        [XmlIgnore] private PointProperty _pointProperty;
        [XmlIgnore] private PointRep _pointRep;

        [XmlIgnore] private Pos _pos;
        [XmlIgnore] private PosList _posList;
        [XmlIgnore] private LengthType _radius;
        [XmlIgnore] private AngleType _startAngle;

        public ArcByCenterPointType()
        {
            Interpolation = CurveInterpolationType.CircularArcCenterPointWithRadius;
            NumArc = "1";
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public String NumArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Pos Pos
        {
            get
            {
                
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointProperty PointProperty
        {
            get
            {
                
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointRep PointRep
        {
            get
            {
                
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "radius", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType Radius
        {
            get
            {
                
                return _radius;
            }
            set { _radius = value; }
        }

        [XmlElement(Type = typeof (AngleType), ElementName = "startAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AngleType StartAngle
        {
            get
            {
                
                return _startAngle;
            }
            set { _startAngle = value; }
        }

        [XmlElement(Type = typeof (AngleType), ElementName = "endAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AngleType EndAngle
        {
            get
            {
                
                return _endAngle;
            }
            set { _endAngle = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Pos.MakeSchemaCompliant();
            PointProperty.MakeSchemaCompliant();
            PointRep.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
            Radius.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CircleByCenterPointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CircleByCenterPointType : ArcByCenterPointType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private PointProperty _pointProperty;
        [XmlIgnore] private PointRep _pointRep;
        [XmlIgnore] private Pos _pos;
        [XmlIgnore] private PosList _posList;
        [XmlIgnore] private LengthType _radius;

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Pos Pos
        {
            get
            {
                
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointProperty PointProperty
        {
            get
            {
                
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointRep PointRep
        {
            get
            {
                
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "radius", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType Radius
        {
            get
            {
                
                return _radius;
            }
            set { _radius = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Pos.MakeSchemaCompliant();
            PointProperty.MakeSchemaCompliant();
            PointRep.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
            Radius.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CubicSplineType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CubicSplineType : AbstractCurveSegmentType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private String _degree;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;
        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;
        [XmlIgnore] private VectorType _vectorAtEnd;
        [XmlIgnore] private VectorType _vectorAtStart;

        public CubicSplineType()
        {
            Interpolation = CurveInterpolationType.CubicSpline;
            Degree = "3";
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "degree", DataType = "integer")]
        public String Degree
        {
            get { return _degree; }
            set { _degree = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "vectorAtStart", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VectorType VectorAtStart
        {
            get
            {
                
                return _vectorAtStart;
            }
            set { _vectorAtStart = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "vectorAtEnd", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VectorType VectorAtEnd
        {
            get
            {
                
                return _vectorAtEnd;
            }
            set { _vectorAtEnd = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
            VectorAtStart.MakeSchemaCompliant();
            VectorAtEnd.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BSplineType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BSplineType : AbstractCurveSegmentType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private String _degree;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;

        [XmlIgnore] private Boolean _isPolynomial;

        [XmlIgnore] public bool IsPolynomialSpecified;
        [XmlIgnore] private List<KnotPropertyType> _knot;

        [XmlIgnore] private KnotTypesType _knotType;

        [XmlIgnore] public bool KnotTypeSpecified;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;

        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        public BSplineType()
        {
            Interpolation = CurveInterpolationType.PolynomialSpline;
            Degree = string.Empty;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "isPolynomial", DataType = "boolean")]
        public Boolean IsPolynomial
        {
            get { return _isPolynomial; }
            set
            {
                _isPolynomial = value;
                IsPolynomialSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "knotType")]
        public KnotTypesType KnotType
        {
            get { return _knotType; }
            set
            {
                _knotType = value;
                KnotTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(ElementName = "degree", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public String Degree
        {
            get { return _degree; }
            set { _degree = value; }
        }

        [XmlElement(Type = typeof (KnotPropertyType), ElementName = "knot", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<KnotPropertyType> Knot
        {
            get
            {
                if (_knot == null) _knot = new List<KnotPropertyType>();
                return _knot;
            }
            set { _knot = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
            foreach (KnotPropertyType _c in Knot) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "KnotType", Namespace = Declarations.SchemaVersion), Serializable]
    public class KnotType
    {
        [XmlIgnore] private String _multiplicity;
        [XmlIgnore] private Value _value;

        [XmlIgnore] private Double _weight;

        [XmlIgnore] public bool WeightSpecified;


        public KnotType()
        {
            Multiplicity = string.Empty;
            WeightSpecified = true;
        }

        [XmlElement(Type = typeof (Value), ElementName = "value", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Value Value
        {
            get
            {
                
                return _value;
            }
            set { _value = value; }
        }

        [XmlElement(ElementName = "multiplicity", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public String Multiplicity
        {
            get { return _multiplicity; }
            set { _multiplicity = value; }
        }

        [XmlElement(ElementName = "weight", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public Double Weight
        {
            get { return _weight; }
            set
            {
                _weight = value;
                WeightSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
            Value.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "KnotPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class KnotPropertyType
    {
        [XmlIgnore] private KnotType _knot;

        [XmlElement(Type = typeof (KnotType), ElementName = "Knot", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public KnotType Knot
        {
            get
            {
                
                return _knot;
            }
            set { _knot = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Knot.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BezierType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BezierType : BSplineType
    {
        [XmlIgnore] private Coordinates _coordinates;
        [XmlIgnore] private String _degree;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;

        [XmlIgnore] private bool _isPolynomial;

        [XmlIgnore] public bool IsPolynomialSpecified;
        [XmlIgnore] private List<KnotPropertyType> _knot;

        [XmlIgnore] private String _knotType;
        [XmlIgnore] private List<PointProperty> _pointProperty;
        [XmlIgnore] private List<PointRep> _pointRep;

        [XmlIgnore] private List<Pos> _pos;
        [XmlIgnore] private PosList _posList;

        public BezierType()
        {
            Interpolation = CurveInterpolationType.PolynomialSpline;
            IsPolynomial = true;
            Degree = string.Empty;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "isPolynomial", DataType = "boolean")]
        public bool IsPolynomial
        {
            get { return _isPolynomial; }
            set
            {
                _isPolynomial = value;
                IsPolynomialSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "knotType", DataType = "KnotTypesType")]
        public String KnotType
        {
            get { return _knotType; }
            set { _knotType = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Pos> Pos
        {
            get
            {
                if (_pos == null) _pos = new List<Pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointProperty> PointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<PointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (PointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointRep> PointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<PointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Coordinates Coordinates
        {
            get
            {
                
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(ElementName = "degree", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public String Degree
        {
            get { return _degree; }
            set { _degree = value; }
        }

        [XmlElement(Type = typeof (KnotPropertyType), ElementName = "knot", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<KnotPropertyType> Knot
        {
            get
            {
                if (_knot == null) _knot = new List<KnotPropertyType>();
                return _knot;
            }
            set { _knot = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Pos _c in Pos) _c.MakeSchemaCompliant();
            foreach (PointProperty _c in PointProperty) _c.MakeSchemaCompliant();
            foreach (PointRep _c in PointRep) _c.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Coordinates.MakeSchemaCompliant();
            foreach (KnotPropertyType _c in Knot) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OffsetCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OffsetCurveType : AbstractCurveSegmentType
    {
        [XmlIgnore] private LengthType _distance;
        [XmlIgnore] private CurvePropertyType _offsetBase;
        [XmlIgnore] private VectorType _refDirection;

        [XmlElement(Type = typeof (CurvePropertyType), ElementName = "offsetBase", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CurvePropertyType OffsetBase
        {
            get
            {
                
                return _offsetBase;
            }
            set { _offsetBase = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "distance", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType Distance
        {
            get
            {
                
                return _distance;
            }
            set { _distance = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "refDirection", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VectorType RefDirection
        {
            get
            {
                
                return _refDirection;
            }
            set { _refDirection = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            OffsetBase.MakeSchemaCompliant();
            Distance.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AffinePlacementType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AffinePlacementType
    {
        [XmlIgnore] private String _inDimension;
        [XmlIgnore] private Location _location;
        [XmlIgnore] private String _outDimension;

        [XmlIgnore] private List<VectorType> _refDirection;

        public AffinePlacementType()
        {
            InDimension = string.Empty;
            OutDimension = string.Empty;
        }

        [XmlElement(Type = typeof (Location), ElementName = "location", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Location Location
        {
            get
            {
                
                return _location;
            }
            set { _location = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "refDirection", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<VectorType> RefDirection
        {
            get
            {
                if (_refDirection == null) _refDirection = new List<VectorType>();
                return _refDirection;
            }
            set { _refDirection = value; }
        }

        [XmlElement(ElementName = "inDimension", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public String InDimension
        {
            get { return _inDimension; }
            set { _inDimension = value; }
        }

        [XmlElement(ElementName = "outDimension", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public String OutDimension
        {
            get { return _outDimension; }
            set { _outDimension = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Location.MakeSchemaCompliant();
            foreach (VectorType _c in RefDirection) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ClothoidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ClothoidType : AbstractCurveSegmentType
    {
        [XmlIgnore] private Double _endParameter;

        [XmlIgnore] public bool EndParameterSpecified;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;

        [XmlIgnore] private RefLocation _refLocation;

        [XmlIgnore] private Decimal _scaleFactor;

        [XmlIgnore] public bool ScaleFactorSpecified;


        [XmlIgnore] private Double _startParameter;

        [XmlIgnore] public bool StartParameterSpecified;

        public ClothoidType()
        {
            Interpolation = CurveInterpolationType.Clothoid;
            ScaleFactorSpecified = true;
            StartParameterSpecified = true;
            EndParameterSpecified = true;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (RefLocation), ElementName = "refLocation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public RefLocation RefLocation
        {
            get { return _refLocation; }
            set { _refLocation = value; }
        }

        [XmlElement(ElementName = "scaleFactor", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "decimal", Namespace = Declarations.SchemaVersion)]
        public Decimal ScaleFactor
        {
            get { return _scaleFactor; }
            set
            {
                _scaleFactor = value;
                ScaleFactorSpecified = true;
            }
        }


        [XmlElement(ElementName = "startParameter", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public Double StartParameter
        {
            get { return _startParameter; }
            set
            {
                _startParameter = value;
                StartParameterSpecified = true;
            }
        }


        [XmlElement(ElementName = "endParameter", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public Double EndParameter
        {
            get { return _endParameter; }
            set
            {
                _endParameter = value;
                EndParameterSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            RefLocation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "refLocation", Namespace = Declarations.SchemaVersion), Serializable]
    public class  RefLocation
    {
        [XmlIgnore] private AffinePlacement _affinePlacement;

        [XmlElement(Type = typeof (AffinePlacement), ElementName = "AffinePlacement", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AffinePlacement AffinePlacement
        {
            get
            {
                
                return _affinePlacement;
            }
            set { _affinePlacement = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AffinePlacement.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodesicStringType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodesicStringType : AbstractCurveSegmentType
    {
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;
        [XmlIgnore] private PointProperty _pointProperty;
        [XmlIgnore] private Pos _pos;

        [XmlIgnore] private PosList _posList;

        public GeodesicStringType()
        {
            Interpolation = CurveInterpolationType.Geodesic;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Pos Pos
        {
            get
            {
                
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointProperty PointProperty
        {
            get
            {
                
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            PosList.MakeSchemaCompliant();
            Pos.MakeSchemaCompliant();
            PointProperty.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodesicType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodesicType : GeodesicStringType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SurfaceType : AbstractSurfaceType
    {
        [XmlIgnore] private Patches _patches;

        [XmlElement(Type = typeof (Patches), ElementName = "patches", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public Patches Patches
        {
            get
            {
                
                return _patches;
            }
            set { _patches = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Patches.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OrientableSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OrientableSurfaceType : AbstractSurfaceType
    {
        [XmlIgnore] private BaseSurface _baseSurface;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool OrientationSpecified;

        public OrientableSurfaceType()
        {
            Orientation = SignType.Positive;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType Orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                OrientationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (BaseSurface), ElementName = "baseSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public BaseSurface BaseSurface
        {
            get
            {
                
                return _baseSurface;
            }
            set { _baseSurface = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            BaseSurface.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractSurfacePatchType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractSurfacePatchType
    {
        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "SurfacePatchArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (TriangleType))]
    [XmlInclude(typeof (RectangleType))]
    [XmlInclude(typeof (AbstractParametricCurveSurfaceType))]
    [XmlInclude(typeof (PolygonPatchType))]
    public class SurfacePatchArrayPropertyType
    {
        [XmlIgnore] private List<AbstractSurfacePatch> _abstractSurfacePatch;

        [XmlIgnore]
        public AbstractSurfacePatch this[int index]
        {
            get { return AbstractSurfacePatch[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractSurfacePatch.Count; }
        }

        [XmlElement(Type = typeof (AbstractSurfacePatch), ElementName = "AbstractSurfacePatch", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractSurfacePatch> AbstractSurfacePatch
        {
            get
            {
                if (_abstractSurfacePatch == null) _abstractSurfacePatch = new List<AbstractSurfacePatch>();
                return _abstractSurfacePatch;
            }
            set { _abstractSurfacePatch = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractSurfacePatch.GetEnumerator();
        }

        public void Add(AbstractSurfacePatch obj)
        {
            AbstractSurfacePatch.Add(obj);
        }

        public void Clear()
        {
            AbstractSurfacePatch.Clear();
        }

        public AbstractSurfacePatch Remove(Int32 index)
        {
            AbstractSurfacePatch obj = AbstractSurfacePatch[index];
            AbstractSurfacePatch.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractSurfacePatch obj)
        {
            return AbstractSurfacePatch.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractSurfacePatch _c in AbstractSurfacePatch) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PolygonPatchType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PolygonPatchType : AbstractSurfacePatchType
    {
        [XmlIgnore] private Exterior _exterior;
        [XmlIgnore] private List<Interior> _interior;
        [XmlIgnore] private SurfaceInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;

        public PolygonPatchType()
        {
            Interpolation = SurfaceInterpolationType.planar;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public SurfaceInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Exterior Exterior
        {
            get
            {
                
                return _exterior;
            }
            set { _exterior = value; }
        }

        [XmlElement(Type = typeof (Interior), ElementName = "interior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<Interior> Interior
        {
            get
            {
                if (_interior == null) _interior = new List<Interior>();
                return _interior;
            }
            set { _interior = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }

    public enum SurfaceInterpolationType
    {
        [XmlEnum("planar")] planar
    }


    [XmlType(TypeName = "TriangleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TriangleType : AbstractSurfacePatchType
    {
        [XmlIgnore] private Exterior _exterior;
        [XmlIgnore] private SurfaceInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;

        public TriangleType()
        {
            Interpolation = SurfaceInterpolationType.planar;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public SurfaceInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Exterior Exterior
        {
            get
            {
                
                return _exterior;
            }
            set { _exterior = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Exterior.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RectangleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RectangleType : AbstractSurfacePatchType
    {
        [XmlIgnore] private Exterior _exterior;
        [XmlIgnore] private SurfaceInterpolationType _interpolation;

        [XmlIgnore] public bool InterpolationSpecified;

        public RectangleType()
        {
            Interpolation = SurfaceInterpolationType.planar;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public SurfaceInterpolationType Interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                InterpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Exterior Exterior
        {
            get
            {
                
                return _exterior;
            }
            set { _exterior = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Exterior.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RingType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RingType : AbstractRingType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<CurveMember> _curveMember;

        [XmlIgnore]
        public CurveMember this[int index]
        {
            get { return CurveMember[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return CurveMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (CurveMember), ElementName = "curveMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<CurveMember> CurveMember
        {
            get
            {
                if (_curveMember == null) _curveMember = new List<CurveMember>();
                return _curveMember;
            }
            set { _curveMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return CurveMember.GetEnumerator();
        }

        public void Add(CurveMember obj)
        {
            CurveMember.Add(obj);
        }

        public void Clear()
        {
            CurveMember.Clear();
        }

        public CurveMember Remove(Int32 index)
        {
            CurveMember obj = CurveMember[index];
            CurveMember.Remove(obj);
            return obj;
        }

        public bool Remove(CurveMember obj)
        {
            return CurveMember.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CurveMember _c in CurveMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RingPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RingPropertyType
    {
        [XmlIgnore] private Ring _ring;

        [XmlElement(Type = typeof (Ring), ElementName = "Ring", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Ring Ring
        {
            get
            {
                
                return _ring;
            }
            set { _ring = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Ring.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractParametricCurveSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractParametricCurveSurfaceType : AbstractSurfacePatchType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGriddedSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGriddedSurfaceType : AbstractParametricCurveSurfaceType
    {
        [XmlIgnore] private String _columns;
        [XmlIgnore] private String _rows;
        [XmlIgnore] private RowsCollection _rowsCollection;

        [XmlAttribute(AttributeName = "rows", DataType = "integer")]
        public String Rows
        {
            get { return _rows; }
            set { _rows = value; }
        }

        [XmlAttribute(AttributeName = "columns", DataType = "integer")]
        public String Columns
        {
            get { return _columns; }
            set { _columns = value; }
        }

        [XmlElement(Type = typeof (RowsCollection), ElementName = "rows", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public RowsCollection RowsCollection
        {
            get { return _rowsCollection; }
            set { _rowsCollection = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            _rowsCollection.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "rows", Namespace = Declarations.SchemaVersion), Serializable]
    public class RowsCollection
    {
        [XmlIgnore] private List<Row> _row;

        [XmlIgnore]
        public Row this[int index]
        {
            get { return Row[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return Row.Count; }
        }

        [XmlElement(Type = typeof (Row), ElementName = "Row", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Row> Row
        {
            get
            {
                if (_row == null) _row = new List<Row>();
                return _row;
            }
            set { _row = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Row.GetEnumerator();
        }

        public void Add(Row obj)
        {
            Row.Add(obj);
        }

        public void Clear()
        {
            Row.Clear();
        }

        public Row Remove(Int32 index)
        {
            Row obj = Row[index];
            Row.Remove(obj);
            return obj;
        }

        public bool Remove(Row obj)
        {
            return Row.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (Row _c in Row) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Row", Namespace = Declarations.SchemaVersion), Serializable]
    public class Row
    {
        [XmlIgnore] private PointProperty _pointProperty;
        [XmlIgnore] private Pos _pos;
        [XmlIgnore] private PosList _posList;

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Pos Pos
        {
            get
            {
                
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointProperty PointProperty
        {
            get
            {
                
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            PosList.MakeSchemaCompliant();
            Pos.MakeSchemaCompliant();
            PointProperty.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConeType : AbstractGriddedSurfaceType
    {
        [XmlIgnore] private CurveInterpolationType _horizontalCurveType;

        [XmlIgnore] public bool HorizontalCurveTypeSpecified;

        [XmlIgnore] private CurveInterpolationType _verticalCurveType;

        [XmlIgnore] public bool VerticalCurveTypeSpecified;

        public ConeType()
        {
            HorizontalCurveType = CurveInterpolationType.CircularArc3Points;
            VerticalCurveType = CurveInterpolationType.Linear;
        }

        [XmlAttribute(AttributeName = "horizontalCurveType")]
        public CurveInterpolationType HorizontalCurveType
        {
            get { return _horizontalCurveType; }
            set
            {
                _horizontalCurveType = value;
                HorizontalCurveTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "verticalCurveType")]
        public CurveInterpolationType VerticalCurveType
        {
            get { return _verticalCurveType; }
            set
            {
                _verticalCurveType = value;
                VerticalCurveTypeSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CylinderType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CylinderType : AbstractGriddedSurfaceType
    {
        [XmlIgnore] private CurveInterpolationType _horizontalCurveType;

        [XmlIgnore] public bool HorizontalCurveTypeSpecified;

        [XmlIgnore] private CurveInterpolationType _verticalCurveType;

        [XmlIgnore] public bool VerticalCurveTypeSpecified;

        public CylinderType()
        {
            HorizontalCurveType = CurveInterpolationType.CircularArc3Points;
            VerticalCurveType = CurveInterpolationType.Linear;
        }

        [XmlAttribute(AttributeName = "horizontalCurveType")]
        public CurveInterpolationType HorizontalCurveType
        {
            get { return _horizontalCurveType; }
            set
            {
                _horizontalCurveType = value;
                HorizontalCurveTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "verticalCurveType")]
        public CurveInterpolationType VerticalCurveType
        {
            get { return _verticalCurveType; }
            set
            {
                _verticalCurveType = value;
                VerticalCurveTypeSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SphereType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SphereType : AbstractGriddedSurfaceType
    {
        [XmlIgnore] private CurveInterpolationType _horizontalCurveType;

        [XmlIgnore] public bool HorizontalCurveTypeSpecified;

        [XmlIgnore] private CurveInterpolationType _verticalCurveType;

        [XmlIgnore] public bool VerticalCurveTypeSpecified;

        public SphereType()
        {
            HorizontalCurveType = CurveInterpolationType.CircularArc3Points;
            VerticalCurveType = CurveInterpolationType.CircularArc3Points;
        }

        [XmlAttribute(AttributeName = "horizontalCurveType")]
        public CurveInterpolationType HorizontalCurveType
        {
            get { return _horizontalCurveType; }
            set
            {
                _horizontalCurveType = value;
                HorizontalCurveTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "verticalCurveType")]
        public CurveInterpolationType VerticalCurveType
        {
            get { return _verticalCurveType; }
            set
            {
                _verticalCurveType = value;
                VerticalCurveTypeSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TinType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TinType : SurfaceType
    {
        [XmlIgnore] private List<LineStringSegmentArrayPropertyType> _breakLines;
        [XmlIgnore] private ControlPoint _controlPoint;
        [XmlIgnore] private LengthType _maxLength;
        [XmlIgnore] private List<LineStringSegmentArrayPropertyType> _stopLines;

        [XmlElement(Type = typeof (LineStringSegmentArrayPropertyType), ElementName = "stopLines", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<LineStringSegmentArrayPropertyType> StopLines
        {
            get
            {
                if (_stopLines == null) _stopLines = new List<LineStringSegmentArrayPropertyType>();
                return _stopLines;
            }
            set { _stopLines = value; }
        }

        [XmlElement(Type = typeof (LineStringSegmentArrayPropertyType), ElementName = "breakLines", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<LineStringSegmentArrayPropertyType> BreakLines
        {
            get
            {
                if (_breakLines == null) _breakLines = new List<LineStringSegmentArrayPropertyType>();
                return _breakLines;
            }
            set { _breakLines = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "maxLength", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType MaxLength
        {
            get
            {
                
                return _maxLength;
            }
            set { _maxLength = value; }
        }

        [XmlElement(Type = typeof (ControlPoint), ElementName = "controlPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ControlPoint ControlPoint
        {
            get { return _controlPoint; }
            set { _controlPoint = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            MaxLength.MakeSchemaCompliant();
            ControlPoint.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "controlPoint", Namespace = Declarations.SchemaVersion), Serializable]
    public class  ControlPoint
    {
        [XmlIgnore] private PointProperty _pointProperty;
        [XmlIgnore] private Pos _pos;
        [XmlIgnore] private PosList _posList;

        [XmlElement(Type = typeof (PosList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PosList PosList
        {
            get
            {
                
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Pos Pos
        {
            get
            {
                
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointProperty PointProperty
        {
            get
            {
                
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            PosList.MakeSchemaCompliant();
            Pos.MakeSchemaCompliant();
            PointProperty.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LineStringSegmentArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LineStringSegmentArrayPropertyType
    {
        [XmlIgnore] private List<LineStringSegment> _lineStringSegment;

        [XmlIgnore]
        public LineStringSegment this[int index]
        {
            get { return LineStringSegment[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return LineStringSegment.Count; }
        }

        [XmlElement(Type = typeof (LineStringSegment), ElementName = "LineStringSegment", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<LineStringSegment> LineStringSegment
        {
            get
            {
                if (_lineStringSegment == null) _lineStringSegment = new List<LineStringSegment>();
                return _lineStringSegment;
            }
            set { _lineStringSegment = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return LineStringSegment.GetEnumerator();
        }

        public void Add(LineStringSegment obj)
        {
            LineStringSegment.Add(obj);
        }

        public void Clear()
        {
            LineStringSegment.Clear();
        }

        public LineStringSegment Remove(Int32 index)
        {
            LineStringSegment obj = LineStringSegment[index];
            LineStringSegment.Remove(obj);
            return obj;
        }

        public bool Remove(LineStringSegment obj)
        {
            return LineStringSegment.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (LineStringSegment _c in LineStringSegment) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractSolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AbstractSolidType : AbstractGeometricPrimitiveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SolidPropertyType
    {
        [XmlIgnore] private AbstractSolid _abstractSolid;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public SolidPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractSolid), ElementName = "AbstractSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractSolid AbstractSolid
        {
            get
            {
                
                return _abstractSolid;
            }
            set { _abstractSolid = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SolidArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SolidArrayPropertyType
    {
        [XmlIgnore] private List<AbstractSolid> _abstractSolid;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public SolidArrayPropertyType()
        {
            Owns = false;
        }

        [XmlIgnore]
        public AbstractSolid this[int index]
        {
            get { return AbstractSolid[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractSolid.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractSolid), ElementName = "AbstractSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractSolid> AbstractSolid
        {
            get
            {
                if (_abstractSolid == null) _abstractSolid = new List<AbstractSolid>();
                return _abstractSolid;
            }
            set { _abstractSolid = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractSolid.GetEnumerator();
        }

        public void Add(AbstractSolid obj)
        {
            AbstractSolid.Add(obj);
        }

        public void Clear()
        {
            AbstractSolid.Clear();
        }

        public AbstractSolid Remove(Int32 index)
        {
            AbstractSolid obj = AbstractSolid[index];
            AbstractSolid.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractSolid obj)
        {
            return AbstractSolid.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractSolid _c in AbstractSolid) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SolidType : AbstractSolidType
    {
        [XmlIgnore] private Exterior _exterior;

        [XmlIgnore] private List<Interior> _interior;

        [XmlElement(Type = typeof (Exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Exterior Exterior
        {
            get
            {
                
                return _exterior;
            }
            set { _exterior = value; }
        }

        [XmlElement(Type = typeof (Interior), ElementName = "interior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<Interior> Interior
        {
            get
            {
                if (_interior == null) _interior = new List<Interior>();
                return _interior;
            }
            set { _interior = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ShellType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ShellType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<SurfaceMember> _surfaceMember;

        [XmlIgnore]
        public SurfaceMember this[int index]
        {
            get { return SurfaceMember[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return SurfaceMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (SurfaceMember), ElementName = "surfaceMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<SurfaceMember> SurfaceMember
        {
            get
            {
                if (_surfaceMember == null) _surfaceMember = new List<SurfaceMember>();
                return _surfaceMember;
            }
            set { _surfaceMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return SurfaceMember.GetEnumerator();
        }

        public void Add(SurfaceMember obj)
        {
            SurfaceMember.Add(obj);
        }

        public void Clear()
        {
            SurfaceMember.Clear();
        }

        public SurfaceMember Remove(Int32 index)
        {
            SurfaceMember obj = SurfaceMember[index];
            SurfaceMember.Remove(obj);
            return obj;
        }

        public bool Remove(SurfaceMember obj)
        {
            return SurfaceMember.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (SurfaceMember _c in SurfaceMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ShellPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ShellPropertyType
    {
        [XmlIgnore] private Shell _shell;

        [XmlElement(Type = typeof (Shell), ElementName = "Shell", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Shell Shell
        {
            get
            {
                
                return _shell;
            }
            set { _shell = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Shell.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeometricAggregateType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeometricAggregateType : AbstractGeometryType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiGeometryType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiGeometryType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<GeometryMember> _geometryMember;

        [XmlIgnore] private GeometryMembers _geometryMembers;

        [XmlElement(Type = typeof (GeometryMember), ElementName = "geometryMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<GeometryMember> GeometryMember
        {
            get
            {
                if (_geometryMember == null) _geometryMember = new List<GeometryMember>();
                return _geometryMember;
            }
            set { _geometryMember = value; }
        }

        [XmlElement(Type = typeof (GeometryMembers), ElementName = "geometryMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeometryMembers GeometryMembers
        {
            get
            {
                
                return _geometryMembers;
            }
            set { _geometryMembers = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiGeometryPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (MultiGeometryType))]
    [XmlInclude(typeof (MultiSurfaceType))]
    [XmlInclude(typeof (MultiSolidType))]
    [XmlInclude(typeof (MultiPointType))]
    [XmlInclude(typeof (MultiCurveType))]
    public class MultiGeometryPropertyType
    {
        [XmlIgnore] private AbstractGeometricAggregate _abstractGeometricAggregate;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public MultiGeometryPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractGeometricAggregate), ElementName = "AbstractGeometricAggregate",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometricAggregate AbstractGeometricAggregate
        {
            get { return _abstractGeometricAggregate; }
            set { _abstractGeometricAggregate = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeometricAggregate.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiPointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiPointType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<PointMember> _pointMember;

        [XmlIgnore] private PointMembers _pointMembers;

        [XmlElement(Type = typeof (PointMember), ElementName = "pointMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<PointMember> PointMember
        {
            get
            {
                if (_pointMember == null) _pointMember = new List<PointMember>();
                return _pointMember;
            }
            set { _pointMember = value; }
        }

        [XmlElement(Type = typeof (PointMembers), ElementName = "pointMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointMembers PointMembers
        {
            get
            {
                
                return _pointMembers;
            }
            set { _pointMembers = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiPointPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiPointPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MultiPoint _multiPoint;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public MultiPointPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MultiPoint), ElementName = "MultiPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MultiPoint MultiPoint
        {
            get
            {
                
                return _multiPoint;
            }
            set { _multiPoint = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MultiPoint.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiCurveType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<CurveMember> _curveMember;

        [XmlIgnore] private CurveMembers _curveMembers;

        [XmlElement(Type = typeof (CurveMember), ElementName = "curveMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<CurveMember> CurveMember
        {
            get
            {
                if (_curveMember == null) _curveMember = new List<CurveMember>();
                return _curveMember;
            }
            set { _curveMember = value; }
        }

        [XmlElement(Type = typeof (CurveMembers), ElementName = "curveMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CurveMembers CurveMembers
        {
            get
            {
                
                return _curveMembers;
            }
            set { _curveMembers = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiCurvePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiCurvePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MultiCurve _multiCurve;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public MultiCurvePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MultiCurve), ElementName = "MultiCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MultiCurve MultiCurve
        {
            get
            {
                
                return _multiCurve;
            }
            set { _multiCurve = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MultiCurve.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiSurfaceType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<SurfaceMember> _surfaceMember;

        [XmlIgnore] private SurfaceMembers _surfaceMembers;

        [XmlElement(Type = typeof (SurfaceMember), ElementName = "surfaceMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<SurfaceMember> SurfaceMember
        {
            get
            {
                if (_surfaceMember == null) _surfaceMember = new List<SurfaceMember>();
                return _surfaceMember;
            }
            set { _surfaceMember = value; }
        }

        [XmlElement(Type = typeof (SurfaceMembers), ElementName = "surfaceMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SurfaceMembers SurfaceMembers
        {
            get
            {
                
                return _surfaceMembers;
            }
            set { _surfaceMembers = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiSurfacePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiSurfacePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MultiSurface _multiSurface;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public MultiSurfacePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MultiSurface), ElementName = "MultiSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MultiSurface MultiSurface
        {
            get
            {
                
                return _multiSurface;
            }
            set { _multiSurface = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MultiSurface.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiSolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiSolidType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<SolidMember> _solidMember;

        [XmlIgnore] private SolidMembers _solidMembers;

        [XmlElement(Type = typeof (SolidMember), ElementName = "solidMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<SolidMember> SolidMember
        {
            get
            {
                if (_solidMember == null) _solidMember = new List<SolidMember>();
                return _solidMember;
            }
            set { _solidMember = value; }
        }

        [XmlElement(Type = typeof (SolidMembers), ElementName = "solidMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SolidMembers SolidMembers
        {
            get
            {
                
                return _solidMembers;
            }
            set { _solidMembers = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiSolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiSolidPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MultiSolid _multiSolid;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public MultiSolidPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MultiSolid), ElementName = "MultiSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MultiSolid MultiSolid
        {
            get
            {
                
                return _multiSolid;
            }
            set { _multiSolid = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MultiSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeObjectType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeObjectType : AbstractGMLType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimePrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimePrimitiveType : AbstractTimeObjectType
    {
        [XmlIgnore] private List<RelatedTimeType> _relatedTime;

        [XmlIgnore]
        public RelatedTimeType this[int index]
        {
            get { return RelatedTime[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return RelatedTime.Count; }
        }

        [XmlElement(Type = typeof (RelatedTimeType), ElementName = "relatedTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<RelatedTimeType> RelatedTime
        {
            get
            {
                if (_relatedTime == null) _relatedTime = new List<RelatedTimeType>();
                return _relatedTime;
            }
            set { _relatedTime = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return RelatedTime.GetEnumerator();
        }

        public void Add(RelatedTimeType obj)
        {
            RelatedTime.Add(obj);
        }

        public void Clear()
        {
            RelatedTime.Clear();
        }

        public RelatedTimeType Remove(Int32 index)
        {
            RelatedTimeType obj = RelatedTime[index];
            RelatedTime.Remove(obj);
            return obj;
        }

        public bool Remove(RelatedTimeType obj)
        {
            return RelatedTime.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimePrimitivePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractTimeTopologyPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeGeometricPrimitiveType))]
    public class TimePrimitivePropertyType
    {
        [XmlIgnore] private AbstractTimePrimitive _abstractTimePrimitive;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TimePrimitivePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTimePrimitive), ElementName = "AbstractTimePrimitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimePrimitive AbstractTimePrimitive
        {
            get { return _abstractTimePrimitive; }
            set { _abstractTimePrimitive = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractTimePrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RelatedTimeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RelatedTimeType : TimePrimitivePropertyType
    {
        [XmlIgnore] private RelativePosition _relativePosition;

        [XmlIgnore] public bool RelativePositionSpecified;

        [XmlAttribute(AttributeName = "relativePosition")]
        public RelativePosition RelativePosition
        {
            get { return _relativePosition; }
            set
            {
                _relativePosition = value;
                RelativePositionSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeComplexType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeComplexType : AbstractTimeObjectType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeGeometricPrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeGeometricPrimitiveType : AbstractTimePrimitiveType
    {
        [XmlIgnore] private String _frame;

        public AbstractTimeGeometricPrimitiveType()
        {
            Frame = "#ISO-8601";
        }

        [XmlAttribute(AttributeName = "frame", DataType = "anyURI")]
        public String Frame
        {
            get { return _frame; }
            set { _frame = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeInstantType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeInstantType : AbstractTimeGeometricPrimitiveType
    {
        [XmlIgnore] private TimePosition _timePosition;

        [XmlElement(Type = typeof (TimePosition), ElementName = "timePosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePosition TimePosition
        {
            get
            {
                
                return _timePosition;
            }
            set { _timePosition = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            TimePosition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeInstantPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeInstantPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeInstant _timeInstant;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TimeInstantPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeInstant), ElementName = "TimeInstant", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeInstant TimeInstant
        {
            get
            {
                
                return _timeInstant;
            }
            set { _timeInstant = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeInstant.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimePeriodType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimePeriodType : AbstractTimeGeometricPrimitiveType
    {
        [XmlIgnore] private TimeInstantPropertyType _begin;
        [XmlIgnore] private TimePositionType _beginPosition;
        [XmlIgnore] private String _duration;
        [XmlIgnore] private TimeInstantPropertyType _end;
        [XmlIgnore] private TimePositionType _endPosition;
        [XmlIgnore] private TimeInterval _timeInterval;

        public TimePeriodType()
        {
            Duration = string.Empty;
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "beginPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType BeginPosition
        {
            get
            {
                
                return _beginPosition;
            }
            set { _beginPosition = value; }
        }

        [XmlElement(Type = typeof (TimeInstantPropertyType), ElementName = "begin", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeInstantPropertyType Begin
        {
            get
            {
                
                return _begin;
            }
            set { _begin = value; }
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "endPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType EndPosition
        {
            get
            {
                
                return _endPosition;
            }
            set { _endPosition = value; }
        }

        [XmlElement(Type = typeof (TimeInstantPropertyType), ElementName = "end", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeInstantPropertyType End
        {
            get
            {
                
                return _end;
            }
            set { _end = value; }
        }

        [XmlElement(ElementName = "duration", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "duration",
            Namespace = Declarations.SchemaVersion)]
        public String Duration
        {
            get { return _duration; }
            set { _duration = value; }
        }

        [XmlElement(Type = typeof (TimeInterval), ElementName = "timeInterval", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeInterval TimeInterval
        {
            get
            {
                
                return _timeInterval;
            }
            set { _timeInterval = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            BeginPosition.MakeSchemaCompliant();
            Begin.MakeSchemaCompliant();
            EndPosition.MakeSchemaCompliant();
            End.MakeSchemaCompliant();
            TimeInterval.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimePeriodPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimePeriodPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimePeriod _timePeriod;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TimePeriodPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimePeriod), ElementName = "TimePeriod", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePeriod TimePeriod
        {
            get
            {
                
                return _timePeriod;
            }
            set { _timePeriod = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimePeriod.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimePositionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimePositionType
    {
        [XmlIgnore] private String _calendarEraName;
        [XmlIgnore] private String _frame;

        [XmlIgnore] private TimeIndeterminateValueType _indeterminatePosition;

        [XmlIgnore] public bool IndeterminatePositionSpecified;

        [XmlIgnore] private DateTime _value;

        [XmlIgnore] public bool ValueSpecified;

        public TimePositionType()
        {
            Frame = "#ISO-8601";
        }

        [XmlAttribute(AttributeName = "frame", DataType = "anyURI")]
        public String Frame
        {
            get { return _frame; }
            set { _frame = value; }
        }

        [XmlAttribute(AttributeName = "calendarEraName", DataType = "string")]
        public String CalendarEraName
        {
            get { return _calendarEraName; }
            set { _calendarEraName = value; }
        }

        [XmlAttribute(AttributeName = "indeterminatePosition")]
        public TimeIndeterminateValueType IndeterminatePosition
        {
            get { return _indeterminatePosition; }
            set
            {
                _indeterminatePosition = value;
                IndeterminatePositionSpecified = true;
            }
        }

        [XmlText(DataType = "dateTime")]
        public DateTime Value
        {
            get { return _value; }
            set
            {
                _value = value;
                ValueSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime ValueUtc
        {
            get { return _value.ToUniversalTime(); }
            set
            {
                _value = value.ToLocalTime();
                ValueSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "TimeIntervalLengthType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeIntervalLengthType
    {
        [XmlIgnore] private String _factor;
        [XmlIgnore] private String _radix;
        [XmlIgnore] private TimeUnitType _unit;

        [XmlIgnore] public bool UnitSpecified;
        [XmlIgnore] private Decimal _value;

        [XmlIgnore] public bool ValueSpecified;

        public TimeIntervalLengthType()
        {
            UnitSpecified = true;
        }

        [XmlAttribute(AttributeName = "unit")]
        public TimeUnitType Unit
        {
            get { return _unit; }
            set
            {
                _unit = value;
                UnitSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "radix", DataType = "positiveInteger")]
        public String Radix
        {
            get { return _radix; }
            set { _radix = value; }
        }

        [XmlAttribute(AttributeName = "factor", DataType = "integer")]
        public String Factor
        {
            get { return _factor; }
            set { _factor = value; }
        }

        [XmlText(typeof (Decimal))]
        public Decimal Value
        {
            get { return _value; }
            set
            {
                _value = value;
                ValueSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractFeatureType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractFeatureType : AbstractGMLType
    {
        [XmlIgnore] private BoundedBy _boundedBy;

        [XmlIgnore] private Location _location;

        [XmlElement(Type = typeof (BoundedBy), ElementName = "boundedBy", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public BoundedBy BoundedBy
        {
            get
            {
                
                return _boundedBy;
            }
            set { _boundedBy = value; }
        }

        [XmlElement(Type = typeof (Location), ElementName = "location", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Location Location
        {
            get
            {
                
                return _location;
            }
            set { _location = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FeaturePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (DynamicFeatureType))]
    [XmlInclude(typeof (ObservationType))]
    [XmlInclude(typeof (AbstractCoverageType))]
    [XmlInclude(typeof (AbstractFeatureCollectionType))]
    [XmlInclude(typeof (BoundedFeatureType))]
    public class FeaturePropertyType
    {
        [XmlIgnore] private AbstractFeature _abstractFeature;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public FeaturePropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractFeature), ElementName = "AbstractFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractFeature AbstractFeature
        {
            get { return _abstractFeature; }
            set { _abstractFeature = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractFeature.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BoundingShapeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BoundingShapeType
    {
        [XmlIgnore] private Envelope _envelope;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _null;

        public BoundingShapeType()
        {
            Null = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Envelope), ElementName = "Envelope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Envelope Envelope
        {
            get
            {
                
                return _envelope;
            }
            set { _envelope = value; }
        }

        [XmlElement(ElementName = "Null", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public String Null
        {
            get { return _null; }
            set { _null = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Envelope.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EnvelopeWithTimePeriodType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EnvelopeWithTimePeriodType : EnvelopeType
    {
        [XmlIgnore] private TimePositionType _beginPosition;
        [XmlIgnore] private TimePositionType _endPosition;
        [XmlIgnore] private String _frame;

        public EnvelopeWithTimePeriodType()
        {
            Frame = "#ISO-8601";
        }

        [XmlAttribute(AttributeName = "frame", DataType = "anyURI")]
        public String Frame
        {
            get { return _frame; }
            set { _frame = value; }
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "beginPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType BeginPosition
        {
            get
            {
                
                return _beginPosition;
            }
            set { _beginPosition = value; }
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "endPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType EndPosition
        {
            get
            {
                
                return _endPosition;
            }
            set { _endPosition = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            BeginPosition.MakeSchemaCompliant();
            EndPosition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractFeatureMemberType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractFeatureMemberType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public AbstractFeatureMemberType()
        {
            Owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "DirectionPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectionPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CompassPointEnumeration _compassPoint;

        [XmlIgnore] public bool CompassPointSpecified;
        [XmlIgnore] private DirectionDescriptionType _directionDescription;
        [XmlIgnore] private CodeType _directionKeyword;
        [XmlIgnore] private StringOrRefType _directionString;
        [XmlIgnore] private DirectionVectorType _directionVector;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public DirectionPropertyType()
        {
            Owns = false;
            Type = "simple";
            CompassPointSpecified = true;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (DirectionVectorType), ElementName = "DirectionVector", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectionVectorType DirectionVector
        {
            get
            {
                
                return _directionVector;
            }
            set { _directionVector = value; }
        }

        [XmlElement(Type = typeof (DirectionDescriptionType), ElementName = "DirectionDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectionDescriptionType DirectionDescription
        {
            get
            {
                
                return _directionDescription;
            }
            set { _directionDescription = value; }
        }


        [XmlElement(ElementName = "CompassPoint", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public CompassPointEnumeration CompassPoint
        {
            get { return _compassPoint; }
            set
            {
                _compassPoint = value;
                CompassPointSpecified = true;
            }
        }

        [XmlElement(Type = typeof (CodeType), ElementName = "DirectionKeyword", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CodeType DirectionKeyword
        {
            get
            {
                
                return _directionKeyword;
            }
            set { _directionKeyword = value; }
        }

        [XmlElement(Type = typeof (StringOrRefType), ElementName = "DirectionString", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public StringOrRefType DirectionString
        {
            get
            {
                
                return _directionString;
            }
            set { _directionString = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DirectionVector.MakeSchemaCompliant();
            DirectionDescription.MakeSchemaCompliant();
            DirectionKeyword.MakeSchemaCompliant();
            DirectionString.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectionVectorType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectionVectorType
    {
        [XmlIgnore] private AngleType _horizontalAngle;
        [XmlIgnore] private Vector _vector;
        [XmlIgnore] private AngleType _verticalAngle;

        [XmlElement(Type = typeof (Vector), ElementName = "vector", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Vector Vector
        {
            get
            {
                
                return _vector;
            }
            set { _vector = value; }
        }

        [XmlElement(Type = typeof (AngleType), ElementName = "horizontalAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AngleType HorizontalAngle
        {
            get
            {
                
                return _horizontalAngle;
            }
            set { _horizontalAngle = value; }
        }

        [XmlElement(Type = typeof (AngleType), ElementName = "verticalAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AngleType VerticalAngle
        {
            get
            {
                
                return _verticalAngle;
            }
            set { _verticalAngle = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Vector.MakeSchemaCompliant();
            HorizontalAngle.MakeSchemaCompliant();
            VerticalAngle.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectionDescriptionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectionDescriptionType
    {
        [XmlIgnore] private CompassPointEnumeration _compassPoint;

        [XmlIgnore] public bool CompassPointSpecified;
        [XmlIgnore] private Description _description;


        [XmlIgnore] private CodeType _keyword;
        [XmlIgnore] private ReferenceType _reference;

        public DirectionDescriptionType()
        {
            CompassPointSpecified = true;
        }

        [XmlElement(ElementName = "compassPoint", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public CompassPointEnumeration CompassPoint
        {
            get { return _compassPoint; }
            set
            {
                _compassPoint = value;
                CompassPointSpecified = true;
            }
        }

        [XmlElement(Type = typeof (CodeType), ElementName = "keyword", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CodeType Keyword
        {
            get
            {
                
                return _keyword;
            }
            set { _keyword = value; }
        }

        [XmlElement(Type = typeof (Description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Description Description
        {
            get
            {
                
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (ReferenceType), ElementName = "reference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ReferenceType Reference
        {
            get
            {
                
                return _reference;
            }
            set { _reference = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Keyword.MakeSchemaCompliant();
            Description.MakeSchemaCompliant();
            Reference.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DynamicFeatureType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DynamicFeatureType : AbstractFeatureType
    {
        [XmlIgnore] private DataSource _dataSource;
        [XmlIgnore] private DataSourceReference _dataSourceReference;
        [XmlIgnore] private History _history;
        [XmlIgnore] private ValidTime _validTime;

        [XmlElement(Type = typeof (ValidTime), ElementName = "validTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ValidTime ValidTime
        {
            get
            {
                
                return _validTime;
            }
            set { _validTime = value; }
        }

        [XmlElement(Type = typeof (History), ElementName = "history", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public History History
        {
            get
            {
                
                return _history;
            }
            set { _history = value; }
        }

        [XmlElement(Type = typeof (DataSource), ElementName = "dataSource", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DataSource DataSource
        {
            get
            {
                
                return _dataSource;
            }
            set { _dataSource = value; }
        }

        [XmlElement(Type = typeof (DataSourceReference), ElementName = "dataSourceReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DataSourceReference DataSourceReference
        {
            get
            {
                
                return _dataSourceReference;
            }
            set { _dataSourceReference = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DynamicFeatureCollectionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DynamicFeatureCollectionType : DynamicFeatureType
    {
        [XmlIgnore] private DynamicMembers _dynamicMembers;

        [XmlElement(Type = typeof (DynamicMembers), ElementName = "dynamicMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DynamicMembers DynamicMembers
        {
            get
            {
                
                return _dynamicMembers;
            }
            set { _dynamicMembers = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            DynamicMembers.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DynamicFeatureMemberType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DynamicFeatureMemberType : AbstractFeatureMemberType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private List<DynamicFeature> _dynamicFeature;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public DynamicFeatureMemberType()
        {
            Type = "simple";
        }

        [XmlIgnore]
        public DynamicFeature this[int index]
        {
            get { return DynamicFeature[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return DynamicFeature.Count; }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (DynamicFeature), ElementName = "DynamicFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DynamicFeature> DynamicFeature
        {
            get
            {
                if (_dynamicFeature == null) _dynamicFeature = new List<DynamicFeature>();
                return _dynamicFeature;
            }
            set { _dynamicFeature = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return DynamicFeature.GetEnumerator();
        }

        public void Add(DynamicFeature obj)
        {
            DynamicFeature.Add(obj);
        }

        public void Clear()
        {
            DynamicFeature.Clear();
        }

        public DynamicFeature Remove(Int32 index)
        {
            DynamicFeature obj = DynamicFeature[index];
            DynamicFeature.Remove(obj);
            return obj;
        }

        public bool Remove(DynamicFeature obj)
        {
            return DynamicFeature.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeSliceType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeSliceType : AbstractGMLType
    {
        [XmlIgnore] private DataSource _dataSource;
        [XmlIgnore] private ValidTime _validTime;

        [XmlElement(Type = typeof (ValidTime), ElementName = "validTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ValidTime ValidTime
        {
            get
            {
                
                return _validTime;
            }
            set { _validTime = value; }
        }

        [XmlElement(Type = typeof (DataSource), ElementName = "dataSource", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DataSource DataSource
        {
            get
            {
                
                return _dataSource;
            }
            set { _dataSource = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            ValidTime.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "HistoryPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (MovingObjectStatusType))]
    public class HistoryPropertyType
    {
        [XmlIgnore] private List<AbstractTimeSlice> _abstractTimeSlice;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public HistoryPropertyType()
        {
            Owns = false;
        }

        [XmlIgnore]
        public AbstractTimeSlice this[int index]
        {
            get { return AbstractTimeSlice[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractTimeSlice.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTimeSlice), ElementName = "AbstractTimeSlice", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractTimeSlice> AbstractTimeSlice
        {
            get
            {
                if (_abstractTimeSlice == null) _abstractTimeSlice = new List<AbstractTimeSlice>();
                return _abstractTimeSlice;
            }
            set { _abstractTimeSlice = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractTimeSlice.GetEnumerator();
        }

        public void Add(AbstractTimeSlice obj)
        {
            AbstractTimeSlice.Add(obj);
        }

        public void Clear()
        {
            AbstractTimeSlice.Clear();
        }

        public AbstractTimeSlice Remove(Int32 index)
        {
            AbstractTimeSlice obj = AbstractTimeSlice[index];
            AbstractTimeSlice.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractTimeSlice obj)
        {
            return AbstractTimeSlice.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractTimeSlice _c in AbstractTimeSlice) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometricComplexType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeometricComplexType : AbstractGeometryType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<GeometricPrimitivePropertyType> _element;

        [XmlIgnore]
        public GeometricPrimitivePropertyType this[int index]
        {
            get { return Element[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return Element.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (GeometricPrimitivePropertyType), ElementName = "element", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<GeometricPrimitivePropertyType> Element
        {
            get
            {
                if (_element == null) _element = new List<GeometricPrimitivePropertyType>();
                return _element;
            }
            set { _element = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Element.GetEnumerator();
        }

        public void Add(GeometricPrimitivePropertyType obj)
        {
            Element.Add(obj);
        }

        public void Clear()
        {
            Element.Clear();
        }

        public GeometricPrimitivePropertyType Remove(Int32 index)
        {
            GeometricPrimitivePropertyType obj = Element[index];
            Element.Remove(obj);
            return obj;
        }

        public bool Remove(GeometricPrimitivePropertyType obj)
        {
            return Element.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (GeometricPrimitivePropertyType _c in Element) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometricComplexPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeometricComplexPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CompositeCurve _compositeCurve;
        [XmlIgnore] private CompositeSolid _compositeSolid;
        [XmlIgnore] private CompositeSurface _compositeSurface;
        [XmlIgnore] private GeometricComplex _geometricComplex;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public GeometricComplexPropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeometricComplex), ElementName = "GeometricComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeometricComplex GeometricComplex
        {
            get
            {
                
                return _geometricComplex;
            }
            set { _geometricComplex = value; }
        }

        [XmlElement(Type = typeof (CompositeCurve), ElementName = "CompositeCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CompositeCurve CompositeCurve
        {
            get
            {
                
                return _compositeCurve;
            }
            set { _compositeCurve = value; }
        }

        [XmlElement(Type = typeof (CompositeSurface), ElementName = "CompositeSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CompositeSurface CompositeSurface
        {
            get
            {
                
                return _compositeSurface;
            }
            set { _compositeSurface = value; }
        }

        [XmlElement(Type = typeof (CompositeSolid), ElementName = "CompositeSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CompositeSolid CompositeSolid
        {
            get
            {
                
                return _compositeSolid;
            }
            set { _compositeSolid = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            GeometricComplex.MakeSchemaCompliant();
            CompositeCurve.MakeSchemaCompliant();
            CompositeSurface.MakeSchemaCompliant();
            CompositeSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompositeCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompositeCurveType : AbstractCurveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<CurveMember> _curveMember;

        [XmlIgnore]
        public CurveMember this[int index]
        {
            get { return CurveMember[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return CurveMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (CurveMember), ElementName = "curveMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<CurveMember> CurveMember
        {
            get
            {
                if (_curveMember == null) _curveMember = new List<CurveMember>();
                return _curveMember;
            }
            set { _curveMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return CurveMember.GetEnumerator();
        }

        public void Add(CurveMember obj)
        {
            CurveMember.Add(obj);
        }

        public void Clear()
        {
            CurveMember.Clear();
        }

        public CurveMember Remove(Int32 index)
        {
            CurveMember obj = CurveMember[index];
            CurveMember.Remove(obj);
            return obj;
        }

        public bool Remove(CurveMember obj)
        {
            return CurveMember.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CurveMember _c in CurveMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompositeSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompositeSurfaceType : AbstractSurfaceType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<SurfaceMember> _surfaceMember;

        [XmlIgnore]
        public SurfaceMember this[int index]
        {
            get { return SurfaceMember[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return SurfaceMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (SurfaceMember), ElementName = "surfaceMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<SurfaceMember> SurfaceMember
        {
            get
            {
                if (_surfaceMember == null) _surfaceMember = new List<SurfaceMember>();
                return _surfaceMember;
            }
            set { _surfaceMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return SurfaceMember.GetEnumerator();
        }

        public void Add(SurfaceMember obj)
        {
            SurfaceMember.Add(obj);
        }

        public void Clear()
        {
            SurfaceMember.Clear();
        }

        public SurfaceMember Remove(Int32 index)
        {
            SurfaceMember obj = SurfaceMember[index];
            SurfaceMember.Remove(obj);
            return obj;
        }

        public bool Remove(SurfaceMember obj)
        {
            return SurfaceMember.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (SurfaceMember _c in SurfaceMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompositeSolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompositeSolidType : AbstractSolidType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<SolidMember> _solidMember;

        [XmlIgnore]
        public SolidMember this[int index]
        {
            get { return SolidMember[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return SolidMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (SolidMember), ElementName = "solidMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<SolidMember> SolidMember
        {
            get
            {
                if (_solidMember == null) _solidMember = new List<SolidMember>();
                return _solidMember;
            }
            set { _solidMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return SolidMember.GetEnumerator();
        }

        public void Add(SolidMember obj)
        {
            SolidMember.Add(obj);
        }

        public void Clear()
        {
            SolidMember.Clear();
        }

        public SolidMember Remove(Int32 index)
        {
            SolidMember obj = SolidMember[index];
            SolidMember.Remove(obj);
            return obj;
        }

        public bool Remove(SolidMember obj)
        {
            return SolidMember.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (SolidMember _c in SolidMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTopologyType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTopologyType : AbstractGMLType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTopoPrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTopoPrimitiveType : AbstractTopologyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "NodeOrEdgePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class NodeOrEdgePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Edge _edge;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private Node _node;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public NodeOrEdgePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Node), ElementName = "Node", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Node Node
        {
            get
            {
                
                return _node;
            }
            set { _node = value; }
        }

        [XmlElement(Type = typeof (Edge), ElementName = "Edge", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Edge Edge
        {
            get
            {
                
                return _edge;
            }
            set { _edge = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Node.MakeSchemaCompliant();
            Edge.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "NodePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class NodePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private Node _node;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public NodePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Node), ElementName = "Node", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Node Node
        {
            get
            {
                
                return _node;
            }
            set { _node = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Node.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FaceOrTopoSolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FaceOrTopoSolidPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Face _face;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private TopoSolid _topoSolid;
        [XmlIgnore] private String _type;

        public FaceOrTopoSolidPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Face), ElementName = "Face", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Face Face
        {
            get
            {
                
                return _face;
            }
            set { _face = value; }
        }

        [XmlElement(Type = typeof (TopoSolid), ElementName = "TopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSolid TopoSolid
        {
            get
            {
                
                return _topoSolid;
            }
            set { _topoSolid = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Face.MakeSchemaCompliant();
            TopoSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoSolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoSolidPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private TopoSolid _topoSolid;
        [XmlIgnore] private String _type;

        public TopoSolidPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoSolid), ElementName = "TopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSolid TopoSolid
        {
            get
            {
                
                return _topoSolid;
            }
            set { _topoSolid = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TopoSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "NodeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class NodeType : AbstractTopoPrimitiveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;

        [XmlIgnore] private FaceOrTopoSolidPropertyType _container;

        [XmlIgnore] private List<DirectedEdge> _directedEdge;

        [XmlIgnore] private PointProperty _pointProperty;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (FaceOrTopoSolidPropertyType), ElementName = "container", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public FaceOrTopoSolidPropertyType Container
        {
            get
            {
                
                return _container;
            }
            set { _container = value; }
        }

        [XmlElement(Type = typeof (DirectedEdge), ElementName = "directedEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedEdge> DirectedEdge
        {
            get
            {
                if (_directedEdge == null) _directedEdge = new List<DirectedEdge>();
                return _directedEdge;
            }
            set { _directedEdge = value; }
        }

        [XmlElement(Type = typeof (PointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PointProperty PointProperty
        {
            get
            {
                
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedNodePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedNodePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private Node _node;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool OrientationSpecified;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public DirectedNodePropertyType()
        {
            Orientation = SignType.Positive;
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType Orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                OrientationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Node), ElementName = "Node", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Node Node
        {
            get
            {
                
                return _node;
            }
            set { _node = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Node.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EdgeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EdgeType : AbstractTopoPrimitiveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;

        [XmlIgnore] private TopoSolidPropertyType _container;
        [XmlIgnore] private CurveProperty _curveProperty;
        [XmlIgnore] private List<DirectedFace> _directedFace;

        [XmlIgnore] private List<DirectedNode> _directedNode;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoSolidPropertyType), ElementName = "container", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSolidPropertyType Container
        {
            get
            {
                
                return _container;
            }
            set { _container = value; }
        }

        [XmlElement(Type = typeof (DirectedNode), ElementName = "directedNode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedNode> DirectedNode
        {
            get
            {
                if (_directedNode == null) _directedNode = new List<DirectedNode>();
                return _directedNode;
            }
            set { _directedNode = value; }
        }

        [XmlElement(Type = typeof (DirectedFace), ElementName = "directedFace", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedFace> DirectedFace
        {
            get
            {
                if (_directedFace == null) _directedFace = new List<DirectedFace>();
                return _directedFace;
            }
            set { _directedFace = value; }
        }

        [XmlElement(Type = typeof (CurveProperty), ElementName = "curveProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CurveProperty CurveProperty
        {
            get
            {
                
                return _curveProperty;
            }
            set { _curveProperty = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DirectedNode _c in DirectedNode) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedEdgePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedEdgePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Edge _edge;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool OrientationSpecified;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public DirectedEdgePropertyType()
        {
            Orientation = SignType.Positive;
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType Orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                OrientationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Edge), ElementName = "Edge", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Edge Edge
        {
            get
            {
                
                return _edge;
            }
            set { _edge = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Edge.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FaceType : AbstractTopoPrimitiveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<DirectedEdge> _directedEdge;
        [XmlIgnore] private List<DirectedTopoSolid> _directedTopoSolid;
        [XmlIgnore] private List<NodePropertyType> _isolated;
        [XmlIgnore] private SurfaceProperty _surfaceProperty;

        [XmlIgnore] private bool _universal;

        [XmlIgnore] public bool UniversalSpecified;

        public FaceType()
        {
            Universal = false;
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "universal", DataType = "boolean")]
        public bool Universal
        {
            get { return _universal; }
            set
            {
                _universal = value;
                UniversalSpecified = true;
            }
        }

        [XmlElement(Type = typeof (NodePropertyType), ElementName = "isolated", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<NodePropertyType> Isolated
        {
            get
            {
                if (_isolated == null) _isolated = new List<NodePropertyType>();
                return _isolated;
            }
            set { _isolated = value; }
        }

        [XmlElement(Type = typeof (DirectedEdge), ElementName = "directedEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedEdge> DirectedEdge
        {
            get
            {
                if (_directedEdge == null) _directedEdge = new List<DirectedEdge>();
                return _directedEdge;
            }
            set { _directedEdge = value; }
        }

        [XmlElement(Type = typeof (DirectedTopoSolid), ElementName = "directedTopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedTopoSolid> DirectedTopoSolid
        {
            get
            {
                if (_directedTopoSolid == null) _directedTopoSolid = new List<DirectedTopoSolid>();
                return _directedTopoSolid;
            }
            set { _directedTopoSolid = value; }
        }

        [XmlElement(Type = typeof (SurfaceProperty), ElementName = "surfaceProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SurfaceProperty SurfaceProperty
        {
            get
            {
                
                return _surfaceProperty;
            }
            set { _surfaceProperty = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DirectedEdge _c in DirectedEdge) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedFacePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedFacePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Face _face;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool OrientationSpecified;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public DirectedFacePropertyType()
        {
            Orientation = SignType.Positive;
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType Orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                OrientationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Face), ElementName = "Face", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Face Face
        {
            get
            {
                
                return _face;
            }
            set { _face = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Face.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoSolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoSolidType : AbstractTopoPrimitiveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<DirectedFace> _directedFace;
        [XmlIgnore] private List<NodeOrEdgePropertyType> _isolated;
        [XmlIgnore] private SolidProperty _solidProperty;

        [XmlIgnore] private bool _universal;

        [XmlIgnore] public bool UniversalSpecified;

        public TopoSolidType()
        {
            Universal = false;
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "universal", DataType = "boolean")]
        public bool Universal
        {
            get { return _universal; }
            set
            {
                _universal = value;
                UniversalSpecified = true;
            }
        }

        [XmlElement(Type = typeof (NodeOrEdgePropertyType), ElementName = "isolated", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<NodeOrEdgePropertyType> Isolated
        {
            get
            {
                if (_isolated == null) _isolated = new List<NodeOrEdgePropertyType>();
                return _isolated;
            }
            set { _isolated = value; }
        }

        [XmlElement(Type = typeof (DirectedFace), ElementName = "directedFace", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedFace> DirectedFace
        {
            get
            {
                if (_directedFace == null) _directedFace = new List<DirectedFace>();
                return _directedFace;
            }
            set { _directedFace = value; }
        }

        [XmlElement(Type = typeof (SolidProperty), ElementName = "solidProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SolidProperty SolidProperty
        {
            get
            {
                
                return _solidProperty;
            }
            set { _solidProperty = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DirectedFace _c in DirectedFace) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedTopoSolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedTopoSolidPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool OrientationSpecified;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private TopoSolid _topoSolid;

        [XmlIgnore] private String _type;

        public DirectedTopoSolidPropertyType()
        {
            Orientation = SignType.Positive;
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType Orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                OrientationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoSolid), ElementName = "TopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSolid TopoSolid
        {
            get
            {
                
                return _topoSolid;
            }
            set { _topoSolid = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TopoSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoPointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoPointType : AbstractTopologyType
    {
        [XmlIgnore] private DirectedNode _directedNode;

        [XmlElement(Type = typeof (DirectedNode), ElementName = "directedNode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectedNode DirectedNode
        {
            get
            {
                
                return _directedNode;
            }
            set { _directedNode = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            DirectedNode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoPointPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoPointPropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        [XmlIgnore] private TopoPoint _topoPoint;

        public TopoPointPropertyType()
        {
            Owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoPoint), ElementName = "TopoPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoPoint TopoPoint
        {
            get
            {
                
                return _topoPoint;
            }
            set { _topoPoint = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TopoPoint.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoCurveType : AbstractTopologyType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<DirectedEdge> _directedEdge;

        [XmlIgnore]
        public DirectedEdge this[int index]
        {
            get { return DirectedEdge[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return DirectedEdge.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (DirectedEdge), ElementName = "directedEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedEdge> DirectedEdge
        {
            get
            {
                if (_directedEdge == null) _directedEdge = new List<DirectedEdge>();
                return _directedEdge;
            }
            set { _directedEdge = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return DirectedEdge.GetEnumerator();
        }

        public void Add(DirectedEdge obj)
        {
            DirectedEdge.Add(obj);
        }

        public void Clear()
        {
            DirectedEdge.Clear();
        }

        public DirectedEdge Remove(Int32 index)
        {
            DirectedEdge obj = DirectedEdge[index];
            DirectedEdge.Remove(obj);
            return obj;
        }

        public bool Remove(DirectedEdge obj)
        {
            return DirectedEdge.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DirectedEdge _c in DirectedEdge) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoCurvePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoCurvePropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        [XmlIgnore] private TopoCurve _topoCurve;

        public TopoCurvePropertyType()
        {
            Owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoCurve), ElementName = "TopoCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoCurve TopoCurve
        {
            get
            {
                
                return _topoCurve;
            }
            set { _topoCurve = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TopoCurve.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoSurfaceType : AbstractTopologyType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<DirectedFace> _directedFace;

        [XmlIgnore]
        public DirectedFace this[int index]
        {
            get { return DirectedFace[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return DirectedFace.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (DirectedFace), ElementName = "directedFace", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedFace> DirectedFace
        {
            get
            {
                if (_directedFace == null) _directedFace = new List<DirectedFace>();
                return _directedFace;
            }
            set { _directedFace = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return DirectedFace.GetEnumerator();
        }

        public void Add(DirectedFace obj)
        {
            DirectedFace.Add(obj);
        }

        public void Clear()
        {
            DirectedFace.Clear();
        }

        public DirectedFace Remove(Int32 index)
        {
            DirectedFace obj = DirectedFace[index];
            DirectedFace.Remove(obj);
            return obj;
        }

        public bool Remove(DirectedFace obj)
        {
            return DirectedFace.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DirectedFace _c in DirectedFace) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoSurfacePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoSurfacePropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        [XmlIgnore] private TopoSurface _topoSurface;

        public TopoSurfacePropertyType()
        {
            Owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoSurface), ElementName = "TopoSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSurface TopoSurface
        {
            get
            {
                
                return _topoSurface;
            }
            set { _topoSurface = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TopoSurface.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoVolumeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoVolumeType : AbstractTopologyType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<DirectedTopoSolid> _directedTopoSolid;

        [XmlIgnore]
        public DirectedTopoSolid this[int index]
        {
            get { return DirectedTopoSolid[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return DirectedTopoSolid.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (DirectedTopoSolid), ElementName = "directedTopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DirectedTopoSolid> DirectedTopoSolid
        {
            get
            {
                if (_directedTopoSolid == null) _directedTopoSolid = new List<DirectedTopoSolid>();
                return _directedTopoSolid;
            }
            set { _directedTopoSolid = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return DirectedTopoSolid.GetEnumerator();
        }

        public void Add(DirectedTopoSolid obj)
        {
            DirectedTopoSolid.Add(obj);
        }

        public void Clear()
        {
            DirectedTopoSolid.Clear();
        }

        public DirectedTopoSolid Remove(Int32 index)
        {
            DirectedTopoSolid obj = DirectedTopoSolid[index];
            DirectedTopoSolid.Remove(obj);
            return obj;
        }

        public bool Remove(DirectedTopoSolid obj)
        {
            return DirectedTopoSolid.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DirectedTopoSolid _c in DirectedTopoSolid) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoVolumePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoVolumePropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        [XmlIgnore] private TopoVolume _topoVolume;

        public TopoVolumePropertyType()
        {
            Owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoVolume), ElementName = "TopoVolume", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoVolume TopoVolume
        {
            get
            {
                
                return _topoVolume;
            }
            set { _topoVolume = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TopoVolume.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoComplexType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoComplexType : AbstractTopologyType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private bool _isMaximal;

        [XmlIgnore] public bool IsMaximalSpecified;
        [XmlIgnore] private MaximalComplex _maximalComplex;
        [XmlIgnore] private List<SubComplex> _subComplex;
        [XmlIgnore] private List<SuperComplex> _superComplex;
        [XmlIgnore] private List<TopoPrimitiveMember> _topoPrimitiveMember;
        [XmlIgnore] private TopoPrimitiveMembers _topoPrimitiveMembers;

        public TopoComplexType()
        {
            IsMaximal = false;
        }

        [XmlAttribute(AttributeName = "isMaximal", DataType = "boolean")]
        public bool IsMaximal
        {
            get { return _isMaximal; }
            set
            {
                _isMaximal = value;
                IsMaximalSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MaximalComplex), ElementName = "maximalComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MaximalComplex MaximalComplex
        {
            get
            {
                
                return _maximalComplex;
            }
            set { _maximalComplex = value; }
        }

        [XmlElement(Type = typeof (SuperComplex), ElementName = "superComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<SuperComplex> SuperComplex
        {
            get
            {
                if (_superComplex == null) _superComplex = new List<SuperComplex>();
                return _superComplex;
            }
            set { _superComplex = value; }
        }

        [XmlElement(Type = typeof (SubComplex), ElementName = "subComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<SubComplex> SubComplex
        {
            get
            {
                if (_subComplex == null) _subComplex = new List<SubComplex>();
                return _subComplex;
            }
            set { _subComplex = value; }
        }

        [XmlElement(Type = typeof (TopoPrimitiveMember), ElementName = "topoPrimitiveMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TopoPrimitiveMember> TopoPrimitiveMember
        {
            get
            {
                if (_topoPrimitiveMember == null) _topoPrimitiveMember = new List<TopoPrimitiveMember>();
                return _topoPrimitiveMember;
            }
            set { _topoPrimitiveMember = value; }
        }

        [XmlElement(Type = typeof (TopoPrimitiveMembers), ElementName = "topoPrimitiveMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoPrimitiveMembers TopoPrimitiveMembers
        {
            get
            {
                
                return _topoPrimitiveMembers;
            }
            set { _topoPrimitiveMembers = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            MaximalComplex.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoPrimitiveMemberType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (NodeType))]
    [XmlInclude(typeof (TopoSolidType))]
    [XmlInclude(typeof (EdgeType))]
    [XmlInclude(typeof (FaceType))]
    public class TopoPrimitiveMemberType
    {
        [XmlIgnore] private AbstractTopoPrimitive _abstractTopoPrimitive;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TopoPrimitiveMemberType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTopoPrimitive), ElementName = "AbstractTopoPrimitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTopoPrimitive AbstractTopoPrimitive
        {
            get { return _abstractTopoPrimitive; }
            set { _abstractTopoPrimitive = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractTopoPrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoPrimitiveArrayAssociationType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (NodeType))]
    [XmlInclude(typeof (TopoSolidType))]
    [XmlInclude(typeof (EdgeType))]
    [XmlInclude(typeof (FaceType))]
    public class TopoPrimitiveArrayAssociationType
    {
        [XmlIgnore] private List<AbstractTopoPrimitive> _abstractTopoPrimitive;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public TopoPrimitiveArrayAssociationType()
        {
            Owns = false;
        }

        [XmlIgnore]
        public AbstractTopoPrimitive this[int index]
        {
            get { return AbstractTopoPrimitive[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractTopoPrimitive.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTopoPrimitive), ElementName = "AbstractTopoPrimitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractTopoPrimitive> AbstractTopoPrimitive
        {
            get
            {
                if (_abstractTopoPrimitive == null) _abstractTopoPrimitive = new List<AbstractTopoPrimitive>();
                return _abstractTopoPrimitive;
            }
            set { _abstractTopoPrimitive = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractTopoPrimitive.GetEnumerator();
        }

        public void Add(AbstractTopoPrimitive obj)
        {
            AbstractTopoPrimitive.Add(obj);
        }

        public void Clear()
        {
            AbstractTopoPrimitive.Clear();
        }

        public AbstractTopoPrimitive Remove(Int32 index)
        {
            AbstractTopoPrimitive obj = AbstractTopoPrimitive[index];
            AbstractTopoPrimitive.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractTopoPrimitive obj)
        {
            return AbstractTopoPrimitive.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractTopoPrimitive _c in AbstractTopoPrimitive) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoComplexPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoComplexPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private TopoComplex _topoComplex;
        [XmlIgnore] private String _type;

        public TopoComplexPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TopoComplex), ElementName = "TopoComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoComplex TopoComplex
        {
            get
            {
                
                return _topoComplex;
            }
            set { _topoComplex = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TopoComplex.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ValuePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeComplexType))]
    [XmlInclude(typeof (AbstractTimePrimitiveType))]
    public class ValuePropertyType
    {
        [XmlIgnore] private AbstractGeometry _abstractGeometry;
        [XmlIgnore] private AbstractTimeObject _abstractTimeObject;
        [XmlIgnore] private Object _abstractValue;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _null;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public ValuePropertyType()
        {
            Type = "simple";
            Owns = false;
            Null = string.Empty;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(ElementName = "AbstractValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Object AbstractValue
        {
            get { return _abstractValue; }
            set { _abstractValue = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _abstractGeometry; }
            set { _abstractGeometry = value; }
        }

        [XmlElement(Type = typeof (AbstractTimeObject), ElementName = "AbstractTimeObject", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimeObject AbstractTimeObject
        {
            get { return _abstractTimeObject; }
            set { _abstractTimeObject = value; }
        }

        [XmlElement(ElementName = "Null", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public String Null
        {
            get { return _null; }
            set { _null = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
            AbstractTimeObject.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ValueArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeComplexType))]
    [XmlInclude(typeof (AbstractTimePrimitiveType))]
    public class ValueArrayPropertyType
    {
        [XmlIgnore] private AbstractGeometry _abstractGeometry;
        [XmlIgnore] private AbstractTimeObject _abstractTimeObject;
        [XmlIgnore] private Object _abstractValue;
        [XmlIgnore] private String _null;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public ValueArrayPropertyType()
        {
            Owns = false;
            Null = string.Empty;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(ElementName = "AbstractValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Object AbstractValue
        {
            get { return _abstractValue; }
            set { _abstractValue = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _abstractGeometry; }
            set { _abstractGeometry = value; }
        }

        [XmlElement(Type = typeof (AbstractTimeObject), ElementName = "AbstractTimeObject", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimeObject AbstractTimeObject
        {
            get { return _abstractTimeObject; }
            set { _abstractTimeObject = value; }
        }

        [XmlElement(ElementName = "Null", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public String Null
        {
            get { return _null; }
            set { _null = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
            AbstractTimeObject.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompositeValueType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompositeValueType : AbstractGMLType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;

        [XmlIgnore] private List<ValueComponent> _valueComponent;

        [XmlIgnore] private ValueComponents _valueComponents;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (ValueComponent), ElementName = "valueComponent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ValueComponent> ValueComponent
        {
            get
            {
                if (_valueComponent == null) _valueComponent = new List<ValueComponent>();
                return _valueComponent;
            }
            set { _valueComponent = value; }
        }

        [XmlElement(Type = typeof (ValueComponents), ElementName = "valueComponents", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ValueComponents ValueComponents
        {
            get
            {
                
                return _valueComponents;
            }
            set { _valueComponents = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ValueArrayType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ValueArrayType : CompositeValueType
    {
        [XmlIgnore] private String _codeSpace;

        [XmlIgnore] private String _uom;

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public String CodeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlAttribute(AttributeName = "uom")]
        public String Uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CategoryExtentType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CategoryExtentType
    {
        [XmlIgnore] private CategoryExtentTypeEnum _value;

        [XmlIgnore] public bool ValueSpecified;

        [XmlText(typeof (CategoryExtentTypeEnum))]
        public CategoryExtentTypeEnum Value
        {
            get { return _value; }
            set
            {
                _value = value;
                ValueSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }

    public enum CategoryExtentTypeEnum
    {
    }


    [XmlType(TypeName = "QuantityExtentType", Namespace = Declarations.SchemaVersion), Serializable]
    public class QuantityExtentType
    {
        [XmlIgnore] private QuantityExtentTypeEnum _value;

        [XmlIgnore] public bool ValueSpecified;

        [XmlText(typeof (QuantityExtentTypeEnum))]
        public QuantityExtentTypeEnum Value
        {
            get { return _value; }
            set
            {
                _value = value;
                ValueSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }

    public enum QuantityExtentTypeEnum
    {
    }


    [XmlType(TypeName = "BooleanPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BooleanPropertyType_E
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Boolean _boolean;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public BooleanPropertyType_E()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Boolean), ElementName = "Boolean", IsNullable = true, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Boolean Boolean
        {
            get
            {
                
                return _boolean;
            }
            set { _boolean = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Boolean.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CategoryPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CategoryPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Category _category;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CategoryPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Category), ElementName = "Category", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Category Category
        {
            get
            {
                
                return _category;
            }
            set { _category = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Category.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "QuantityPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class QuantityPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private Quantity _quantity;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public QuantityPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Quantity), ElementName = "Quantity", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Quantity Quantity
        {
            get
            {
                
                return _quantity;
            }
            set { _quantity = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Quantity.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CountPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CountPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Count _count;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CountPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Count), ElementName = "Count", IsNullable = true, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Count Count
        {
            get
            {
                
                return _count;
            }
            set { _count = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Count.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridType : AbstractGeometryType
    {
        [XmlIgnore] private String _axisLabels;
        [XmlIgnore] private List<String> _axisName;
        [XmlIgnore] private String _dimension;

        [XmlIgnore] private GridLimitsType _limits;

        public GridType()
        {
            Dimension = string.Empty;
        }

        [XmlAttribute(AttributeName = "dimension", DataType = "positiveInteger")]
        public String Dimension
        {
            get { return _dimension; }
            set { _dimension = value; }
        }

        [XmlElement(Type = typeof (GridLimitsType), ElementName = "limits", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GridLimitsType Limits
        {
            get
            {
                
                return _limits;
            }
            set { _limits = value; }
        }

        [XmlElement(ElementName = "axisLabels", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public String AxisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlElement(Type = typeof (String), ElementName = "axisName", IsNullable = false, Form = XmlSchemaForm.Qualified
            , DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<String> AxisName
        {
            get
            {
                if (_axisName == null) _axisName = new List<String>();
                return _axisName;
            }
            set { _axisName = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Limits.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridLimitsType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridLimitsType
    {
        [XmlIgnore] private GridEnvelopeType _gridEnvelope;

        [XmlElement(Type = typeof (GridEnvelopeType), ElementName = "GridEnvelope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GridEnvelopeType GridEnvelope
        {
            get
            {
                
                return _gridEnvelope;
            }
            set { _gridEnvelope = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            GridEnvelope.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridEnvelopeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridEnvelopeType
    {
        [XmlIgnore] private String _high;
        [XmlIgnore] private String _low;

        [XmlElement(ElementName = "low", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public String Low
        {
            get { return _low; }
            set { _low = value; }
        }

        [XmlElement(ElementName = "high", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public String High
        {
            get { return _high; }
            set { _high = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "RectifiedGridType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RectifiedGridType : GridType
    {
        [XmlIgnore] private List<VectorType> _offsetVector;
        [XmlIgnore] private DateTime _origin;

        [XmlIgnore] public bool OriginSpecified;

        public RectifiedGridType()
        {
            Origin = DateTime.Now;
        }


        [XmlElement(ElementName = "origin", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = Declarations.SchemaVersion)]
        public DateTime Origin
        {
            get { return _origin; }
            set
            {
                _origin = value;
                OriginSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime OriginUtc
        {
            get { return _origin.ToUniversalTime(); }
            set
            {
                _origin = value.ToLocalTime();
                OriginSpecified = true;
            }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "offsetVector", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<VectorType> OffsetVector
        {
            get
            {
                if (_offsetVector == null) _offsetVector = new List<VectorType>();
                return _offsetVector;
            }
            set { _offsetVector = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (VectorType _c in OffsetVector) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCoverageType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCoverageType : AbstractFeatureType
    {
        [XmlIgnore] private DomainSet _domainSet;

        [XmlIgnore] private RangeSet _rangeSet;

        [XmlElement(Type = typeof (DomainSet), ElementName = "domainSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DomainSet DomainSet
        {
            get
            {
                
                return _domainSet;
            }
            set { _domainSet = value; }
        }

        [XmlElement(Type = typeof (RangeSet), ElementName = "rangeSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public RangeSet RangeSet
        {
            get
            {
                
                return _rangeSet;
            }
            set { _rangeSet = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            DomainSet.MakeSchemaCompliant();
            RangeSet.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DiscreteCoverageType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DiscreteCoverageType : AbstractCoverageType
    {
        [XmlIgnore] private CoverageFunction _coverageFunction;

        [XmlElement(Type = typeof (CoverageFunction), ElementName = "coverageFunction", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoverageFunction CoverageFunction
        {
            get
            {
                
                return _coverageFunction;
            }
            set { _coverageFunction = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractContinuousCoverageType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractContinuousCoverageType : AbstractCoverageType
    {
        [XmlIgnore] private CoverageFunction _coverageFunction;

        [XmlElement(Type = typeof (CoverageFunction), ElementName = "coverageFunction", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoverageFunction CoverageFunction
        {
            get
            {
                
                return _coverageFunction;
            }
            set { _coverageFunction = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DomainSetType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeComplexType))]
    [XmlInclude(typeof (AbstractTimePrimitiveType))]
    public class DomainSetType
    {
        [XmlIgnore] private AbstractGeometry _abstractGeometry;
        [XmlIgnore] private AbstractTimeObject _abstractTimeObject;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public DomainSetType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _abstractGeometry; }
            set { _abstractGeometry = value; }
        }

        [XmlElement(Type = typeof (AbstractTimeObject), ElementName = "AbstractTimeObject", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimeObject AbstractTimeObject
        {
            get { return _abstractTimeObject; }
            set { _abstractTimeObject = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
            AbstractTimeObject.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RangeSetType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RangeSetType
    {
        [XmlIgnore] private List<Object> _abstractScalarValueList;
        [XmlIgnore] private DataBlock _dataBlock;
        [XmlIgnore] private File _file;
        [XmlIgnore] private List<ValueArray> _valueArray;

        [XmlElement(Type = typeof (ValueArray), ElementName = "ValueArray", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ValueArray> ValueArray
        {
            get
            {
                if (_valueArray == null) _valueArray = new List<ValueArray>();
                return _valueArray;
            }
            set { _valueArray = value; }
        }

        [XmlElement(Type = typeof (Object), ElementName = "AbstractScalarValueList", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<Object> AbstractScalarValueList
        {
            get
            {
                if (_abstractScalarValueList == null) _abstractScalarValueList = new List<Object>();
                return _abstractScalarValueList;
            }
            set { _abstractScalarValueList = value; }
        }

        [XmlElement(Type = typeof (DataBlock), ElementName = "DataBlock", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DataBlock DataBlock
        {
            get
            {
                
                return _dataBlock;
            }
            set { _dataBlock = value; }
        }

        [XmlElement(Type = typeof (File), ElementName = "File", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public File File
        {
            get
            {
                
                return _file;
            }
            set { _file = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (ValueArray _c in ValueArray) _c.MakeSchemaCompliant();
            DataBlock.MakeSchemaCompliant();
            File.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DataBlockType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DataBlockType
    {
        [XmlIgnore] private String _doubleOrNilReasonTupleList;
        [XmlIgnore] private RangeParameters _rangeParameters;

        [XmlIgnore] private TupleList _tupleList;

        [XmlElement(Type = typeof (RangeParameters), ElementName = "rangeParameters", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public RangeParameters RangeParameters
        {
            get
            {
                
                return _rangeParameters;
            }
            set { _rangeParameters = value; }
        }

        [XmlElement(Type = typeof (TupleList), ElementName = "tupleList", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TupleList TupleList
        {
            get
            {
                
                return _tupleList;
            }
            set { _tupleList = value; }
        }

        [XmlElement(ElementName = "doubleOrNilReasonTupleList", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public String DoubleOrNilReasonTupleList
        {
            get { return _doubleOrNilReasonTupleList; }
            set { _doubleOrNilReasonTupleList = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            RangeParameters.MakeSchemaCompliant();
            TupleList.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FileType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FileType
    {
        [XmlIgnore] private String _compression;
        [XmlIgnore] private String _fileName;
        [XmlIgnore] private String _fileReference;
        [XmlIgnore] private CodeType _fileStructure;
        [XmlIgnore] private String _mimeType;
        [XmlIgnore] private RangeParameters _rangeParameters;

        public FileType()
        {
            FileName = string.Empty;
            FileReference = string.Empty;
        }

        [XmlElement(Type = typeof (RangeParameters), ElementName = "rangeParameters", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public RangeParameters RangeParameters
        {
            get
            {
                
                return _rangeParameters;
            }
            set { _rangeParameters = value; }
        }

        [XmlElement(ElementName = "fileName", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public String FileName
        {
            get { return _fileName; }
            set { _fileName = value; }
        }

        [XmlElement(ElementName = "fileReference", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "anyURI", Namespace = Declarations.SchemaVersion)]
        public String FileReference
        {
            get { return _fileReference; }
            set { _fileReference = value; }
        }

        [XmlElement(Type = typeof (CodeType), ElementName = "fileStructure", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CodeType FileStructure
        {
            get
            {
                
                return _fileStructure;
            }
            set { _fileStructure = value; }
        }

        [XmlElement(ElementName = "mimeType", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public String MimeType
        {
            get { return _mimeType; }
            set { _mimeType = value; }
        }

        [XmlElement(ElementName = "compression", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI"
            , Namespace = Declarations.SchemaVersion)]
        public String Compression
        {
            get { return _compression; }
            set { _compression = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            RangeParameters.MakeSchemaCompliant();
            FileStructure.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoverageFunctionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CoverageFunctionType
    {
        [XmlIgnore] private CoverageMappingRule _coverageMappingRule;
        [XmlIgnore] private GridFunction _gridFunction;
        [XmlIgnore] private MappingRule _mappingRule;

        [XmlElement(Type = typeof (MappingRule), ElementName = "MappingRule", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MappingRule MappingRule
        {
            get
            {
                
                return _mappingRule;
            }
            set { _mappingRule = value; }
        }

        [XmlElement(Type = typeof (CoverageMappingRule), ElementName = "CoverageMappingRule", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoverageMappingRule CoverageMappingRule
        {
            get
            {
                
                return _coverageMappingRule;
            }
            set { _coverageMappingRule = value; }
        }

        [XmlElement(Type = typeof (GridFunction), ElementName = "GridFunction", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GridFunction GridFunction
        {
            get
            {
                
                return _gridFunction;
            }
            set { _gridFunction = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MappingRule.MakeSchemaCompliant();
            CoverageMappingRule.MakeSchemaCompliant();
            GridFunction.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MappingRuleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MappingRuleType
    {
        [XmlIgnore] private String _ruleDefinition;

        [XmlIgnore] private ReferenceType _ruleReference;

        public MappingRuleType()
        {
            RuleDefinition = string.Empty;
        }

        [XmlElement(ElementName = "ruleDefinition", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public String RuleDefinition
        {
            get { return _ruleDefinition; }
            set { _ruleDefinition = value; }
        }

        [XmlElement(Type = typeof (ReferenceType), ElementName = "ruleReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ReferenceType RuleReference
        {
            get
            {
                
                return _ruleReference;
            }
            set { _ruleReference = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            RuleReference.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridFunctionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridFunctionType
    {
        [XmlIgnore] private SequenceRuleType _sequenceRule;

        [XmlIgnore] private String _startPoint;

        [XmlElement(Type = typeof (SequenceRuleType), ElementName = "sequenceRule", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SequenceRuleType SequenceRule
        {
            get
            {
                
                return _sequenceRule;
            }
            set { _sequenceRule = value; }
        }

        [XmlElement(ElementName = "startPoint", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public String StartPoint
        {
            get { return _startPoint; }
            set { _startPoint = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "SequenceRuleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SequenceRuleType
    {
        [XmlIgnore] private String _axisOrder;
        [XmlIgnore] private IncrementOrder _order;

        [XmlIgnore] public bool OrderSpecified;
        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "order")]
        public IncrementOrder Order
        {
            get { return _order; }
            set
            {
                _order = value;
                OrderSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "axisOrder")]
        public String AxisOrder
        {
            get { return _axisOrder; }
            set { _axisOrder = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "ObservationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ObservationType : AbstractFeatureType
    {
        [XmlIgnore] private ResultOf _resultOf;
        [XmlIgnore] private Target _target;
        [XmlIgnore] private Using _using;
        [XmlIgnore] private ValidTime _validTime;

        [XmlElement(Type = typeof (ValidTime), ElementName = "validTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ValidTime ValidTime
        {
            get
            {
                
                return _validTime;
            }
            set { _validTime = value; }
        }

        [XmlElement(Type = typeof (Using), ElementName = "using", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Using Using
        {
            get
            {
                if (_using == null) _using = new Using();
                return _using;
            }
            set { _using = value; }
        }

        [XmlElement(Type = typeof (Target), ElementName = "target", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Target Target
        {
            get
            {
                
                return _target;
            }
            set { _target = value; }
        }

        [XmlElement(Type = typeof (ResultOf), ElementName = "resultOf", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ResultOf ResultOf
        {
            get
            {
                
                return _resultOf;
            }
            set { _resultOf = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            ValidTime.MakeSchemaCompliant();
            ResultOf.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ProcedurePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (DynamicFeatureType))]
    [XmlInclude(typeof (ObservationType))]
    [XmlInclude(typeof (AbstractCoverageType))]
    [XmlInclude(typeof (AbstractFeatureCollectionType))]
    [XmlInclude(typeof (BoundedFeatureType))]
    public class ProcedurePropertyType
    {
        [XmlIgnore] private AbstractFeature _abstractFeature;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public ProcedurePropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractFeature), ElementName = "AbstractFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractFeature AbstractFeature
        {
            get { return _abstractFeature; }
            set { _abstractFeature = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractFeature.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TargetPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (DynamicFeatureType))]
    [XmlInclude(typeof (ObservationType))]
    [XmlInclude(typeof (AbstractCoverageType))]
    [XmlInclude(typeof (AbstractFeatureCollectionType))]
    [XmlInclude(typeof (BoundedFeatureType))]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class TargetPropertyType
    {
        [XmlIgnore] private AbstractFeature _abstractFeature;
        [XmlIgnore] private AbstractGeometry _abstractGeometry;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public TargetPropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractFeature), ElementName = "AbstractFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractFeature AbstractFeature
        {
            get { return _abstractFeature; }
            set { _abstractFeature = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _abstractGeometry; }
            set { _abstractGeometry = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractFeature.MakeSchemaCompliant();
            AbstractGeometry.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ResultType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ResultType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;
        [XmlAnyElement] public XmlElement Any;

        public ResultType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "DirectedObservationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedObservationType : ObservationType
    {
        [XmlIgnore] private Direction _direction;

        [XmlElement(Type = typeof (Direction), ElementName = "direction", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Direction Direction
        {
            get
            {
                
                return _direction;
            }
            set { _direction = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Direction.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedObservationAtDistanceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedObservationAtDistanceType : DirectedObservationType
    {
        [XmlIgnore] private MeasureType _distance;

        [XmlElement(Type = typeof (MeasureType), ElementName = "distance", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType Distance
        {
            get
            {
                
                return _distance;
            }
            set { _distance = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Distance.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeTopologyPrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeTopologyPrimitiveType : AbstractTimePrimitiveType
    {
        [XmlIgnore] private ReferenceType _complex;

        [XmlElement(Type = typeof (ReferenceType), ElementName = "complex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ReferenceType Complex
        {
            get
            {
                
                return _complex;
            }
            set { _complex = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeTopologyPrimitivePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (TimeNodeType))]
    [XmlInclude(typeof (TimeEdgeType))]
    public class TimeTopologyPrimitivePropertyType
    {
        [XmlIgnore] private AbstractTimeTopologyPrimitive _abstractTimeTopologyPrimitive;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TimeTopologyPrimitivePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTimeTopologyPrimitive), ElementName = "AbstractTimeTopologyPrimitive",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimeTopologyPrimitive AbstractTimeTopologyPrimitive
        {
            get { return _abstractTimeTopologyPrimitive; }
            set { _abstractTimeTopologyPrimitive = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractTimeTopologyPrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeTopologyComplexType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class TimeTopologyComplexType : AbstractTimeComplexType
    {
        [XmlIgnore] private List<TimeTopologyPrimitivePropertyType> _primitive;

        [XmlIgnore]
        public TimeTopologyPrimitivePropertyType this[int index]
        {
            get { return Primitive[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return Primitive.Count; }
        }

        [XmlElement(Type = typeof (TimeTopologyPrimitivePropertyType), ElementName = "primitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeTopologyPrimitivePropertyType> Primitive
        {
            get
            {
                if (_primitive == null) _primitive = new List<TimeTopologyPrimitivePropertyType>();
                return _primitive;
            }
            set { _primitive = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Primitive.GetEnumerator();
        }

        public void Add(TimeTopologyPrimitivePropertyType obj)
        {
            Primitive.Add(obj);
        }

        public void Clear()
        {
            Primitive.Clear();
        }

        public TimeTopologyPrimitivePropertyType Remove(Int32 index)
        {
            TimeTopologyPrimitivePropertyType obj = Primitive[index];
            Primitive.Remove(obj);
            return obj;
        }

        public bool Remove(TimeTopologyPrimitivePropertyType obj)
        {
            return Primitive.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (TimeTopologyPrimitivePropertyType _c in Primitive) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeTopologyComplexPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeTopologyComplexPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeTopologyComplex _timeTopologyComplex;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TimeTopologyComplexPropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeTopologyComplex), ElementName = "TimeTopologyComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeTopologyComplex TimeTopologyComplex
        {
            get { return _timeTopologyComplex; }
            set { _timeTopologyComplex = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeTopologyComplex.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeNodeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeNodeType : AbstractTimeTopologyPrimitiveType
    {
        [XmlIgnore] private List<TimeEdgePropertyType> _nextEdge;
        [XmlIgnore] private Position _position;
        [XmlIgnore] private List<TimeEdgePropertyType> _previousEdge;

        [XmlElement(Type = typeof (TimeEdgePropertyType), ElementName = "previousEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeEdgePropertyType> PreviousEdge
        {
            get
            {
                if (_previousEdge == null) _previousEdge = new List<TimeEdgePropertyType>();
                return _previousEdge;
            }
            set { _previousEdge = value; }
        }

        [XmlElement(Type = typeof (TimeEdgePropertyType), ElementName = "nextEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeEdgePropertyType> NextEdge
        {
            get
            {
                if (_nextEdge == null) _nextEdge = new List<TimeEdgePropertyType>();
                return _nextEdge;
            }
            set { _nextEdge = value; }
        }

        [XmlElement(Type = typeof (Position), ElementName = "position", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Position Position
        {
            get
            {
                
                return _position;
            }
            set { _position = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeNodePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeNodePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeNode _timeNode;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TimeNodePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeNode), ElementName = "TimeNode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNode TimeNode
        {
            get
            {
                
                return _timeNode;
            }
            set { _timeNode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeNode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeEdgeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeEdgeType : AbstractTimeTopologyPrimitiveType
    {
        [XmlIgnore] private TimeNodePropertyType _end;
        [XmlIgnore] private TimePeriodPropertyType _extent;
        [XmlIgnore] private TimeNodePropertyType _start;

        [XmlElement(Type = typeof (TimeNodePropertyType), ElementName = "start", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNodePropertyType Start
        {
            get
            {
                
                return _start;
            }
            set { _start = value; }
        }

        [XmlElement(Type = typeof (TimeNodePropertyType), ElementName = "end", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNodePropertyType End
        {
            get
            {
                
                return _end;
            }
            set { _end = value; }
        }

        [XmlElement(Type = typeof (TimePeriodPropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePeriodPropertyType Extent
        {
            get
            {
                
                return _extent;
            }
            set { _extent = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Start.MakeSchemaCompliant();
            End.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeEdgePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeEdgePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeEdge _timeEdge;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TimeEdgePropertyType()
        {
            Type = "simple";
            Owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeEdge), ElementName = "TimeEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeEdge TimeEdge
        {
            get
            {
                
                return _timeEdge;
            }
            set { _timeEdge = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeEdge.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeReferenceSystemType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeReferenceSystemType : DefinitionType
    {
        [XmlIgnore] private DomainOfValidity _domainOfValidity;

        [XmlElement(Type = typeof (DomainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DomainOfValidity DomainOfValidity
        {
            get
            {
                
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            DomainOfValidity.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCoordinateSystemType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCoordinateSystemType : TimeReferenceSystemType
    {
        [XmlIgnore] private TimeIntervalLengthType _interval;
        [XmlIgnore] private DateTime _origin;
        [XmlIgnore] private TimePositionType _originPosition;

        [XmlIgnore] public bool OriginSpecified;

        public TimeCoordinateSystemType()
        {
            Origin = DateTime.Now;
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "originPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType OriginPosition
        {
            get
            {
                
                return _originPosition;
            }
            set { _originPosition = value; }
        }


        [XmlElement(ElementName = "origin", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = Declarations.SchemaVersion)]
        public DateTime Origin
        {
            get { return _origin; }
            set
            {
                _origin = value;
                OriginSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime OriginUtc
        {
            get { return _origin.ToUniversalTime(); }
            set
            {
                _origin = value.ToLocalTime();
                OriginSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeIntervalLengthType), ElementName = "interval", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeIntervalLengthType Interval
        {
            get
            {
                
                return _interval;
            }
            set { _interval = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            OriginPosition.MakeSchemaCompliant();
            Interval.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCalendarType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCalendarType : TimeReferenceSystemType
    {
        [XmlIgnore] private List<TimeCalendarEraPropertyType> _referenceFrame;

        [XmlIgnore]
        public TimeCalendarEraPropertyType this[int index]
        {
            get { return ReferenceFrame[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return ReferenceFrame.Count; }
        }

        [XmlElement(Type = typeof (TimeCalendarEraPropertyType), ElementName = "referenceFrame", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeCalendarEraPropertyType> ReferenceFrame
        {
            get
            {
                if (_referenceFrame == null) _referenceFrame = new List<TimeCalendarEraPropertyType>();
                return _referenceFrame;
            }
            set { _referenceFrame = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return ReferenceFrame.GetEnumerator();
        }

        public void Add(TimeCalendarEraPropertyType obj)
        {
            ReferenceFrame.Add(obj);
        }

        public void Clear()
        {
            ReferenceFrame.Clear();
        }

        public TimeCalendarEraPropertyType Remove(Int32 index)
        {
            TimeCalendarEraPropertyType obj = ReferenceFrame[index];
            ReferenceFrame.Remove(obj);
            return obj;
        }

        public bool Remove(TimeCalendarEraPropertyType obj)
        {
            return ReferenceFrame.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (TimeCalendarEraPropertyType _c in ReferenceFrame) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCalendarEraType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCalendarEraType : DefinitionType
    {
        [XmlIgnore] private TimePeriodPropertyType _epochOfUse;
        [XmlIgnore] private Decimal _julianReference;

        [XmlIgnore] public bool JulianReferenceSpecified;
        [XmlIgnore] private DateTime _referenceDate;

        [XmlIgnore] public bool ReferenceDateSpecified;
        [XmlIgnore] private StringOrRefType _referenceEvent;

        public TimeCalendarEraType()
        {
            ReferenceDate = DateTime.Now;
            JulianReferenceSpecified = true;
        }

        [XmlElement(Type = typeof (StringOrRefType), ElementName = "referenceEvent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public StringOrRefType ReferenceEvent
        {
            get
            {
                
                return _referenceEvent;
            }
            set { _referenceEvent = value; }
        }


        [XmlElement(ElementName = "referenceDate", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "date"
            , Namespace = Declarations.SchemaVersion)]
        public DateTime ReferenceDate
        {
            get { return _referenceDate; }
            set
            {
                _referenceDate = value;
                ReferenceDateSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime ReferenceDateUtc
        {
            get { return _referenceDate.ToUniversalTime(); }
            set
            {
                _referenceDate = value.ToLocalTime();
                ReferenceDateSpecified = true;
            }
        }


        [XmlElement(ElementName = "julianReference", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "decimal", Namespace = Declarations.SchemaVersion)]
        public Decimal JulianReference
        {
            get { return _julianReference; }
            set
            {
                _julianReference = value;
                JulianReferenceSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimePeriodPropertyType), ElementName = "epochOfUse", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePeriodPropertyType EpochOfUse
        {
            get
            {
                
                return _epochOfUse;
            }
            set { _epochOfUse = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            ReferenceEvent.MakeSchemaCompliant();
            EpochOfUse.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCalendarPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCalendarPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeCalendar _timeCalendar;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public TimeCalendarPropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeCalendar), ElementName = "TimeCalendar", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeCalendar TimeCalendar
        {
            get
            {
                
                return _timeCalendar;
            }
            set { _timeCalendar = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeCalendar.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCalendarEraPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCalendarEraPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeCalendarEra _timeCalendarEra;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public TimeCalendarEraPropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeCalendarEra), ElementName = "TimeCalendarEra", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeCalendarEra TimeCalendarEra
        {
            get
            {
                
                return _timeCalendarEra;
            }
            set { _timeCalendarEra = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeCalendarEra.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeClockType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeClockType : TimeReferenceSystemType
    {
        [XmlIgnore] private List<TimeCalendarPropertyType> _dateBasis;
        [XmlIgnore] private StringOrRefType _referenceEvent;

        [XmlIgnore] private DateTime _referenceTime;

        [XmlIgnore] public bool ReferenceTimeSpecified;


        [XmlIgnore] private DateTime _utcReference;

        [XmlIgnore] public bool UtcReferenceSpecified;

        public TimeClockType()
        {
            ReferenceTime = DateTime.Now;
            UtcReference = DateTime.Now;
        }

        [XmlElement(Type = typeof (StringOrRefType), ElementName = "referenceEvent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public StringOrRefType ReferenceEvent
        {
            get
            {
                
                return _referenceEvent;
            }
            set { _referenceEvent = value; }
        }

        [XmlElement(ElementName = "referenceTime", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "time"
            , Namespace = Declarations.SchemaVersion)]
        public DateTime ReferenceTime
        {
            get { return _referenceTime; }
            set
            {
                _referenceTime = value;
                ReferenceTimeSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime ReferenceTimeUtc
        {
            get { return _referenceTime.ToUniversalTime(); }
            set
            {
                _referenceTime = value.ToLocalTime();
                ReferenceTimeSpecified = true;
            }
        }


        [XmlElement(ElementName = "utcReference", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "time",
            Namespace = Declarations.SchemaVersion)]
        public DateTime UtcReference
        {
            get { return _utcReference; }
            set
            {
                _utcReference = value;
                UtcReferenceSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime UtcReferenceUtc
        {
            get { return _utcReference.ToUniversalTime(); }
            set
            {
                _utcReference = value.ToLocalTime();
                UtcReferenceSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeCalendarPropertyType), ElementName = "dateBasis", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeCalendarPropertyType> DateBasis
        {
            get
            {
                if (_dateBasis == null) _dateBasis = new List<TimeCalendarPropertyType>();
                return _dateBasis;
            }
            set { _dateBasis = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            ReferenceEvent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeClockPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeClockPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeClock _timeClock;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public TimeClockPropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeClock), ElementName = "TimeClock", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeClock TimeClock
        {
            get
            {
                
                return _timeClock;
            }
            set { _timeClock = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeClock.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeOrdinalReferenceSystemType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeOrdinalReferenceSystemType : TimeReferenceSystemType
    {
        [XmlIgnore] private List<TimeOrdinalEraPropertyType> _component;

        [XmlIgnore]
        public TimeOrdinalEraPropertyType this[int index]
        {
            get { return Component[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return Component.Count; }
        }

        [XmlElement(Type = typeof (TimeOrdinalEraPropertyType), ElementName = "component", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeOrdinalEraPropertyType> Component
        {
            get
            {
                if (_component == null) _component = new List<TimeOrdinalEraPropertyType>();
                return _component;
            }
            set { _component = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Component.GetEnumerator();
        }

        public void Add(TimeOrdinalEraPropertyType obj)
        {
            Component.Add(obj);
        }

        public void Clear()
        {
            Component.Clear();
        }

        public TimeOrdinalEraPropertyType Remove(Int32 index)
        {
            TimeOrdinalEraPropertyType obj = Component[index];
            Component.Remove(obj);
            return obj;
        }

        public bool Remove(TimeOrdinalEraPropertyType obj)
        {
            return Component.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (TimeOrdinalEraPropertyType _c in Component) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeOrdinalEraType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeOrdinalEraType : DefinitionType
    {
        [XmlIgnore] private TimeNodePropertyType _end;
        [XmlIgnore] private TimePeriodPropertyType _extent;
        [XmlIgnore] private GroupProperty _group;
        [XmlIgnore] private List<Member> _member;
        [XmlIgnore] private List<RelatedTimeType> _relatedTime;

        [XmlIgnore] private TimeNodePropertyType _start;

        [XmlElement(Type = typeof (RelatedTimeType), ElementName = "relatedTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<RelatedTimeType> RelatedTime
        {
            get
            {
                if (_relatedTime == null) _relatedTime = new List<RelatedTimeType>();
                return _relatedTime;
            }
            set { _relatedTime = value; }
        }

        [XmlElement(Type = typeof (TimeNodePropertyType), ElementName = "start", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNodePropertyType Start
        {
            get
            {
                
                return _start;
            }
            set { _start = value; }
        }

        [XmlElement(Type = typeof (TimeNodePropertyType), ElementName = "end", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNodePropertyType End
        {
            get
            {
                
                return _end;
            }
            set { _end = value; }
        }

        [XmlElement(Type = typeof (TimePeriodPropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePeriodPropertyType Extent
        {
            get
            {
                
                return _extent;
            }
            set { _extent = value; }
        }

        [XmlElement(Type = typeof (Member), ElementName = "member", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Member> Member
        {
            get
            {
                if (_member == null) _member = new List<Member>();
                return _member;
            }
            set { _member = value; }
        }

        [XmlElement(Type = typeof (GroupProperty), ElementName = "group", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public GroupProperty Group
        {
            get
            {
                
                return _group;
            }
            set { _group = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeOrdinalEraPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeOrdinalEraPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeOrdinalEra _timeOrdinalEra;
        [XmlIgnore] private String _title;

        [XmlIgnore] private String _type;

        public TimeOrdinalEraPropertyType()
        {
            Owns = false;
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeOrdinalEra), ElementName = "TimeOrdinalEra", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeOrdinalEra TimeOrdinalEra
        {
            get
            {
                
                return _timeOrdinalEra;
            }
            set { _timeOrdinalEra = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeOrdinalEra.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractGeneralTransformationType))]
    [XmlInclude(typeof (PassThroughOperationType))]
    [XmlInclude(typeof (ConcatenatedOperationType))]
    [XmlInclude(typeof (AbstractGeneralConversionType))]
    public class OperationPropertyType
    {
        [XmlIgnore] private AbstractOperation _abstractOperation;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public OperationPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractOperation), ElementName = "AbstractOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractOperation AbstractOperation
        {
            get { return _abstractOperation; }
            set { _abstractOperation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TemporalCS _temporalCS;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TemporalCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TemporalCS), ElementName = "TemporalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TemporalCS TemporalCS
        {
            get
            {
                
                return _temporalCS;
            }
            set { _temporalCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TemporalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ObliqueCartesianCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ObliqueCartesianCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ObliqueCartesianCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ObliqueCartesianCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private ObliqueCartesianCS _obliqueCartesianCS;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public ObliqueCartesianCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ObliqueCartesianCS), ElementName = "ObliqueCartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ObliqueCartesianCS ObliqueCartesianCS
        {
            get
            {
                
                return _obliqueCartesianCS;
            }
            set { _obliqueCartesianCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            ObliqueCartesianCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeographicCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeographicCRSType : AbstractCRSType
    {
        [XmlIgnore] private UsesEllipsoidalCS _usesEllipsoidalCS;

        [XmlIgnore] private UsesGeodeticDatum _usesGeodeticDatum;

        [XmlElement(Type = typeof (UsesEllipsoidalCS), ElementName = "usesEllipsoidalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UsesEllipsoidalCS UsesEllipsoidalCS
        {
            get
            {
                
                return _usesEllipsoidalCS;
            }
            set { _usesEllipsoidalCS = value; }
        }

        [XmlElement(Type = typeof (UsesGeodeticDatum), ElementName = "usesGeodeticDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UsesGeodeticDatum UsesGeodeticDatum
        {
            get
            {
                
                return _usesGeodeticDatum;
            }
            set { _usesGeodeticDatum = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            UsesEllipsoidalCS.MakeSchemaCompliant();
            UsesGeodeticDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeographicCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeographicCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private GeographicCRS _geographicCRS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public GeographicCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeographicCRS), ElementName = "GeographicCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeographicCRS GeographicCRS
        {
            get
            {
                
                return _geographicCRS;
            }
            set { _geographicCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            GeographicCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeocentricCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeocentricCRSType : AbstractCRSType
    {
        [XmlIgnore] private UsesCartesianCS _usesCartesianCS;
        [XmlIgnore] private UsesGeodeticDatum _usesGeodeticDatum;

        [XmlIgnore] private UsesSphericalCS _usesSphericalCS;

        [XmlElement(Type = typeof (UsesCartesianCS), ElementName = "usesCartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UsesCartesianCS UsesCartesianCS
        {
            get
            {
                
                return _usesCartesianCS;
            }
            set { _usesCartesianCS = value; }
        }

        [XmlElement(Type = typeof (UsesSphericalCS), ElementName = "usesSphericalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UsesSphericalCS UsesSphericalCS
        {
            get
            {
                
                return _usesSphericalCS;
            }
            set { _usesSphericalCS = value; }
        }

        [XmlElement(Type = typeof (UsesGeodeticDatum), ElementName = "usesGeodeticDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UsesGeodeticDatum UsesGeodeticDatum
        {
            get
            {
                
                return _usesGeodeticDatum;
            }
            set { _usesGeodeticDatum = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            UsesCartesianCS.MakeSchemaCompliant();
            UsesSphericalCS.MakeSchemaCompliant();
            UsesGeodeticDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeocentricCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeocentricCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private GeocentricCRS _geocentricCRS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public GeocentricCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeocentricCRS), ElementName = "GeocentricCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeocentricCRS GeocentricCRS
        {
            get
            {
                
                return _geocentricCRS;
            }
            set { _geocentricCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            GeocentricCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DMSAngleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DMSAngleType
    {
        [XmlIgnore] private Decimal _decimalMinutes;

        [XmlIgnore] public bool DecimalMinutesSpecified;
        [XmlIgnore] private Degrees _degrees;


        [XmlIgnore] private String _minutes;

        [XmlIgnore] private Decimal _seconds;

        [XmlIgnore] public bool SecondsSpecified;


        public DMSAngleType()
        {
            DecimalMinutesSpecified = true;
            Minutes = string.Empty;
        }

        [XmlElement(Type = typeof (Degrees), ElementName = "degrees", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public Degrees Degrees
        {
            get
            {
                
                return _degrees;
            }
            set { _degrees = value; }
        }

        [XmlElement(ElementName = "decimalMinutes", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "decimal", Namespace = Declarations.SchemaVersion)]
        public Decimal DecimalMinutes
        {
            get { return _decimalMinutes; }
            set
            {
                _decimalMinutes = value;
                DecimalMinutesSpecified = true;
            }
        }

        [XmlElement(ElementName = "minutes", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public String Minutes
        {
            get { return _minutes; }
            set { _minutes = value; }
        }

        [XmlElement(ElementName = "seconds", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "decimal",
            Namespace = Declarations.SchemaVersion)]
        public Decimal Seconds
        {
            get { return _seconds; }
            set
            {
                _seconds = value;
                SecondsSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
            Degrees.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DegreesType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DegreesType
    {
        [XmlIgnore] private Direction _direction;

        [XmlIgnore] public bool DirectionSpecified;

        [XmlIgnore] private Decimal _value;

        [XmlIgnore] public bool ValueSpecified;

        [XmlAttribute(AttributeName = "direction")]
        public Direction Direction
        {
            get { return _direction; }
            set
            {
                _direction = value;
                DirectionSpecified = true;
            }
        }

        [XmlText(typeof (Decimal))]
        public Decimal Value
        {
            get { return _value; }
            set
            {
                _value = value;
                ValueSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AngleChoiceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AngleChoiceType
    {
        [XmlIgnore] private Angle _angle;

        [XmlIgnore] private DmsAngle _dmsAngle;

        [XmlElement(Type = typeof (Angle), ElementName = "angle", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Angle Angle
        {
            get
            {
                
                return _angle;
            }
            set { _angle = value; }
        }

        [XmlElement(Type = typeof (DmsAngle), ElementName = "dmsAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DmsAngle DmsAngle
        {
            get
            {
                
                return _dmsAngle;
            }
            set { _dmsAngle = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Angle.MakeSchemaCompliant();
            DmsAngle.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArrayAssociationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArrayAssociationType
    {
        [XmlIgnore] private List<String> _abstractObject;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool OwnsSpecified;

        public ArrayAssociationType()
        {
            Owns = false;
        }

        [XmlIgnore]
        public String this[int index]
        {
            get { return AbstractObject[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractObject.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool Owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                OwnsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (String), ElementName = "AbstractObject", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<String> AbstractObject
        {
            get
            {
                if (_abstractObject == null) _abstractObject = new List<String>();
                return _abstractObject;
            }
            set { _abstractObject = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractObject.GetEnumerator();
        }

        public void Add(String obj)
        {
            AbstractObject.Add(obj);
        }

        public void Clear()
        {
            AbstractObject.Clear();
        }

        public String Remove(Int32 index)
        {
            String obj = AbstractObject[index];
            AbstractObject.Remove(obj);
            return obj;
        }

        public bool Remove(String obj)
        {
            return AbstractObject.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "StringOrRefType", Namespace = Declarations.SchemaVersion), Serializable]
    public class StringOrRefType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _value;

        public StringOrRefType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "BagType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BagType : AbstractGMLType
    {
        [XmlIgnore] private List<Member> _member;

        [XmlIgnore] private Members _members;

        [XmlElement(Type = typeof (Member), ElementName = "member", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Member> Member
        {
            get
            {
                if (_member == null) _member = new List<Member>();
                return _member;
            }
            set { _member = value; }
        }

        [XmlElement(Type = typeof (Members), ElementName = "members", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public Members Members
        {
            get
            {
                
                return _members;
            }
            set { _members = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArrayType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArrayType : AbstractGMLType
    {
        [XmlIgnore] private Members _members;

        [XmlElement(Type = typeof (Members), ElementName = "members", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public Members Members
        {
            get
            {
                
                return _members;
            }
            set { _members = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MetaDataPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GenericMetaDataType))]
    public class MetaDataPropertyType
    {
        [XmlIgnore] private String _about;
        [XmlIgnore] private AbstractMetaData _abstractMetaData;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public MetaDataPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "about", DataType = "anyURI")]
        public String About
        {
            get { return _about; }
            set { _about = value; }
        }

        [XmlElement(Type = typeof (AbstractMetaData), ElementName = "AbstractMetaData", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractMetaData AbstractMetaData
        {
            get { return _abstractMetaData; }
            set { _abstractMetaData = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractMetaData.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractMetaDataType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractMetaDataType
    {
        [XmlIgnore] private String _id;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public String Id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "GenericMetaDataType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GenericMetaDataType : AbstractMetaDataType
    {
        [XmlIgnore] private String _value;
        [XmlAnyElement] public XmlElement[] Any;

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LocationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class LocationPropertyType
    {
        [XmlIgnore] private AbstractGeometry _abstractGeometry;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private LocationKeyWord _locationKeyWord;
        [XmlIgnore] private LocationString _locationString;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _null;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public LocationPropertyType()
        {
            Type = "simple";
            Null = string.Empty;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _abstractGeometry; }
            set { _abstractGeometry = value; }
        }

        [XmlElement(Type = typeof (LocationKeyWord), ElementName = "LocationKeyWord", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LocationKeyWord LocationKeyWord
        {
            get
            {
                
                return _locationKeyWord;
            }
            set { _locationKeyWord = value; }
        }

        [XmlElement(Type = typeof (LocationString), ElementName = "LocationString", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LocationString LocationString
        {
            get
            {
                
                return _locationString;
            }
            set { _locationString = value; }
        }

        [XmlElement(ElementName = "Null", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public String Null
        {
            get { return _null; }
            set { _null = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
            LocationKeyWord.MakeSchemaCompliant();
            LocationString.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PriorityLocationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PriorityLocationPropertyType : LocationPropertyType
    {
        [XmlIgnore] private String _priority;

        [XmlAttribute(AttributeName = "priority", DataType = "string")]
        public String Priority
        {
            get { return _priority; }
            set { _priority = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FeatureArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (DynamicFeatureType))]
    [XmlInclude(typeof (ObservationType))]
    [XmlInclude(typeof (AbstractCoverageType))]
    [XmlInclude(typeof (AbstractFeatureCollectionType))]
    [XmlInclude(typeof (BoundedFeatureType))]
    public class FeatureArrayPropertyType
    {
        [XmlIgnore] private List<AbstractFeature> _abstractFeature;

        [XmlIgnore]
        public AbstractFeature this[int index]
        {
            get { return AbstractFeature[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return AbstractFeature.Count; }
        }

        [XmlElement(Type = typeof (AbstractFeature), ElementName = "AbstractFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractFeature> AbstractFeature
        {
            get
            {
                if (_abstractFeature == null) _abstractFeature = new List<AbstractFeature>();
                return _abstractFeature;
            }
            set { _abstractFeature = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractFeature.GetEnumerator();
        }

        public void Add(AbstractFeature obj)
        {
            AbstractFeature.Add(obj);
        }

        public void Clear()
        {
            AbstractFeature.Clear();
        }

        public AbstractFeature Remove(Int32 index)
        {
            AbstractFeature obj = AbstractFeature[index];
            AbstractFeature.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractFeature obj)
        {
            return AbstractFeature.Remove(obj);
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (AbstractFeature _c in AbstractFeature) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BoundedFeatureType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class BoundedFeatureType : AbstractFeatureType
    {
        [XmlIgnore] private BoundedBy _boundedBy;
        [XmlIgnore] private Description _description;
        [XmlIgnore] private DescriptionReference _descriptionReference;
        [XmlIgnore] private Identifier _identifier;
        [XmlIgnore] private Location _location;
        [XmlIgnore] private List<MetaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<Name> _name;

        [XmlElement(Type = typeof (MetaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<MetaDataProperty> MetaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<MetaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (Description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Description Description
        {
            get
            {
                
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (DescriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DescriptionReference DescriptionReference
        {
            get
            {
                
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (Identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Identifier Identifier
        {
            get
            {
                
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (Name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Name> Name
        {
            get
            {
                if (_name == null) _name = new List<Name>();
                return _name;
            }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (BoundedBy), ElementName = "boundedBy", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public BoundedBy BoundedBy
        {
            get
            {
                
                return _boundedBy;
            }
            set { _boundedBy = value; }
        }

        [XmlElement(Type = typeof (Location), ElementName = "location", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Location Location
        {
            get
            {
                
                return _location;
            }
            set { _location = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            BoundedBy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractFeatureCollectionType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractFeatureCollectionType : AbstractFeatureType
    {
        [XmlIgnore] private List<FeatureMember> _featureMember;

        [XmlIgnore] private FeatureMembers _featureMembers;

        [XmlElement(Type = typeof (FeatureMember), ElementName = "featureMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<FeatureMember> FeatureMember
        {
            get
            {
                if (_featureMember == null) _featureMember = new List<FeatureMember>();
                return _featureMember;
            }
            set { _featureMember = value; }
        }

        [XmlElement(Type = typeof (FeatureMembers), ElementName = "featureMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public FeatureMembers FeatureMembers
        {
            get
            {
                
                return _featureMembers;
            }
            set { _featureMembers = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FeatureCollectionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FeatureCollectionType : AbstractFeatureCollectionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "IndirectEntryType", Namespace = Declarations.SchemaVersion), Serializable]
    public class IndirectEntryType
    {
        [XmlIgnore] private DefinitionProxy _definitionProxy;

        [XmlElement(Type = typeof (DefinitionProxy), ElementName = "DefinitionProxy", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DefinitionProxy DefinitionProxy
        {
            get
            {
                
                return _definitionProxy;
            }
            set { _definitionProxy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DefinitionProxy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DefinitionProxyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DefinitionProxyType : DefinitionType
    {
        [XmlIgnore] private DefinitionRef _definitionRef;

        [XmlElement(Type = typeof (DefinitionRef), ElementName = "definitionRef", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DefinitionRef DefinitionRef
        {
            get
            {
                
                return _definitionRef;
            }
            set { _definitionRef = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            DefinitionRef.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MovingObjectStatusType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MovingObjectStatusType : AbstractTimeSliceType
    {
        [XmlIgnore] private MeasureType _acceleration;
        [XmlIgnore] private DirectionPropertyType _bearing;
        [XmlIgnore] private MeasureType _elevation;
        [XmlIgnore] private Location _location;
        [XmlIgnore] private LocationName _locationName;
        [XmlIgnore] private LocationReference _locationReference;
        [XmlIgnore] private Pos _pos;
        [XmlIgnore] private Position _position;
        [XmlIgnore] private MeasureType _speed;
        [XmlIgnore] private Status _status;
        [XmlIgnore] private StatusReference _statusReference;

        [XmlElement(Type = typeof (Position), ElementName = "position", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Position Position
        {
            get
            {
                
                return _position;
            }
            set { _position = value; }
        }

        [XmlElement(Type = typeof (Pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Pos Pos
        {
            get
            {
                
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (LocationName), ElementName = "locationName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LocationName LocationName
        {
            get
            {
                
                return _locationName;
            }
            set { _locationName = value; }
        }

        [XmlElement(Type = typeof (LocationReference), ElementName = "locationReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LocationReference LocationReference
        {
            get
            {
                
                return _locationReference;
            }
            set { _locationReference = value; }
        }

        [XmlElement(Type = typeof (Location), ElementName = "location", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Location Location
        {
            get
            {
                
                return _location;
            }
            set { _location = value; }
        }

        [XmlElement(Type = typeof (MeasureType), ElementName = "speed", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType Speed
        {
            get
            {
                
                return _speed;
            }
            set { _speed = value; }
        }

        [XmlElement(Type = typeof (DirectionPropertyType), ElementName = "bearing", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectionPropertyType Bearing
        {
            get
            {
                
                return _bearing;
            }
            set { _bearing = value; }
        }

        [XmlElement(Type = typeof (MeasureType), ElementName = "acceleration", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType Acceleration
        {
            get
            {
                
                return _acceleration;
            }
            set { _acceleration = value; }
        }

        [XmlElement(Type = typeof (MeasureType), ElementName = "elevation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType Elevation
        {
            get
            {
                
                return _elevation;
            }
            set { _elevation = value; }
        }

        [XmlElement(Type = typeof (Status), ElementName = "status", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Status Status
        {
            get
            {
                
                return _status;
            }
            set { _status = value; }
        }

        [XmlElement(Type = typeof (StatusReference), ElementName = "statusReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public StatusReference StatusReference
        {
            get
            {
                
                return _statusReference;
            }
            set { _statusReference = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Position.MakeSchemaCompliant();
            Pos.MakeSchemaCompliant();
            LocationName.MakeSchemaCompliant();
            LocationReference.MakeSchemaCompliant();
            Location.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractObject_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public abstract class AbstractObjectType
    {
        [XmlIgnore] private String _id;

        [XmlIgnore] private String _uuid;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public String Id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlAttribute(AttributeName = "uuid", DataType = "string")]
        public String Uuid
        {
            get { return _uuid; }
            set { _uuid = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "ObjectReference_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class ObjectReferencePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public ObjectReferencePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CodeListValue_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class CodeListValueType
    {
        [XmlIgnore] private String _codeList;

        [XmlIgnore] private String _codeListValue;

        [XmlIgnore] private String _codeSpace;

        [XmlIgnore] private String _value;

        public CodeListValueType()
        {
            CodeList = string.Empty;
            CodeListValue = string.Empty;
        }

        [XmlAttribute(AttributeName = "codeList", DataType = "anyURI")]
        public String CodeList
        {
            get { return _codeList; }
            set { _codeList = value; }
        }

        [XmlAttribute(AttributeName = "codeListValue", DataType = "anyURI")]
        public String CodeListValue
        {
            get { return _codeListValue; }
            set { _codeListValue = value; }
        }

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public String CodeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "TypeName_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class TypeNameType : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _aName;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "aName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public CharacterStringPropertyType AName
        {
            get { return _aName; }
            set { _aName = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            AName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TypeName_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class TypeNamePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private TypeName _typeName;
        [XmlIgnore] private String _uuidref;

        public TypeNamePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (TypeName), ElementName = "TypeName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public TypeName TypeName
        {
            get { return _typeName; }
            set { _typeName = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TypeName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MemberName_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MemberNameType : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _aName;

        [XmlIgnore] private TypeNamePropertyType _attributeType;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "aName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public CharacterStringPropertyType AName
        {
            get { return _aName; }
            set { _aName = value; }
        }

        [XmlElement(Type = typeof (TypeNamePropertyType), ElementName = "attributeType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public TypeNamePropertyType AttributeType
        {
            get { return _attributeType; }
            set { _attributeType = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            AName.MakeSchemaCompliant();
            AttributeType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MemberName_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MemberNamePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MemberName _memberName;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MemberNamePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MemberName), ElementName = "MemberName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public MemberName MemberName
        {
            get { return _memberName; }
            set { _memberName = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MemberName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Multiplicity_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MultiplicityType : AbstractObjectType
    {
        [XmlIgnore] private List<MultiplicityRangePropertyType> _range;

        [XmlIgnore]
        public MultiplicityRangePropertyType this[int index]
        {
            get { return Range[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return Range.Count; }
        }

        [XmlElement(Type = typeof (MultiplicityRangePropertyType), ElementName = "range", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public List<MultiplicityRangePropertyType> Range
        {
            get
            {
                if (_range == null) _range = new List<MultiplicityRangePropertyType>();
                return _range;
            }
            set { _range = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Range.GetEnumerator();
        }

        public void Add(MultiplicityRangePropertyType obj)
        {
            Range.Add(obj);
        }

        public void Clear()
        {
            Range.Clear();
        }

        public MultiplicityRangePropertyType Remove(Int32 index)
        {
            MultiplicityRangePropertyType  obj = Range[index];
            Range.Remove(obj);
            return obj;
        }

        public bool Remove(MultiplicityRangePropertyType obj)
        {
            return Range.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (MultiplicityRangePropertyType _c in Range) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Multiplicity_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MultiplicityPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private Multiplicity _multiplicity;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MultiplicityPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Multiplicity), ElementName = "Multiplicity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public Multiplicity Multiplicity
        {
            get { return _multiplicity; }
            set { _multiplicity = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Multiplicity.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiplicityRange_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MultiplicityRangeType : AbstractObjectType
    {
        [XmlIgnore] private IntegerPropertyType _lower;

        [XmlIgnore] private UnlimitedIntegerPropertyType _upper;

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "lower", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public IntegerPropertyType Lower
        {
            get { return _lower; }
            set { _lower = value; }
        }

        [XmlElement(Type = typeof (UnlimitedIntegerPropertyType), ElementName = "upper", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public UnlimitedIntegerPropertyType Upper
        {
            get { return _upper; }
            set { _upper = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Lower.MakeSchemaCompliant();
            Upper.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiplicityRange_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MultiplicityRangePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MultiplicityRange _multiplicityRange;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MultiplicityRangePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MultiplicityRange), ElementName = "MultiplicityRange", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public MultiplicityRange MultiplicityRange
        {
            get { return _multiplicityRange; }
            set { _multiplicityRange = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MultiplicityRange.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Measure_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MeasurePropertyType
    {
        [XmlIgnore] private Measure _measure;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Measure), ElementName = "Measure", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = "http://www.isotc211.org/2005/gco")]
        public Measure Measure
        {
            get { return _measure; }
            set { _measure = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Measure.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Length_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class LengthPropertyType
    {
        [XmlIgnore] private Length _length;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Length), ElementName = "Length", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Length Length
        {
            get { return _length; }
            set { _length = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Length.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Angle_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class AnglePropertyType
    {
        [XmlIgnore] private Angle _angle;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Angle), ElementName = "Angle", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Angle Angle
        {
            get { return _angle; }
            set { _angle = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Angle.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Scale_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class ScalePropertyType
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private Scale _scale;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Scale), ElementName = "Scale", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Scale Scale
        {
            get { return _scale; }
            set { _scale = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Scale.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Distance_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class DistancePropertyType
    {
        [XmlIgnore] private Distance _distance;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Distance), ElementName = "Distance", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public Distance Distance
        {
            get { return _distance; }
            set { _distance = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Distance.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CharacterString_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class CharacterStringPropertyType
    {
        [XmlIgnore] private String _characterString;
        [XmlIgnore] private String _nilReason;

        public CharacterStringPropertyType()
        {
            CharacterString = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "CharacterString", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = "http://www.isotc211.org/2005/gco")]
        public String CharacterString
        {
            get { return _characterString; }
            set { _characterString = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Boolean_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class BooleanPropertyType
    {
        [XmlIgnore] private Boolean _boolean;

        [XmlIgnore] public bool BooleanSpecified;
        [XmlIgnore] private String _nilReason;


        public BooleanPropertyType()
        {
            BooleanSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Boolean", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "boolean",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Boolean Boolean
        {
            get { return _boolean; }
            set
            {
                _boolean = value;
                BooleanSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "GenericName_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class GenericNamePropertyType
    {
        [XmlIgnore] private AbstractGenericName _abstractGenericName;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractGenericName), ElementName = "AbstractGenericName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public AbstractGenericName AbstractGenericName
        {
            get { return _abstractGenericName; }
            set { _abstractGenericName = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGenericName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LocalName_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class LocalNamePropertyType
    {
        [XmlIgnore] private LocalName _localName;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LocalName), ElementName = "LocalName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public LocalName LocalName
        {
            get { return _localName; }
            set { _localName = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            LocalName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ScopedName_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class ScopedNamePropertyType
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private ScopedName _scopedName;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (ScopedName), ElementName = "ScopedName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public ScopedName ScopedName
        {
            get { return _scopedName; }
            set { _scopedName = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            ScopedName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomAngle_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomAnglePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UnitDefinition _unitDefinition;
        [XmlIgnore] private String _uuidref;

        public UomAnglePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                
                return _unitDefinition;
            }
            set { _unitDefinition = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomLength_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomLengthPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UnitDefinition _unitDefinition;
        [XmlIgnore] private String _uuidref;

        public UomLengthPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                
                return _unitDefinition;
            }
            set { _unitDefinition = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomScale_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomScalePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UnitDefinition _unitDefinition;
        [XmlIgnore] private String _uuidref;

        public UomScalePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                
                return _unitDefinition;
            }
            set { _unitDefinition = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UnitOfMeasure_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UnitOfMeasurePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UnitDefinition _unitDefinition;
        [XmlIgnore] private String _uuidref;

        public UnitOfMeasurePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                
                return _unitDefinition;
            }
            set { _unitDefinition = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomArea_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomAreaPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UnitDefinition _unitDefinition;
        [XmlIgnore] private String _uuidref;

        public UomAreaPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                
                return _unitDefinition;
            }
            set { _unitDefinition = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomVelocity_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomVelocityPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UnitDefinition _unitDefinition;
        [XmlIgnore] private String _uuidref;

        public UomVelocityPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                
                return _unitDefinition;
            }
            set { _unitDefinition = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomTime_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomTimePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UnitDefinition _unitDefinition;
        [XmlIgnore] private String _uuidref;

        public UomTimePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                
                return _unitDefinition;
            }
            set { _unitDefinition = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomVolume_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomVolumePropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UnitDefinition _unitDefinition;
        [XmlIgnore] private String _uuidref;

        public UomVolumePropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                
                return _unitDefinition;
            }
            set { _unitDefinition = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DateTime_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class DateTimePropertyType
    {
        [XmlIgnore] private DateTime _dateTime;

        [XmlIgnore] public bool DateTimeSpecified;
        [XmlIgnore] private String _nilReason;

        public DateTimePropertyType()
        {
            DateTime = DateTime.Now;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }


        [XmlElement(ElementName = "DateTime", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public DateTime DateTime
        {
            get { return _dateTime; }
            set
            {
                _dateTime = value;
                DateTimeSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime DateTimeUtc
        {
            get { return _dateTime.ToUniversalTime(); }
            set
            {
                _dateTime = value.ToLocalTime();
                DateTimeSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Date_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class DatePropertyType
    {
        [XmlIgnore] private DateTime _date;

        [XmlIgnore] public bool DateSpecified;


        [XmlIgnore] private DateTime _dateTime;

        [XmlIgnore] public bool DateTimeSpecified;
        [XmlIgnore] private String _nilReason;

        public DatePropertyType()
        {
            Date = DateTime.Now;
            DateTime = DateTime.Now;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Date", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "date",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public DateTime Date
        {
            get { return _date; }
            set
            {
                _date = value;
                DateSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime DateUtc
        {
            get { return _date.ToUniversalTime(); }
            set
            {
                _date = value.ToLocalTime();
                DateSpecified = true;
            }
        }


        [XmlElement(ElementName = "DateTime", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public DateTime DateTime
        {
            get { return _dateTime; }
            set
            {
                _dateTime = value;
                DateTimeSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime DateTimeUtc
        {
            get { return _dateTime.ToUniversalTime(); }
            set
            {
                _dateTime = value.ToLocalTime();
                DateTimeSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Number_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class NumberPropertyType
    {
        [XmlIgnore] private Decimal _decimal;

        [XmlIgnore] public bool DecimalSpecified;
        [XmlIgnore] private String _integer;
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private Double _real;

        [XmlIgnore] public bool RealSpecified;

        public NumberPropertyType()
        {
            RealSpecified = true;
            DecimalSpecified = true;
            Integer = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }


        [XmlElement(ElementName = "Real", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Double Real
        {
            get { return _real; }
            set
            {
                _real = value;
                RealSpecified = true;
            }
        }


        [XmlElement(ElementName = "Decimal", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "decimal",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Decimal Decimal
        {
            get { return _decimal; }
            set
            {
                _decimal = value;
                DecimalSpecified = true;
            }
        }

        [XmlElement(ElementName = "Integer", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "integer",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public String Integer
        {
            get { return _integer; }
            set { _integer = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Decimal_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class DecimalPropertyType
    {
        [XmlIgnore] private Decimal _decimal;

        [XmlIgnore] public bool DecimalSpecified;
        [XmlIgnore] private String _nilReason;


        public DecimalPropertyType()
        {
            DecimalSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Decimal", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "decimal",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Decimal Decimal
        {
            get { return _decimal; }
            set
            {
                _decimal = value;
                DecimalSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Real_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class RealPropertyType
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private Double _real;

        [XmlIgnore] public bool RealSpecified;


        public RealPropertyType()
        {
            RealSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Real", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Double Real
        {
            get { return _real; }
            set
            {
                _real = value;
                RealSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Integer_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class IntegerPropertyType
    {
        [XmlIgnore] private String _integer;
        [XmlIgnore] private String _nilReason;

        public IntegerPropertyType()
        {
            Integer = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Integer", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "integer",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public String Integer
        {
            get { return _integer; }
            set { _integer = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "UnlimitedInteger_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UnlimitedIntegerType
    {
        [XmlIgnore] private Boolean _isInfinite;

        [XmlIgnore] public bool IsInfiniteSpecified;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "isInfinite", DataType = "boolean")]
        public Boolean IsInfinite
        {
            get { return _isInfinite; }
            set
            {
                _isInfinite = value;
                IsInfiniteSpecified = true;
            }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "UnlimitedInteger_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UnlimitedIntegerPropertyType
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private UnlimitedInteger _unlimitedInteger;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnlimitedInteger), ElementName = "UnlimitedInteger", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public UnlimitedInteger UnlimitedInteger
        {
            get { return _unlimitedInteger; }
            set { _unlimitedInteger = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UnlimitedInteger.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Record_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class RecordPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _record;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public RecordPropertyType()
        {
            Type = "simple";
            Record = string.Empty;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Record", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public String Record
        {
            get { return _record; }
            set { _record = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "RecordType_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class RecordTypeType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _value;

        public RecordTypeType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "RecordType_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class RecordTypePropertyType
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private RecordType _recordType;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (RecordType), ElementName = "RecordType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public RecordType RecordType
        {
            get { return _recordType; }
            set { _recordType = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            RecordType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Binary_type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class BinaryType
    {
        [XmlIgnore] private String _src;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "src", DataType = "anyURI")]
        public String Src
        {
            get { return _src; }
            set { _src = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Binary_propertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class BinaryPropertyType
    {
        [XmlIgnore] private Binary _binary;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Binary), ElementName = "Binary", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Binary Binary
        {
            get { return _binary; }
            set { _binary = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Binary.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GM_point_PropertyType", Namespace = "http://www.isotc211.org/2005/gss"), Serializable]
    public class GM_point_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private Point _point;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public GM_point_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Point), ElementName = "Point", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Point Point
        {
            get
            {
                
                return _point;
            }
            set { _point = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Point.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GM_object_PropertyType", Namespace = "http://www.isotc211.org/2005/gss"), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class GM_object_PropertyType
    {
        [XmlIgnore] private AbstractGeometry _abstractGeometry;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public GM_object_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _abstractGeometry; }
            set { _abstractGeometry = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TM_primitive_PropertyType", Namespace = "http://www.isotc211.org/2005/gts"), Serializable]
    [XmlInclude(typeof (AbstractTimeTopologyPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeGeometricPrimitiveType))]
    public class TM_primitive_PropertyType
    {
        [XmlIgnore] private AbstractTimePrimitive _abstractTimePrimitive;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public TM_primitive_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractTimePrimitive), ElementName = "AbstractTimePrimitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimePrimitive AbstractTimePrimitive
        {
            get { return _abstractTimePrimitive; }
            set { _abstractTimePrimitive = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractTimePrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TM_periodDuration_PropertyType", Namespace = "http://www.isotc211.org/2005/gts"), Serializable]
    public class TM_periodDuration_PropertyType
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private String _tM_PeriodDuration;

        public TM_periodDuration_PropertyType()
        {
            TM_periodDuration = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "TM_periodDuration", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "duration", Namespace = "http://www.isotc211.org/2005/gts")]
        public String TM_periodDuration
        {
            get { return _tM_PeriodDuration; }
            set { _tM_PeriodDuration = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "SC_cRS_PropertyType", Namespace = "http://www.isotc211.org/2005/gsr"), Serializable]
    [XmlInclude(typeof (GeographicCRSType))]
    [XmlInclude(typeof (GeocentricCRSType))]
    [XmlInclude(typeof (TemporalCRSType))]
    [XmlInclude(typeof (AbstractGeneralDerivedCRSType))]
    [XmlInclude(typeof (ImageCRSType))]
    [XmlInclude(typeof (GeodeticCRSType))]
    [XmlInclude(typeof (CompoundCRSType))]
    [XmlInclude(typeof (VerticalCRSType))]
    [XmlInclude(typeof (EngineeringCRSType))]
    public class SC_cRS_PropertyType
    {
        [XmlIgnore] private AbstractCRS _abstractCRS;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public SC_cRS_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractCRS), ElementName = "AbstractCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCRS AbstractCRS
        {
            get { return _abstractCRS; }
            set { _abstractCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_temporalExtent_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_temporalExtent_Type : AbstractObjectType
    {
        [XmlIgnore] private TM_primitive_PropertyType _extent;

        [XmlElement(Type = typeof (TM_primitive_PropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public TM_primitive_PropertyType Extent
        {
            get { return _extent; }
            set { _extent = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Extent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_temporalExtent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_temporalExtent_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EX_temporalExtent _eX_TemporalExtent;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public EX_temporalExtent_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_temporalExtent), ElementName = "EX_temporalExtent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_temporalExtent EX_temporalExtent
        {
            get { return _eX_TemporalExtent; }
            set { _eX_TemporalExtent = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EX_temporalExtent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_verticalExtent_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_verticalExtent_Type : AbstractObjectType
    {
        [XmlIgnore] private RealPropertyType _maximumValue;
        [XmlIgnore] private RealPropertyType _minimumValue;
        [XmlIgnore] private SC_cRS_PropertyType _verticalCRS;

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "minimumValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType MinimumValue
        {
            get { return _minimumValue; }
            set { _minimumValue = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "maximumValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType MaximumValue
        {
            get { return _maximumValue; }
            set { _maximumValue = value; }
        }

        [XmlElement(Type = typeof (SC_cRS_PropertyType), ElementName = "verticalCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public SC_cRS_PropertyType VerticalCRS
        {
            get { return _verticalCRS; }
            set { _verticalCRS = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            MinimumValue.MakeSchemaCompliant();
            MaximumValue.MakeSchemaCompliant();
            VerticalCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_verticalExtent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_verticalExtent_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EX_verticalExtent _eX_VerticalExtent;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public EX_verticalExtent_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_verticalExtent), ElementName = "EX_verticalExtent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_verticalExtent EX_verticalExtent
        {
            get { return _eX_VerticalExtent; }
            set { _eX_VerticalExtent = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EX_verticalExtent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_boundingPolygon_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_boundingPolygon_Type : AbstractEX_geographicExtent_Type
    {
        [XmlIgnore] private List<GM_object_PropertyType> _polygon;

        [XmlIgnore]
        public GM_object_PropertyType this[int index]
        {
            get { return Polygon[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return Polygon.Count; }
        }

        [XmlElement(Type = typeof (GM_object_PropertyType), ElementName = "polygon", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<GM_object_PropertyType> Polygon
        {
            get
            {
                if (_polygon == null) _polygon = new List<GM_object_PropertyType>();
                return _polygon;
            }
            set { _polygon = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Polygon.GetEnumerator();
        }

        public void Add(GM_object_PropertyType obj)
        {
            Polygon.Add(obj);
        }

        public void Clear()
        {
            Polygon.Clear();
        }

        public GM_object_PropertyType Remove(Int32 index)
        {
            GM_object_PropertyType obj = Polygon[index];
            Polygon.Remove(obj);
            return obj;
        }

        public bool Remove(GM_object_PropertyType obj)
        {
            return Polygon.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (GM_object_PropertyType _c in Polygon) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_boundingPolygon_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class EX_boundingPolygon_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EX_boundingPolygon _eX_BoundingPolygon;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public EX_boundingPolygon_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_boundingPolygon), ElementName = "EX_boundingPolygon", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_boundingPolygon EX_boundingPolygon
        {
            get { return _eX_BoundingPolygon; }
            set { _eX_BoundingPolygon = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EX_boundingPolygon.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_extent_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_extent_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _description;

        [XmlIgnore] private List<EX_geographicExtent_PropertyType> _geographicElement;

        [XmlIgnore] private List<EX_temporalExtent_PropertyType> _temporalElement;

        [XmlIgnore] private List<EX_verticalExtent_PropertyType> _verticalElement;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (EX_geographicExtent_PropertyType), ElementName = "geographicElement",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_geographicExtent_PropertyType> GeographicElement
        {
            get
            {
                if (_geographicElement == null) _geographicElement = new List<EX_geographicExtent_PropertyType>();
                return _geographicElement;
            }
            set { _geographicElement = value; }
        }

        [XmlElement(Type = typeof (EX_temporalExtent_PropertyType), ElementName = "temporalElement", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_temporalExtent_PropertyType> TemporalElement
        {
            get
            {
                if (_temporalElement == null) _temporalElement = new List<EX_temporalExtent_PropertyType>();
                return _temporalElement;
            }
            set { _temporalElement = value; }
        }

        [XmlElement(Type = typeof (EX_verticalExtent_PropertyType), ElementName = "verticalElement", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_verticalExtent_PropertyType> VerticalElement
        {
            get
            {
                if (_verticalElement == null) _verticalElement = new List<EX_verticalExtent_PropertyType>();
                return _verticalElement;
            }
            set { _verticalElement = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_extent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_extent_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EX_extent _eX_Extent;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public EX_extent_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_extent), ElementName = "EX_extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_extent EX_extent
        {
            get { return _eX_Extent; }
            set { _eX_Extent = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EX_extent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractEX_geographicExtent_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractEX_geographicExtent_Type : AbstractObjectType
    {
        [XmlIgnore] private BooleanPropertyType _extentTypeCode;

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "extentTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType ExtentTypeCode
        {
            get { return _extentTypeCode; }
            set { _extentTypeCode = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_geographicExtent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (EX_geographicBoundingBox_Type))]
    [XmlInclude(typeof (EX_boundingPolygon_Type))]
    [XmlInclude(typeof (EX_geographicDescription_Type))]
    public class EX_geographicExtent_PropertyType
    {
        [XmlIgnore] private AbstractEX_geographicExtent _abstractEX_GeographicExtent;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public EX_geographicExtent_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractEX_geographicExtent), ElementName = "AbstractEX_geographicExtent",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractEX_geographicExtent AbstractEX_geographicExtent
        {
            get { return _abstractEX_GeographicExtent; }
            set { _abstractEX_GeographicExtent = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractEX_geographicExtent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_geographicBoundingBox_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_geographicBoundingBox_Type : AbstractEX_geographicExtent_Type
    {
        [XmlIgnore] private DecimalPropertyType _eastBoundLongitude;
        [XmlIgnore] private DecimalPropertyType _northBoundLatitude;
        [XmlIgnore] private DecimalPropertyType _southBoundLatitude;
        [XmlIgnore] private DecimalPropertyType _westBoundLongitude;

        [XmlElement(Type = typeof (DecimalPropertyType), ElementName = "westBoundLongitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DecimalPropertyType WestBoundLongitude
        {
            get { return _westBoundLongitude; }
            set { _westBoundLongitude = value; }
        }

        [XmlElement(Type = typeof (DecimalPropertyType), ElementName = "eastBoundLongitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DecimalPropertyType EastBoundLongitude
        {
            get { return _eastBoundLongitude; }
            set { _eastBoundLongitude = value; }
        }

        [XmlElement(Type = typeof (DecimalPropertyType), ElementName = "southBoundLatitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DecimalPropertyType SouthBoundLatitude
        {
            get { return _southBoundLatitude; }
            set { _southBoundLatitude = value; }
        }

        [XmlElement(Type = typeof (DecimalPropertyType), ElementName = "northBoundLatitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DecimalPropertyType NorthBoundLatitude
        {
            get { return _northBoundLatitude; }
            set { _northBoundLatitude = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            WestBoundLongitude.MakeSchemaCompliant();
            EastBoundLongitude.MakeSchemaCompliant();
            SouthBoundLatitude.MakeSchemaCompliant();
            NorthBoundLatitude.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_geographicBoundingBox_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class EX_geographicBoundingBox_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EX_geographicBoundingBox _eX_GeographicBoundingBox;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public EX_geographicBoundingBox_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_geographicBoundingBox), ElementName = "EX_geographicBoundingBox",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_geographicBoundingBox EX_geographicBoundingBox
        {
            get { return _eX_GeographicBoundingBox; }
            set { _eX_GeographicBoundingBox = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EX_geographicBoundingBox.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_spatialTemporalExtent_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_spatialTemporalExtent_Type : EX_temporalExtent_Type
    {
        [XmlIgnore] private List<EX_geographicExtent_PropertyType> _spatialExtent;

        [XmlIgnore]
        public EX_geographicExtent_PropertyType this[int index]
        {
            get { return SpatialExtent[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return SpatialExtent.Count; }
        }

        [XmlElement(Type = typeof (EX_geographicExtent_PropertyType), ElementName = "spatialExtent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_geographicExtent_PropertyType> SpatialExtent
        {
            get
            {
                if (_spatialExtent == null) _spatialExtent = new List<EX_geographicExtent_PropertyType>();
                return _spatialExtent;
            }
            set { _spatialExtent = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return SpatialExtent.GetEnumerator();
        }

        public void Add(EX_geographicExtent_PropertyType obj)
        {
            SpatialExtent.Add(obj);
        }

        public void Clear()
        {
            SpatialExtent.Clear();
        }

        public EX_geographicExtent_PropertyType Remove(Int32 index)
        {
            EX_geographicExtent_PropertyType obj = SpatialExtent[index];
            SpatialExtent.Remove(obj);
            return obj;
        }

        public bool Remove(EX_geographicExtent_PropertyType obj)
        {
            return SpatialExtent.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (EX_geographicExtent_PropertyType _c in SpatialExtent) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_spatialTemporalExtent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class EX_spatialTemporalExtent_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EX_spatialTemporalExtent _eX_SpatialTemporalExtent;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public EX_spatialTemporalExtent_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_spatialTemporalExtent), ElementName = "EX_spatialTemporalExtent",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_spatialTemporalExtent EX_spatialTemporalExtent
        {
            get { return _eX_SpatialTemporalExtent; }
            set { _eX_SpatialTemporalExtent = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EX_spatialTemporalExtent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_geographicDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_geographicDescription_Type : AbstractEX_geographicExtent_Type
    {
        [XmlIgnore] private MD_identifier_PropertyType _geographicIdentifier;

        [XmlElement(Type = typeof (MD_identifier_PropertyType), ElementName = "geographicIdentifier", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_identifier_PropertyType GeographicIdentifier
        {
            get { return _geographicIdentifier; }
            set { _geographicIdentifier = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            GeographicIdentifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_geographicDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class EX_geographicDescription_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EX_geographicDescription _eX_GeographicDescription;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public EX_geographicDescription_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_geographicDescription), ElementName = "EX_geographicDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_geographicDescription EX_geographicDescription
        {
            get { return _eX_GeographicDescription; }
            set { _eX_GeographicDescription = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EX_geographicDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RS_identifier_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class RS_identifier_Type : MD_identifier_Type
    {
        [XmlIgnore] private CharacterStringPropertyType _codeSpace;

        [XmlIgnore] private CharacterStringPropertyType _version;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "codeSpace", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType CodeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "version", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Version
        {
            get { return _version; }
            set { _version = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RS_identifier_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class RS_identifier_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private RS_identifier _rS_Identifier;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public RS_identifier_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (RS_identifier), ElementName = "RS_identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RS_identifier RS_identifier
        {
            get { return _rS_Identifier; }
            set { _rS_Identifier = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            RS_identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_referenceSystem_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_referenceSystem_Type : AbstractObjectType
    {
        [XmlIgnore] private RS_identifier_PropertyType _referenceSystemIdentifier;

        [XmlElement(Type = typeof (RS_identifier_PropertyType), ElementName = "referenceSystemIdentifier",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RS_identifier_PropertyType ReferenceSystemIdentifier
        {
            get { return _referenceSystemIdentifier; }
            set { _referenceSystemIdentifier = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_referenceSystem_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class MD_referenceSystem_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_referenceSystem _mD_ReferenceSystem;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_referenceSystem_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_referenceSystem), ElementName = "MD_referenceSystem", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_referenceSystem MD_referenceSystem
        {
            get { return _mD_ReferenceSystem; }
            set { _mD_ReferenceSystem = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_referenceSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_identifier_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_identifier_Type : AbstractObjectType
    {
        [XmlIgnore] private CI_citation_PropertyType _authority;

        [XmlIgnore] private CharacterStringPropertyType _code;

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "authority", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation_PropertyType Authority
        {
            get { return _authority; }
            set { _authority = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "code", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Code
        {
            get { return _code; }
            set { _code = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Code.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_identifier_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_identifier_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_identifier _mD_Identifier;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_identifier_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_identifier), ElementName = "MD_identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_identifier MD_identifier
        {
            get { return _mD_Identifier; }
            set { _mD_Identifier = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractRS_referenceSystem_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public abstract class AbstractRS_referenceSystem_Type : AbstractObjectType
    {
        [XmlIgnore] private List<EX_extent_PropertyType> _domainOfValidity;
        [XmlIgnore] private RS_identifier_PropertyType _name;

        [XmlElement(Type = typeof (RS_identifier_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RS_identifier_PropertyType Name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (EX_extent_PropertyType), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_extent_PropertyType> DomainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new List<EX_extent_PropertyType>();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Name.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RS_referenceSystem_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class RS_referenceSystem_PropertyType
    {
        [XmlIgnore] private AbstractRS_referenceSystem _abstractRS_ReferenceSystem;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public RS_referenceSystem_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractRS_referenceSystem), ElementName = "AbstractRS_referenceSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractRS_referenceSystem AbstractRS_referenceSystem
        {
            get { return _abstractRS_ReferenceSystem; }
            set { _abstractRS_ReferenceSystem = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractRS_referenceSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_responsibleParty_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_responsibleParty_Type : AbstractObjectType
    {
        [XmlIgnore] private CI_contact_PropertyType _contactInfo;
        [XmlIgnore] private CharacterStringPropertyType _individualName;

        [XmlIgnore] private CharacterStringPropertyType _organisationName;

        [XmlIgnore] private CharacterStringPropertyType _positionName;
        [XmlIgnore] private CI_roleCode_PropertyType _role;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "individualName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType IndividualName
        {
            get { return _individualName; }
            set { _individualName = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "organisationName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType OrganisationName
        {
            get { return _organisationName; }
            set { _organisationName = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "positionName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType PositionName
        {
            get { return _positionName; }
            set { _positionName = value; }
        }

        [XmlElement(Type = typeof (CI_contact_PropertyType), ElementName = "contactInfo", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_contact_PropertyType ContactInfo
        {
            get { return _contactInfo; }
            set { _contactInfo = value; }
        }

        [XmlElement(Type = typeof (CI_roleCode_PropertyType), ElementName = "role", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_roleCode_PropertyType Role
        {
            get { return _role; }
            set { _role = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Role.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_responsibleParty_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class CI_responsibleParty_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_responsibleParty _cI_ResponsibleParty;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public CI_responsibleParty_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty), ElementName = "CI_responsibleParty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_responsibleParty CI_responsibleParty
        {
            get { return _cI_ResponsibleParty; }
            set { _cI_ResponsibleParty = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_responsibleParty.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_citation_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_citation_Type : AbstractObjectType
    {
        [XmlIgnore] private List<CharacterStringPropertyType> _alternateTitle;
        [XmlIgnore] private List<CI_responsibleParty_PropertyType> _citedResponsibleParty;
        [XmlIgnore] private CharacterStringPropertyType _collectiveTitle;
        [XmlIgnore] private List<CI_date_PropertyType> _date;
        [XmlIgnore] private CharacterStringPropertyType _edition;
        [XmlIgnore] private DatePropertyType _editionDate;
        [XmlIgnore] private List<MD_identifier_PropertyType> _identifier;
        [XmlIgnore] private CharacterStringPropertyType _iSBN;
        [XmlIgnore] private CharacterStringPropertyType _iSSN;
        [XmlIgnore] private CharacterStringPropertyType _otherCitationDetails;
        [XmlIgnore] private List<CI_presentationFormCode_PropertyType> _presentationForm;
        [XmlIgnore] private CI_series_PropertyType _series;
        [XmlIgnore] private CharacterStringPropertyType _title;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "title", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "alternateTitle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> AlternateTitle
        {
            get
            {
                if (_alternateTitle == null) _alternateTitle = new List<CharacterStringPropertyType>();
                return _alternateTitle;
            }
            set { _alternateTitle = value; }
        }

        [XmlElement(Type = typeof (CI_date_PropertyType), ElementName = "date", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_date_PropertyType> Date
        {
            get
            {
                if (_date == null) _date = new List<CI_date_PropertyType>();
                return _date;
            }
            set { _date = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "edition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Edition
        {
            get { return _edition; }
            set { _edition = value; }
        }

        [XmlElement(Type = typeof (DatePropertyType), ElementName = "editionDate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DatePropertyType EditionDate
        {
            get { return _editionDate; }
            set { _editionDate = value; }
        }

        [XmlElement(Type = typeof (MD_identifier_PropertyType), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_identifier_PropertyType> Identifier
        {
            get
            {
                if (_identifier == null) _identifier = new List<MD_identifier_PropertyType>();
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "citedResponsibleParty",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_responsibleParty_PropertyType> CitedResponsibleParty
        {
            get
            {
                if (_citedResponsibleParty == null)
                    _citedResponsibleParty = new List<CI_responsibleParty_PropertyType>();
                return _citedResponsibleParty;
            }
            set { _citedResponsibleParty = value; }
        }

        [XmlElement(Type = typeof (CI_presentationFormCode_PropertyType), ElementName = "presentationForm",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_presentationFormCode_PropertyType> PresentationForm
        {
            get
            {
                if (_presentationForm == null) _presentationForm = new List<CI_presentationFormCode_PropertyType>();
                return _presentationForm;
            }
            set { _presentationForm = value; }
        }

        [XmlElement(Type = typeof (CI_series_PropertyType), ElementName = "series", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_series_PropertyType Series
        {
            get { return _series; }
            set { _series = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "otherCitationDetails",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType OtherCitationDetails
        {
            get { return _otherCitationDetails; }
            set { _otherCitationDetails = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "collectiveTitle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType CollectiveTitle
        {
            get { return _collectiveTitle; }
            set { _collectiveTitle = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "ISBN", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ISBN
        {
            get { return _iSBN; }
            set { _iSBN = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "ISSN", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ISSN
        {
            get { return _iSSN; }
            set { _iSSN = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Title.MakeSchemaCompliant();
            foreach (CI_date_PropertyType _c in Date) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_citation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_citation_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_citation _cI_Citation;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public CI_citation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_citation), ElementName = "CI_citation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation CI_citation
        {
            get { return _cI_Citation; }
            set { _cI_Citation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_citation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_address_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_address_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _administrativeArea;
        [XmlIgnore] private CharacterStringPropertyType _city;
        [XmlIgnore] private CharacterStringPropertyType _country;
        [XmlIgnore] private List<CharacterStringPropertyType> _deliveryPoint;
        [XmlIgnore] private List<CharacterStringPropertyType> _electronicMailAddress;
        [XmlIgnore] private CharacterStringPropertyType _postalCode;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "deliveryPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> DeliveryPoint
        {
            get
            {
                if (_deliveryPoint == null) _deliveryPoint = new List<CharacterStringPropertyType>();
                return _deliveryPoint;
            }
            set { _deliveryPoint = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "city", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType City
        {
            get { return _city; }
            set { _city = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "administrativeArea", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType AdministrativeArea
        {
            get { return _administrativeArea; }
            set { _administrativeArea = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "postalCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType PostalCode
        {
            get { return _postalCode; }
            set { _postalCode = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "country", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Country
        {
            get { return _country; }
            set { _country = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "electronicMailAddress",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> ElectronicMailAddress
        {
            get
            {
                if (_electronicMailAddress == null) _electronicMailAddress = new List<CharacterStringPropertyType>();
                return _electronicMailAddress;
            }
            set { _electronicMailAddress = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_address_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_address_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_address _cI_Address;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public CI_address_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_address), ElementName = "CI_address", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_address CI_address
        {
            get { return _cI_Address; }
            set { _cI_Address = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_address.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_onlineResource_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_onlineResource_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _applicationProfile;
        [XmlIgnore] private CharacterStringPropertyType _description;
        [XmlIgnore] private CI_onLineFunctionCode_PropertyType _function;
        [XmlIgnore] private URLPropertyType _linkage;
        [XmlIgnore] private CharacterStringPropertyType _name;

        [XmlIgnore] private CharacterStringPropertyType _protocol;

        [XmlElement(Type = typeof (URLPropertyType), ElementName = "linkage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public URLPropertyType Linkage
        {
            get { return _linkage; }
            set { _linkage = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "protocol", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Protocol
        {
            get { return _protocol; }
            set { _protocol = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "applicationProfile", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ApplicationProfile
        {
            get { return _applicationProfile; }
            set { _applicationProfile = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (CI_onLineFunctionCode_PropertyType), ElementName = "function", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_onLineFunctionCode_PropertyType Function
        {
            get { return _function; }
            set { _function = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Linkage.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_onlineResource_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_onlineResource_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_onlineResource _cI_OnlineResource;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public CI_onlineResource_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_onlineResource), ElementName = "CI_onlineResource", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_onlineResource CI_onlineResource
        {
            get { return _cI_OnlineResource; }
            set { _cI_OnlineResource = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_onlineResource.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_contact_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_contact_Type : AbstractObjectType
    {
        [XmlIgnore] private CI_address_PropertyType _address;
        [XmlIgnore] private CharacterStringPropertyType _contactInstructions;
        [XmlIgnore] private CharacterStringPropertyType _hoursOfService;
        [XmlIgnore] private CI_onlineResource_PropertyType _onlineResource;
        [XmlIgnore] private CI_telephone_PropertyType _phone;

        [XmlElement(Type = typeof (CI_telephone_PropertyType), ElementName = "phone", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_telephone_PropertyType Phone
        {
            get { return _phone; }
            set { _phone = value; }
        }

        [XmlElement(Type = typeof (CI_address_PropertyType), ElementName = "address", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_address_PropertyType Address
        {
            get { return _address; }
            set { _address = value; }
        }

        [XmlElement(Type = typeof (CI_onlineResource_PropertyType), ElementName = "onlineResource", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_onlineResource_PropertyType OnlineResource
        {
            get { return _onlineResource; }
            set { _onlineResource = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "hoursOfService", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType HoursOfService
        {
            get { return _hoursOfService; }
            set { _hoursOfService = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "contactInstructions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ContactInstructions
        {
            get { return _contactInstructions; }
            set { _contactInstructions = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_contact_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_contact_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_contact _cI_Contact;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public CI_contact_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_contact), ElementName = "CI_contact", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_contact CI_contact
        {
            get { return _cI_Contact; }
            set { _cI_Contact = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_contact.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_telephone_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_telephone_Type : AbstractObjectType
    {
        [XmlIgnore] private List<CharacterStringPropertyType> _facsimile;
        [XmlIgnore] private List<CharacterStringPropertyType> _voice;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "voice", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> Voice
        {
            get
            {
                if (_voice == null) _voice = new List<CharacterStringPropertyType>();
                return _voice;
            }
            set { _voice = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "facsimile", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> Facsimile
        {
            get
            {
                if (_facsimile == null) _facsimile = new List<CharacterStringPropertyType>();
                return _facsimile;
            }
            set { _facsimile = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_telephone_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_telephone_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_telephone _cI_Telephone;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public CI_telephone_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_telephone), ElementName = "CI_telephone", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_telephone CI_telephone
        {
            get { return _cI_Telephone; }
            set { _cI_Telephone = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_telephone.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_date_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_date_Type : AbstractObjectType
    {
        [XmlIgnore] private DatePropertyType _date;

        [XmlIgnore] private CI_dateTypeCode_PropertyType _dateType;

        [XmlElement(Type = typeof (DatePropertyType), ElementName = "date", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DatePropertyType Date
        {
            get { return _date; }
            set { _date = value; }
        }

        [XmlElement(Type = typeof (CI_dateTypeCode_PropertyType), ElementName = "dateType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_dateTypeCode_PropertyType DateType
        {
            get { return _dateType; }
            set { _dateType = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Date.MakeSchemaCompliant();
            DateType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_date_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_date_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_date _cI_Date;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public CI_date_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_date), ElementName = "CI_date", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_date CI_date
        {
            get { return _cI_Date; }
            set { _cI_Date = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_date.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_series_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_series_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _issueIdentification;
        [XmlIgnore] private CharacterStringPropertyType _name;
        [XmlIgnore] private CharacterStringPropertyType _page;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "issueIdentification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType IssueIdentification
        {
            get { return _issueIdentification; }
            set { _issueIdentification = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "page", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Page
        {
            get { return _page; }
            set { _page = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_series_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_series_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_series _cI_Series;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public CI_series_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_series), ElementName = "CI_series", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_series CI_series
        {
            get { return _cI_Series; }
            set { _cI_Series = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_series.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "URL_propertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class URLPropertyType
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private String _uRL;

        public URLPropertyType()
        {
            URL = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "URL", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public String URL
        {
            get { return _uRL; }
            set { _uRL = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CI_roleCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_roleCode_PropertyType
    {
        [XmlIgnore] private CI_roleCode _cI_RoleCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_roleCode), ElementName = "CI_roleCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_roleCode CI_roleCode
        {
            get { return _cI_RoleCode; }
            set { _cI_RoleCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_roleCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_presentationFormCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class CI_presentationFormCode_PropertyType
    {
        [XmlIgnore] private CI_presentationFormCode _cI_PresentationFormCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_presentationFormCode), ElementName = "CI_presentationFormCode", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_presentationFormCode CI_presentationFormCode
        {
            get { return _cI_PresentationFormCode; }
            set { _cI_PresentationFormCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_presentationFormCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_onLineFunctionCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class CI_onLineFunctionCode_PropertyType
    {
        [XmlIgnore] private CI_onLineFunctionCode _cI_OnLineFunctionCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_onLineFunctionCode), ElementName = "CI_onLineFunctionCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_onLineFunctionCode CI_onLineFunctionCode
        {
            get { return _cI_OnLineFunctionCode; }
            set { _cI_OnLineFunctionCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_onLineFunctionCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_dateTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_dateTypeCode_PropertyType
    {
        [XmlIgnore] private CI_dateTypeCode _cI_DateTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_dateTypeCode), ElementName = "CI_dateTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_dateTypeCode CI_dateTypeCode
        {
            get { return _cI_DateTypeCode; }
            set { _cI_DateTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_dateTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_gridSpatialRepresentation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_gridSpatialRepresentation_Type : AbstractMD_spatialRepresentation_Type
    {
        [XmlIgnore] private List<MD_dimension_PropertyType> _axisDimensionProperties;
        [XmlIgnore] private MD_cellGeometryCode_PropertyType _cellGeometry;
        [XmlIgnore] private IntegerPropertyType _numberOfDimensions;
        [XmlIgnore] private BooleanPropertyType _transformationParameterAvailability;

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "numberOfDimensions", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType NumberOfDimensions
        {
            get { return _numberOfDimensions; }
            set { _numberOfDimensions = value; }
        }

        [XmlElement(Type = typeof (MD_dimension_PropertyType), ElementName = "axisDimensionProperties",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_dimension_PropertyType> AxisDimensionProperties
        {
            get
            {
                if (_axisDimensionProperties == null) _axisDimensionProperties = new List<MD_dimension_PropertyType>();
                return _axisDimensionProperties;
            }
            set { _axisDimensionProperties = value; }
        }

        [XmlElement(Type = typeof (MD_cellGeometryCode_PropertyType), ElementName = "cellGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_cellGeometryCode_PropertyType CellGeometry
        {
            get { return _cellGeometry; }
            set { _cellGeometry = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "transformationParameterAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType TransformationParameterAvailability
        {
            get { return _transformationParameterAvailability; }
            set { _transformationParameterAvailability = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            NumberOfDimensions.MakeSchemaCompliant();
            CellGeometry.MakeSchemaCompliant();
            TransformationParameterAvailability.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_gridSpatialRepresentation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_gridSpatialRepresentation_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_gridSpatialRepresentation _mD_GridSpatialRepresentation;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_gridSpatialRepresentation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_gridSpatialRepresentation), ElementName = "MD_gridSpatialRepresentation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_gridSpatialRepresentation MD_gridSpatialRepresentation
        {
            get { return _mD_GridSpatialRepresentation; }
            set { _mD_GridSpatialRepresentation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_gridSpatialRepresentation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_vectorSpatialRepresentation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_vectorSpatialRepresentation_Type : AbstractMD_spatialRepresentation_Type
    {
        [XmlIgnore] private List<MD_geometricObjects_PropertyType> _geometricObjects;
        [XmlIgnore] private MD_topologyLevelCode_PropertyType _topologyLevel;

        [XmlElement(Type = typeof (MD_topologyLevelCode_PropertyType), ElementName = "topologyLevel", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_topologyLevelCode_PropertyType TopologyLevel
        {
            get { return _topologyLevel; }
            set { _topologyLevel = value; }
        }

        [XmlElement(Type = typeof (MD_geometricObjects_PropertyType), ElementName = "geometricObjects",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_geometricObjects_PropertyType> GeometricObjects
        {
            get
            {
                if (_geometricObjects == null) _geometricObjects = new List<MD_geometricObjects_PropertyType>();
                return _geometricObjects;
            }
            set { _geometricObjects = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_vectorSpatialRepresentation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_vectorSpatialRepresentation_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_vectorSpatialRepresentation _mD_VectorSpatialRepresentation;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_vectorSpatialRepresentation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_vectorSpatialRepresentation), ElementName = "MD_vectorSpatialRepresentation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_vectorSpatialRepresentation MD_vectorSpatialRepresentation
        {
            get { return _mD_VectorSpatialRepresentation; }
            set { _mD_VectorSpatialRepresentation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_vectorSpatialRepresentation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractMD_spatialRepresentation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractMD_spatialRepresentation_Type : AbstractObjectType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_spatialRepresentation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (MD_gridSpatialRepresentation_Type))]
    [XmlInclude(typeof (MD_vectorSpatialRepresentation_Type))]
    public class MD_spatialRepresentation_PropertyType
    {
        [XmlIgnore] private AbstractMD_spatialRepresentation _abstractMD_SpatialRepresentation;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_spatialRepresentation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractMD_spatialRepresentation), ElementName = "AbstractMD_spatialRepresentation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractMD_spatialRepresentation AbstractMD_spatialRepresentation
        {
            get { return _abstractMD_SpatialRepresentation; }
            set { _abstractMD_SpatialRepresentation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractMD_spatialRepresentation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_georeferenceable_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_georeferenceable_Type : MD_gridSpatialRepresentation_Type
    {
        [XmlIgnore] private BooleanPropertyType _controlPointAvailability;
        [XmlIgnore] private RecordPropertyType _georeferencedParameters;

        [XmlIgnore] private BooleanPropertyType _orientationParameterAvailability;

        [XmlIgnore] private CharacterStringPropertyType _orientationParameterDescription;
        [XmlIgnore] private List<CI_citation_PropertyType> _parameterCitation;

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "controlPointAvailability", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType ControlPointAvailability
        {
            get { return _controlPointAvailability; }
            set { _controlPointAvailability = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "orientationParameterAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType OrientationParameterAvailability
        {
            get { return _orientationParameterAvailability; }
            set { _orientationParameterAvailability = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "orientationParameterDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType OrientationParameterDescription
        {
            get { return _orientationParameterDescription; }
            set { _orientationParameterDescription = value; }
        }

        [XmlElement(Type = typeof (RecordPropertyType), ElementName = "georeferencedParameters", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RecordPropertyType GeoreferencedParameters
        {
            get { return _georeferencedParameters; }
            set { _georeferencedParameters = value; }
        }

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "parameterCitation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_citation_PropertyType> ParameterCitation
        {
            get
            {
                if (_parameterCitation == null) _parameterCitation = new List<CI_citation_PropertyType>();
                return _parameterCitation;
            }
            set { _parameterCitation = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            ControlPointAvailability.MakeSchemaCompliant();
            OrientationParameterAvailability.MakeSchemaCompliant();
            GeoreferencedParameters.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_georeferenceable_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_georeferenceable_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_georeferenceable _mD_Georeferenceable;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_georeferenceable_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_georeferenceable), ElementName = "MD_georeferenceable", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_georeferenceable MD_georeferenceable
        {
            get { return _mD_Georeferenceable; }
            set { _mD_Georeferenceable = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_georeferenceable.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_dimension_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_dimension_Type : AbstractObjectType
    {
        [XmlIgnore] private MD_dimensionNameTypeCode_PropertyType _dimensionName;

        [XmlIgnore] private IntegerPropertyType _dimensionSize;

        [XmlIgnore] private MeasurePropertyType _resolution;

        [XmlElement(Type = typeof (MD_dimensionNameTypeCode_PropertyType), ElementName = "dimensionName",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_dimensionNameTypeCode_PropertyType DimensionName
        {
            get { return _dimensionName; }
            set { _dimensionName = value; }
        }

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "dimensionSize", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType DimensionSize
        {
            get { return _dimensionSize; }
            set { _dimensionSize = value; }
        }

        [XmlElement(Type = typeof (MeasurePropertyType), ElementName = "resolution", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MeasurePropertyType Resolution
        {
            get { return _resolution; }
            set { _resolution = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            DimensionName.MakeSchemaCompliant();
            DimensionSize.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_dimension_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_dimension_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_dimension _mD_Dimension;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_dimension_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_dimension), ElementName = "MD_dimension", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_dimension MD_dimension
        {
            get { return _mD_Dimension; }
            set { _mD_Dimension = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_dimension.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_georectified_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_georectified_Type : MD_gridSpatialRepresentation_Type
    {
        [XmlIgnore] private GM_point_PropertyType _centerPoint;
        [XmlIgnore] private BooleanPropertyType _checkPointAvailability;

        [XmlIgnore] private CharacterStringPropertyType _checkPointDescription;

        [XmlIgnore] private List<GM_point_PropertyType> _cornerPoints;
        [XmlIgnore] private MD_pixelOrientationCode_PropertyType _pointInPixel;
        [XmlIgnore] private CharacterStringPropertyType _transformationDimensionDescription;
        [XmlIgnore] private List<CharacterStringPropertyType> _transformationDimensionMapping;

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "checkPointAvailability", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType CheckPointAvailability
        {
            get { return _checkPointAvailability; }
            set { _checkPointAvailability = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "checkPointDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType CheckPointDescription
        {
            get { return _checkPointDescription; }
            set { _checkPointDescription = value; }
        }

        [XmlElement(Type = typeof (GM_point_PropertyType), ElementName = "cornerPoints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<GM_point_PropertyType> CornerPoints
        {
            get
            {
                if (_cornerPoints == null) _cornerPoints = new List<GM_point_PropertyType>();
                return _cornerPoints;
            }
            set { _cornerPoints = value; }
        }

        [XmlElement(Type = typeof (GM_point_PropertyType), ElementName = "centerPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public GM_point_PropertyType CenterPoint
        {
            get { return _centerPoint; }
            set { _centerPoint = value; }
        }

        [XmlElement(Type = typeof (MD_pixelOrientationCode_PropertyType), ElementName = "pointInPixel",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_pixelOrientationCode_PropertyType PointInPixel
        {
            get { return _pointInPixel; }
            set { _pointInPixel = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "transformationDimensionDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType TransformationDimensionDescription
        {
            get { return _transformationDimensionDescription; }
            set { _transformationDimensionDescription = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "transformationDimensionMapping",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> TransformationDimensionMapping
        {
            get
            {
                if (_transformationDimensionMapping == null)
                    _transformationDimensionMapping = new List<CharacterStringPropertyType>();
                return _transformationDimensionMapping;
            }
            set { _transformationDimensionMapping = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            CheckPointAvailability.MakeSchemaCompliant();
            PointInPixel.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_georectified_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_georectified_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_georectified _mD_Georectified;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_georectified_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_georectified), ElementName = "MD_georectified", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_georectified MD_georectified
        {
            get { return _mD_Georectified; }
            set { _mD_Georectified = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_georectified.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_geometricObjects_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_geometricObjects_Type : AbstractObjectType
    {
        [XmlIgnore] private IntegerPropertyType _geometricObjectCount;
        [XmlIgnore] private MD_geometricObjectTypeCode_PropertyType _geometricObjectType;

        [XmlElement(Type = typeof (MD_geometricObjectTypeCode_PropertyType), ElementName = "geometricObjectType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_geometricObjectTypeCode_PropertyType GeometricObjectType
        {
            get { return _geometricObjectType; }
            set { _geometricObjectType = value; }
        }

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "geometricObjectCount", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType GeometricObjectCount
        {
            get { return _geometricObjectCount; }
            set { _geometricObjectCount = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            GeometricObjectType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_geometricObjects_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_geometricObjects_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_geometricObjects _mD_GeometricObjects;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_geometricObjects_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_geometricObjects), ElementName = "MD_geometricObjects", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_geometricObjects MD_geometricObjects
        {
            get { return _mD_GeometricObjects; }
            set { _mD_GeometricObjects = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_geometricObjects.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_pixelOrientationCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_pixelOrientationCode_PropertyType
    {
        [XmlIgnore] private MD_pixelOrientationCode_Type _mD_PixelOrientationCode;

        [XmlIgnore] public bool MD_PixelOrientationCodeSpecified;
        [XmlIgnore] private String _nilReason;


        public MD_pixelOrientationCode_PropertyType()
        {
            MD_PixelOrientationCodeSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "MD_pixelOrientationCode", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_pixelOrientationCode_Type MD_pixelOrientationCode
        {
            get { return _mD_PixelOrientationCode; }
            set
            {
                _mD_PixelOrientationCode = value;
                MD_PixelOrientationCodeSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MD_topologyLevelCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_topologyLevelCode_PropertyType
    {
        [XmlIgnore] private MD_topologyLevelCode _mD_TopologyLevelCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_topologyLevelCode), ElementName = "MD_topologyLevelCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_topologyLevelCode MD_topologyLevelCode
        {
            get { return _mD_TopologyLevelCode; }
            set { _mD_TopologyLevelCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_topologyLevelCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_geometricObjectTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_geometricObjectTypeCode_PropertyType
    {
        [XmlIgnore] private MD_geometricObjectTypeCode _mD_GeometricObjectTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_geometricObjectTypeCode), ElementName = "MD_geometricObjectTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_geometricObjectTypeCode MD_geometricObjectTypeCode
        {
            get { return _mD_GeometricObjectTypeCode; }
            set { _mD_GeometricObjectTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_geometricObjectTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_cellGeometryCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_cellGeometryCode_PropertyType
    {
        [XmlIgnore] private MD_cellGeometryCode _mD_CellGeometryCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_cellGeometryCode), ElementName = "MD_cellGeometryCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_cellGeometryCode MD_cellGeometryCode
        {
            get { return _mD_CellGeometryCode; }
            set { _mD_CellGeometryCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_cellGeometryCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_dimensionNameTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_dimensionNameTypeCode_PropertyType
    {
        [XmlIgnore] private MD_dimensionNameTypeCode _mD_DimensionNameTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_dimensionNameTypeCode), ElementName = "MD_dimensionNameTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_dimensionNameTypeCode MD_dimensionNameTypeCode
        {
            get { return _mD_DimensionNameTypeCode; }
            set { _mD_DimensionNameTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_dimensionNameTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_extendedElementInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_extendedElementInformation_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _condition;
        [XmlIgnore] private MD_datatypeCode_PropertyType _dataType;
        [XmlIgnore] private CharacterStringPropertyType _definition;
        [XmlIgnore] private IntegerPropertyType _domainCode;
        [XmlIgnore] private CharacterStringPropertyType _domainValue;
        [XmlIgnore] private CharacterStringPropertyType _maximumOccurrence;
        [XmlIgnore] private CharacterStringPropertyType _name;
        [XmlIgnore] private MD_obligationCode_PropertyType _obligation;
        [XmlIgnore] private List<CharacterStringPropertyType> _parentEntity;
        [XmlIgnore] private List<CharacterStringPropertyType> _rationale;
        [XmlIgnore] private CharacterStringPropertyType _rule;

        [XmlIgnore] private CharacterStringPropertyType _shortName;
        [XmlIgnore] private List<CI_responsibleParty_PropertyType> _source;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "shortName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ShortName
        {
            get { return _shortName; }
            set { _shortName = value; }
        }

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "domainCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType DomainCode
        {
            get { return _domainCode; }
            set { _domainCode = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "definition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Definition
        {
            get { return _definition; }
            set { _definition = value; }
        }

        [XmlElement(Type = typeof (MD_obligationCode_PropertyType), ElementName = "obligation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_obligationCode_PropertyType Obligation
        {
            get { return _obligation; }
            set { _obligation = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "condition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Condition
        {
            get { return _condition; }
            set { _condition = value; }
        }

        [XmlElement(Type = typeof (MD_datatypeCode_PropertyType), ElementName = "dataType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_datatypeCode_PropertyType DataType
        {
            get { return _dataType; }
            set { _dataType = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "maximumOccurrence", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType MaximumOccurrence
        {
            get { return _maximumOccurrence; }
            set { _maximumOccurrence = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "domainValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType DomainValue
        {
            get { return _domainValue; }
            set { _domainValue = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "parentEntity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> ParentEntity
        {
            get
            {
                if (_parentEntity == null) _parentEntity = new List<CharacterStringPropertyType>();
                return _parentEntity;
            }
            set { _parentEntity = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "rule", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Rule
        {
            get { return _rule; }
            set { _rule = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "rationale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> Rationale
        {
            get
            {
                if (_rationale == null) _rationale = new List<CharacterStringPropertyType>();
                return _rationale;
            }
            set { _rationale = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "source", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_responsibleParty_PropertyType> Source
        {
            get
            {
                if (_source == null) _source = new List<CI_responsibleParty_PropertyType>();
                return _source;
            }
            set { _source = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Name.MakeSchemaCompliant();
            Definition.MakeSchemaCompliant();
            DataType.MakeSchemaCompliant();
            foreach (CharacterStringPropertyType _c in ParentEntity) _c.MakeSchemaCompliant();
            Rule.MakeSchemaCompliant();
            foreach (CI_responsibleParty_PropertyType _c in Source) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_extendedElementInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_extendedElementInformation_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_extendedElementInformation _mD_ExtendedElementInformation;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_extendedElementInformation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_extendedElementInformation), ElementName = "MD_extendedElementInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_extendedElementInformation MD_extendedElementInformation
        {
            get { return _mD_ExtendedElementInformation; }
            set { _mD_ExtendedElementInformation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_extendedElementInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_metadataExtensionInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_metadataExtensionInformation_Type : AbstractObjectType
    {
        [XmlIgnore] private List<MD_extendedElementInformation_PropertyType> _extendedElementInformation;
        [XmlIgnore] private CI_onlineResource_PropertyType _extensionOnLineResource;

        [XmlElement(Type = typeof (CI_onlineResource_PropertyType), ElementName = "extensionOnLineResource",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_onlineResource_PropertyType ExtensionOnLineResource
        {
            get { return _extensionOnLineResource; }
            set { _extensionOnLineResource = value; }
        }

        [XmlElement(Type = typeof (MD_extendedElementInformation_PropertyType),
            ElementName = "extendedElementInformation", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_extendedElementInformation_PropertyType> ExtendedElementInformation
        {
            get
            {
                if (_extendedElementInformation == null)
                    _extendedElementInformation = new List<MD_extendedElementInformation_PropertyType>();
                return _extendedElementInformation;
            }
            set { _extendedElementInformation = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_metadataExtensionInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_metadataExtensionInformation_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_metadataExtensionInformation _mD_MetadataExtensionInformation;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_metadataExtensionInformation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_metadataExtensionInformation), ElementName = "MD_metadataExtensionInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_metadataExtensionInformation MD_metadataExtensionInformation
        {
            get { return _mD_MetadataExtensionInformation; }
            set { _mD_MetadataExtensionInformation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_metadataExtensionInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_obligationCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_obligationCode_PropertyType
    {
        [XmlIgnore] private MD_obligationCode_Type _mD_ObligationCode;

        [XmlIgnore] public bool MD_ObligationCodeSpecified;
        [XmlIgnore] private String _nilReason;


        public MD_obligationCode_PropertyType()
        {
            MD_ObligationCodeSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "MD_obligationCode", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_obligationCode_Type MD_obligationCode
        {
            get { return _mD_ObligationCode; }
            set
            {
                _mD_ObligationCode = value;
                MD_ObligationCodeSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MD_datatypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_datatypeCode_PropertyType
    {
        [XmlIgnore] private MD_datatypeCode _mD_DatatypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_datatypeCode), ElementName = "MD_datatypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_datatypeCode MD_datatypeCode
        {
            get { return _mD_DatatypeCode; }
            set { _mD_DatatypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_datatypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_featureCatalogueDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_featureCatalogueDescription_Type : AbstractMD_contentInformation_Type
    {
        [XmlIgnore] private BooleanPropertyType _complianceCode;
        [XmlIgnore] private List<CI_citation_PropertyType> _featureCatalogueCitation;
        [XmlIgnore] private List<GenericNamePropertyType> _featureTypes;
        [XmlIgnore] private BooleanPropertyType _includedWithDataset;

        [XmlIgnore] private List<CharacterStringPropertyType> _language;

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "complianceCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType ComplianceCode
        {
            get { return _complianceCode; }
            set { _complianceCode = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "language", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> Language
        {
            get
            {
                if (_language == null) _language = new List<CharacterStringPropertyType>();
                return _language;
            }
            set { _language = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "includedWithDataset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType IncludedWithDataset
        {
            get { return _includedWithDataset; }
            set { _includedWithDataset = value; }
        }

        [XmlElement(Type = typeof (GenericNamePropertyType), ElementName = "featureTypes", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<GenericNamePropertyType> FeatureTypes
        {
            get
            {
                if (_featureTypes == null) _featureTypes = new List<GenericNamePropertyType>();
                return _featureTypes;
            }
            set { _featureTypes = value; }
        }

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "featureCatalogueCitation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_citation_PropertyType> FeatureCatalogueCitation
        {
            get
            {
                if (_featureCatalogueCitation == null) _featureCatalogueCitation = new List<CI_citation_PropertyType>();
                return _featureCatalogueCitation;
            }
            set { _featureCatalogueCitation = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            IncludedWithDataset.MakeSchemaCompliant();
            foreach (CI_citation_PropertyType _c in FeatureCatalogueCitation) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_featureCatalogueDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_featureCatalogueDescription_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_featureCatalogueDescription _mD_FeatureCatalogueDescription;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_featureCatalogueDescription_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_featureCatalogueDescription), ElementName = "MD_featureCatalogueDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_featureCatalogueDescription MD_featureCatalogueDescription
        {
            get { return _mD_FeatureCatalogueDescription; }
            set { _mD_FeatureCatalogueDescription = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_featureCatalogueDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_coverageDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_coverageDescription_Type : AbstractMD_contentInformation_Type
    {
        [XmlIgnore] private RecordTypePropertyType _attributeDescription;

        [XmlIgnore] private MD_coverageContentTypeCode_PropertyType _contentType;

        [XmlIgnore] private List<MD_rangeDimension_PropertyType> _dimension;

        [XmlElement(Type = typeof (RecordTypePropertyType), ElementName = "attributeDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RecordTypePropertyType AttributeDescription
        {
            get { return _attributeDescription; }
            set { _attributeDescription = value; }
        }

        [XmlElement(Type = typeof (MD_coverageContentTypeCode_PropertyType), ElementName = "contentType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_coverageContentTypeCode_PropertyType ContentType
        {
            get { return _contentType; }
            set { _contentType = value; }
        }

        [XmlElement(Type = typeof (MD_rangeDimension_PropertyType), ElementName = "dimension", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_rangeDimension_PropertyType> Dimension
        {
            get
            {
                if (_dimension == null) _dimension = new List<MD_rangeDimension_PropertyType>();
                return _dimension;
            }
            set { _dimension = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            AttributeDescription.MakeSchemaCompliant();
            ContentType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_coverageDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_coverageDescription_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_coverageDescription _mD_CoverageDescription;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_coverageDescription_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_coverageDescription), ElementName = "MD_coverageDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_coverageDescription MD_coverageDescription
        {
            get { return _mD_CoverageDescription; }
            set { _mD_CoverageDescription = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_coverageDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_imageDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_imageDescription_Type : MD_coverageDescription_Type
    {
        [XmlIgnore] private BooleanPropertyType _cameraCalibrationInformationAvailability;
        [XmlIgnore] private RealPropertyType _cloudCoverPercentage;
        [XmlIgnore] private IntegerPropertyType _compressionGenerationQuantity;
        [XmlIgnore] private BooleanPropertyType _filmDistortionInformationAvailability;
        [XmlIgnore] private RealPropertyType _illuminationAzimuthAngle;
        [XmlIgnore] private RealPropertyType _illuminationElevationAngle;
        [XmlIgnore] private MD_identifier_PropertyType _imageQualityCode;
        [XmlIgnore] private MD_imagingConditionCode_PropertyType _imagingCondition;
        [XmlIgnore] private BooleanPropertyType _lensDistortionInformationAvailability;
        [XmlIgnore] private MD_identifier_PropertyType _processingLevelCode;
        [XmlIgnore] private BooleanPropertyType _radiometricCalibrationDataAvailability;
        [XmlIgnore] private BooleanPropertyType _triangulationIndicator;

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "illuminationElevationAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType IlluminationElevationAngle
        {
            get { return _illuminationElevationAngle; }
            set { _illuminationElevationAngle = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "illuminationAzimuthAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType IlluminationAzimuthAngle
        {
            get { return _illuminationAzimuthAngle; }
            set { _illuminationAzimuthAngle = value; }
        }

        [XmlElement(Type = typeof (MD_imagingConditionCode_PropertyType), ElementName = "imagingCondition",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_imagingConditionCode_PropertyType ImagingCondition
        {
            get { return _imagingCondition; }
            set { _imagingCondition = value; }
        }

        [XmlElement(Type = typeof (MD_identifier_PropertyType), ElementName = "imageQualityCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_identifier_PropertyType ImageQualityCode
        {
            get { return _imageQualityCode; }
            set { _imageQualityCode = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "cloudCoverPercentage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType CloudCoverPercentage
        {
            get { return _cloudCoverPercentage; }
            set { _cloudCoverPercentage = value; }
        }

        [XmlElement(Type = typeof (MD_identifier_PropertyType), ElementName = "processingLevelCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_identifier_PropertyType ProcessingLevelCode
        {
            get { return _processingLevelCode; }
            set { _processingLevelCode = value; }
        }

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "compressionGenerationQuantity",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType CompressionGenerationQuantity
        {
            get { return _compressionGenerationQuantity; }
            set { _compressionGenerationQuantity = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "triangulationIndicator", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType TriangulationIndicator
        {
            get { return _triangulationIndicator; }
            set { _triangulationIndicator = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "radiometricCalibrationDataAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType RadiometricCalibrationDataAvailability
        {
            get { return _radiometricCalibrationDataAvailability; }
            set { _radiometricCalibrationDataAvailability = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "cameraCalibrationInformationAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType CameraCalibrationInformationAvailability
        {
            get { return _cameraCalibrationInformationAvailability; }
            set { _cameraCalibrationInformationAvailability = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "filmDistortionInformationAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType FilmDistortionInformationAvailability
        {
            get { return _filmDistortionInformationAvailability; }
            set { _filmDistortionInformationAvailability = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "lensDistortionInformationAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType LensDistortionInformationAvailability
        {
            get { return _lensDistortionInformationAvailability; }
            set { _lensDistortionInformationAvailability = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_imageDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_imageDescription_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_imageDescription _mD_ImageDescription;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_imageDescription_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_imageDescription), ElementName = "MD_imageDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_imageDescription MD_imageDescription
        {
            get { return _mD_ImageDescription; }
            set { _mD_ImageDescription = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_imageDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractMD_contentInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractMD_contentInformation_Type : AbstractObjectType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_contentInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (MD_coverageDescription_Type))]
    [XmlInclude(typeof (MD_featureCatalogueDescription_Type))]
    public class MD_contentInformation_PropertyType
    {
        [XmlIgnore] private AbstractMD_contentInformation _abstractMD_ContentInformation;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_contentInformation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractMD_contentInformation), ElementName = "AbstractMD_contentInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractMD_contentInformation AbstractMD_contentInformation
        {
            get { return _abstractMD_ContentInformation; }
            set { _abstractMD_ContentInformation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractMD_contentInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_rangeDimension_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_rangeDimension_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _descriptor;
        [XmlIgnore] private MemberNamePropertyType _sequenceIdentifier;

        [XmlElement(Type = typeof (MemberNamePropertyType), ElementName = "sequenceIdentifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MemberNamePropertyType SequenceIdentifier
        {
            get { return _sequenceIdentifier; }
            set { _sequenceIdentifier = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "descriptor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Descriptor
        {
            get { return _descriptor; }
            set { _descriptor = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_rangeDimension_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_rangeDimension_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_rangeDimension _mD_RangeDimension;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_rangeDimension_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_rangeDimension), ElementName = "MD_rangeDimension", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_rangeDimension MD_rangeDimension
        {
            get { return _mD_RangeDimension; }
            set { _mD_RangeDimension = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_rangeDimension.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_band_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_band_Type : MD_rangeDimension_Type
    {
        [XmlIgnore] private IntegerPropertyType _bitsPerValue;
        [XmlIgnore] private RealPropertyType _maxValue;

        [XmlIgnore] private RealPropertyType _minValue;
        [XmlIgnore] private RealPropertyType _offset;
        [XmlIgnore] private RealPropertyType _peakResponse;
        [XmlIgnore] private RealPropertyType _scaleFactor;
        [XmlIgnore] private IntegerPropertyType _toneGradation;

        [XmlIgnore] private UomLengthPropertyType _units;

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "maxValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType MaxValue
        {
            get { return _maxValue; }
            set { _maxValue = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "minValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType MinValue
        {
            get { return _minValue; }
            set { _minValue = value; }
        }

        [XmlElement(Type = typeof (UomLengthPropertyType), ElementName = "units", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public UomLengthPropertyType Units
        {
            get { return _units; }
            set { _units = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "peakResponse", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType PeakResponse
        {
            get { return _peakResponse; }
            set { _peakResponse = value; }
        }

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "bitsPerValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType BitsPerValue
        {
            get { return _bitsPerValue; }
            set { _bitsPerValue = value; }
        }

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "toneGradation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType ToneGradation
        {
            get { return _toneGradation; }
            set { _toneGradation = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "scaleFactor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType ScaleFactor
        {
            get { return _scaleFactor; }
            set { _scaleFactor = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "offset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType Offset
        {
            get { return _offset; }
            set { _offset = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_band_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_band_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_band _mD_Band;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_band_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_band), ElementName = "MD_band", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_band MD_band
        {
            get { return _mD_Band; }
            set { _mD_Band = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_band.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_coverageContentTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_coverageContentTypeCode_PropertyType
    {
        [XmlIgnore] private MD_coverageContentTypeCode _mD_CoverageContentTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_coverageContentTypeCode), ElementName = "MD_coverageContentTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_coverageContentTypeCode MD_coverageContentTypeCode
        {
            get { return _mD_CoverageContentTypeCode; }
            set { _mD_CoverageContentTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_coverageContentTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_imagingConditionCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_imagingConditionCode_PropertyType
    {
        [XmlIgnore] private MD_imagingConditionCode _mD_ImagingConditionCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_imagingConditionCode), ElementName = "MD_imagingConditionCode", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_imagingConditionCode MD_imagingConditionCode
        {
            get { return _mD_ImagingConditionCode; }
            set { _mD_ImagingConditionCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_imagingConditionCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_applicationSchemaInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_applicationSchemaInformation_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _constraintLanguage;
        [XmlIgnore] private BinaryPropertyType _graphicsFile;
        [XmlIgnore] private CI_citation_PropertyType _name;
        [XmlIgnore] private CharacterStringPropertyType _schemaAscii;

        [XmlIgnore] private CharacterStringPropertyType _schemaLanguage;
        [XmlIgnore] private BinaryPropertyType _softwareDevelopmentFile;
        [XmlIgnore] private CharacterStringPropertyType _softwareDevelopmentFileFormat;

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation_PropertyType Name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "schemaLanguage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType SchemaLanguage
        {
            get { return _schemaLanguage; }
            set { _schemaLanguage = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "constraintLanguage", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ConstraintLanguage
        {
            get { return _constraintLanguage; }
            set { _constraintLanguage = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "schemaAscii", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType SchemaAscii
        {
            get { return _schemaAscii; }
            set { _schemaAscii = value; }
        }

        [XmlElement(Type = typeof (BinaryPropertyType), ElementName = "graphicsFile", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BinaryPropertyType GraphicsFile
        {
            get { return _graphicsFile; }
            set { _graphicsFile = value; }
        }

        [XmlElement(Type = typeof (BinaryPropertyType), ElementName = "softwareDevelopmentFile", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BinaryPropertyType SoftwareDevelopmentFile
        {
            get { return _softwareDevelopmentFile; }
            set { _softwareDevelopmentFile = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "softwareDevelopmentFileFormat",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType SoftwareDevelopmentFileFormat
        {
            get { return _softwareDevelopmentFileFormat; }
            set { _softwareDevelopmentFileFormat = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Name.MakeSchemaCompliant();
            SchemaLanguage.MakeSchemaCompliant();
            ConstraintLanguage.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_applicationSchemaInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_applicationSchemaInformation_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_applicationSchemaInformation _mD_ApplicationSchemaInformation;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_applicationSchemaInformation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_applicationSchemaInformation), ElementName = "MD_applicationSchemaInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_applicationSchemaInformation MD_applicationSchemaInformation
        {
            get { return _mD_ApplicationSchemaInformation; }
            set { _mD_ApplicationSchemaInformation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_applicationSchemaInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_portrayalCatalogueReference_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_portrayalCatalogueReference_Type : AbstractObjectType
    {
        [XmlIgnore] private List<CI_citation_PropertyType> _portrayalCatalogueCitation;

        [XmlIgnore]
        public CI_citation_PropertyType this[int index]
        {
            get { return PortrayalCatalogueCitation[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return PortrayalCatalogueCitation.Count; }
        }

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "portrayalCatalogueCitation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_citation_PropertyType> PortrayalCatalogueCitation
        {
            get
            {
                if (_portrayalCatalogueCitation == null)
                    _portrayalCatalogueCitation = new List<CI_citation_PropertyType>();
                return _portrayalCatalogueCitation;
            }
            set { _portrayalCatalogueCitation = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return PortrayalCatalogueCitation.GetEnumerator();
        }

        public void Add(CI_citation_PropertyType obj)
        {
            PortrayalCatalogueCitation.Add(obj);
        }

        public void Clear()
        {
            PortrayalCatalogueCitation.Clear();
        }

        public CI_citation_PropertyType Remove(Int32 index)
        {
            CI_citation_PropertyType obj = PortrayalCatalogueCitation[index];
            PortrayalCatalogueCitation.Remove(obj);
            return obj;
        }

        public bool Remove(CI_citation_PropertyType obj)
        {
            return PortrayalCatalogueCitation.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CI_citation_PropertyType _c in PortrayalCatalogueCitation) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_portrayalCatalogueReference_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_portrayalCatalogueReference_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_portrayalCatalogueReference _mD_PortrayalCatalogueReference;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_portrayalCatalogueReference_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_portrayalCatalogueReference), ElementName = "MD_portrayalCatalogueReference",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_portrayalCatalogueReference MD_portrayalCatalogueReference
        {
            get { return _mD_PortrayalCatalogueReference; }
            set { _mD_PortrayalCatalogueReference = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_portrayalCatalogueReference.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_constraints_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_constraints_Type : AbstractObjectType
    {
        [XmlIgnore] private List<CharacterStringPropertyType> _useLimitation;

        [XmlIgnore]
        public CharacterStringPropertyType this[int index]
        {
            get { return UseLimitation[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return UseLimitation.Count; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "useLimitation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> UseLimitation
        {
            get
            {
                if (_useLimitation == null) _useLimitation = new List<CharacterStringPropertyType>();
                return _useLimitation;
            }
            set { _useLimitation = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return UseLimitation.GetEnumerator();
        }

        public void Add(CharacterStringPropertyType obj)
        {
            UseLimitation.Add(obj);
        }

        public void Clear()
        {
            UseLimitation.Clear();
        }

        public CharacterStringPropertyType Remove(Int32 index)
        {
            CharacterStringPropertyType  obj = UseLimitation[index];
            UseLimitation.Remove(obj);
            return obj;
        }

        public bool Remove(CharacterStringPropertyType obj)
        {
            return UseLimitation.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_constraints_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_constraints_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_constraints _mD_Constraints;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_constraints_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_constraints), ElementName = "MD_constraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_constraints MD_constraints
        {
            get { return _mD_Constraints; }
            set { _mD_Constraints = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_constraints.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_legalConstraints_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_legalConstraints_Type : MD_constraints_Type
    {
        [XmlIgnore] private List<MD_restrictionCode_PropertyType> _accessConstraints;
        [XmlIgnore] private List<CharacterStringPropertyType> _otherConstraints;

        [XmlIgnore] private List<MD_restrictionCode_PropertyType> _useConstraints;

        [XmlElement(Type = typeof (MD_restrictionCode_PropertyType), ElementName = "accessConstraints",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_restrictionCode_PropertyType> AccessConstraints
        {
            get
            {
                if (_accessConstraints == null) _accessConstraints = new List<MD_restrictionCode_PropertyType>();
                return _accessConstraints;
            }
            set { _accessConstraints = value; }
        }

        [XmlElement(Type = typeof (MD_restrictionCode_PropertyType), ElementName = "useConstraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_restrictionCode_PropertyType> UseConstraints
        {
            get
            {
                if (_useConstraints == null) _useConstraints = new List<MD_restrictionCode_PropertyType>();
                return _useConstraints;
            }
            set { _useConstraints = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "otherConstraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> OtherConstraints
        {
            get
            {
                if (_otherConstraints == null) _otherConstraints = new List<CharacterStringPropertyType>();
                return _otherConstraints;
            }
            set { _otherConstraints = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_legalConstraints_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_legalConstraints_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_legalConstraints _mD_LegalConstraints;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_legalConstraints_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_legalConstraints), ElementName = "MD_legalConstraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_legalConstraints MD_legalConstraints
        {
            get { return _mD_LegalConstraints; }
            set { _mD_LegalConstraints = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_legalConstraints.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_securityConstraints_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_securityConstraints_Type : MD_constraints_Type
    {
        [XmlIgnore] private MD_classificationCode_PropertyType _classification;
        [XmlIgnore] private CharacterStringPropertyType _classificationSystem;
        [XmlIgnore] private CharacterStringPropertyType _handlingDescription;

        [XmlIgnore] private CharacterStringPropertyType _userNote;

        [XmlElement(Type = typeof (MD_classificationCode_PropertyType), ElementName = "classification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_classificationCode_PropertyType Classification
        {
            get { return _classification; }
            set { _classification = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "userNote", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType UserNote
        {
            get { return _userNote; }
            set { _userNote = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "classificationSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ClassificationSystem
        {
            get { return _classificationSystem; }
            set { _classificationSystem = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "handlingDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType HandlingDescription
        {
            get { return _handlingDescription; }
            set { _handlingDescription = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Classification.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_securityConstraints_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_securityConstraints_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_securityConstraints _mD_SecurityConstraints;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_securityConstraints_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_securityConstraints), ElementName = "MD_securityConstraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_securityConstraints MD_securityConstraints
        {
            get { return _mD_SecurityConstraints; }
            set { _mD_SecurityConstraints = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_securityConstraints.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_classificationCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_classificationCode_PropertyType
    {
        [XmlIgnore] private MD_classificationCode _mD_ClassificationCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_classificationCode), ElementName = "MD_classificationCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_classificationCode MD_classificationCode
        {
            get { return _mD_ClassificationCode; }
            set { _mD_ClassificationCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_classificationCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_restrictionCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class MD_restrictionCode_PropertyType
    {
        [XmlIgnore] private MD_restrictionCode _mD_RestrictionCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_restrictionCode), ElementName = "MD_restrictionCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_restrictionCode MD_restrictionCode
        {
            get { return _mD_RestrictionCode; }
            set { _mD_RestrictionCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_restrictionCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_medium_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_medium_Type : AbstractObjectType
    {
        [XmlIgnore] private List<RealPropertyType> _density;
        [XmlIgnore] private CharacterStringPropertyType _densityUnits;
        [XmlIgnore] private List<MD_mediumFormatCode_PropertyType> _mediumFormat;
        [XmlIgnore] private CharacterStringPropertyType _mediumNote;
        [XmlIgnore] private MD_mediumNameCode_PropertyType _name;
        [XmlIgnore] private IntegerPropertyType _volumes;

        [XmlElement(Type = typeof (MD_mediumNameCode_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_mediumNameCode_PropertyType Name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "density", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<RealPropertyType> Density
        {
            get
            {
                if (_density == null) _density = new List<RealPropertyType>();
                return _density;
            }
            set { _density = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "densityUnits", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType DensityUnits
        {
            get { return _densityUnits; }
            set { _densityUnits = value; }
        }

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "volumes", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType Volumes
        {
            get { return _volumes; }
            set { _volumes = value; }
        }

        [XmlElement(Type = typeof (MD_mediumFormatCode_PropertyType), ElementName = "mediumFormat", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_mediumFormatCode_PropertyType> MediumFormat
        {
            get
            {
                if (_mediumFormat == null) _mediumFormat = new List<MD_mediumFormatCode_PropertyType>();
                return _mediumFormat;
            }
            set { _mediumFormat = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "mediumNote", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType MediumNote
        {
            get { return _mediumNote; }
            set { _mediumNote = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_medium_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_medium_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_medium _mD_Medium;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_medium_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_medium), ElementName = "MD_medium", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_medium MD_medium
        {
            get { return _mD_Medium; }
            set { _mD_Medium = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_medium.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_digitalTransferOptions_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_digitalTransferOptions_Type : AbstractObjectType
    {
        [XmlIgnore] private MD_medium_PropertyType _offLine;
        [XmlIgnore] private List<CI_onlineResource_PropertyType> _onLine;
        [XmlIgnore] private RealPropertyType _transferSize;
        [XmlIgnore] private CharacterStringPropertyType _unitsOfDistribution;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "unitsOfDistribution",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType UnitsOfDistribution
        {
            get { return _unitsOfDistribution; }
            set { _unitsOfDistribution = value; }
        }

        [XmlElement(Type = typeof (RealPropertyType), ElementName = "transferSize", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RealPropertyType TransferSize
        {
            get { return _transferSize; }
            set { _transferSize = value; }
        }

        [XmlElement(Type = typeof (CI_onlineResource_PropertyType), ElementName = "onLine", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_onlineResource_PropertyType> OnLine
        {
            get
            {
                if (_onLine == null) _onLine = new List<CI_onlineResource_PropertyType>();
                return _onLine;
            }
            set { _onLine = value; }
        }

        [XmlElement(Type = typeof (MD_medium_PropertyType), ElementName = "offLine", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_medium_PropertyType OffLine
        {
            get { return _offLine; }
            set { _offLine = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_digitalTransferOptions_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_digitalTransferOptions_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_digitalTransferOptions _mD_DigitalTransferOptions;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_digitalTransferOptions_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_digitalTransferOptions), ElementName = "MD_digitalTransferOptions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_digitalTransferOptions MD_digitalTransferOptions
        {
            get { return _mD_DigitalTransferOptions; }
            set { _mD_DigitalTransferOptions = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_digitalTransferOptions.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_standardOrderProcess_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_standardOrderProcess_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _fees;
        [XmlIgnore] private CharacterStringPropertyType _orderingInstructions;

        [XmlIgnore] private DateTimePropertyType _plannedAvailableDateTime;
        [XmlIgnore] private CharacterStringPropertyType _turnaround;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "fees", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Fees
        {
            get { return _fees; }
            set { _fees = value; }
        }

        [XmlElement(Type = typeof (DateTimePropertyType), ElementName = "plannedAvailableDateTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DateTimePropertyType PlannedAvailableDateTime
        {
            get { return _plannedAvailableDateTime; }
            set { _plannedAvailableDateTime = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "orderingInstructions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType OrderingInstructions
        {
            get { return _orderingInstructions; }
            set { _orderingInstructions = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "turnaround", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Turnaround
        {
            get { return _turnaround; }
            set { _turnaround = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_standardOrderProcess_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_standardOrderProcess_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_standardOrderProcess _mD_StandardOrderProcess;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_standardOrderProcess_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_standardOrderProcess), ElementName = "MD_standardOrderProcess", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_standardOrderProcess MD_standardOrderProcess
        {
            get { return _mD_StandardOrderProcess; }
            set { _mD_StandardOrderProcess = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_standardOrderProcess.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_distributor_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_distributor_Type : AbstractObjectType
    {
        [XmlIgnore] private List<MD_standardOrderProcess_PropertyType> _distributionOrderProcess;
        [XmlIgnore] private CI_responsibleParty_PropertyType _distributorContact;
        [XmlIgnore] private List<MD_format_PropertyType> _distributorFormat;
        [XmlIgnore] private List<MD_digitalTransferOptions_PropertyType> _distributorTransferOptions;

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "distributorContact",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_responsibleParty_PropertyType DistributorContact
        {
            get { return _distributorContact; }
            set { _distributorContact = value; }
        }

        [XmlElement(Type = typeof (MD_standardOrderProcess_PropertyType), ElementName = "distributionOrderProcess",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_standardOrderProcess_PropertyType> DistributionOrderProcess
        {
            get
            {
                if (_distributionOrderProcess == null)
                    _distributionOrderProcess = new List<MD_standardOrderProcess_PropertyType>();
                return _distributionOrderProcess;
            }
            set { _distributionOrderProcess = value; }
        }

        [XmlElement(Type = typeof (MD_format_PropertyType), ElementName = "distributorFormat", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_format_PropertyType> DistributorFormat
        {
            get
            {
                if (_distributorFormat == null) _distributorFormat = new List<MD_format_PropertyType>();
                return _distributorFormat;
            }
            set { _distributorFormat = value; }
        }

        [XmlElement(Type = typeof (MD_digitalTransferOptions_PropertyType), ElementName = "distributorTransferOptions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_digitalTransferOptions_PropertyType> DistributorTransferOptions
        {
            get
            {
                if (_distributorTransferOptions == null)
                    _distributorTransferOptions = new List<MD_digitalTransferOptions_PropertyType>();
                return _distributorTransferOptions;
            }
            set { _distributorTransferOptions = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            DistributorContact.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_distributor_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_distributor_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_distributor _mD_Distributor;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_distributor_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_distributor), ElementName = "MD_distributor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_distributor MD_distributor
        {
            get { return _mD_Distributor; }
            set { _mD_Distributor = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_distributor.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_distribution_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_distribution_Type : AbstractObjectType
    {
        [XmlIgnore] private List<MD_format_PropertyType> _distributionFormat;

        [XmlIgnore] private List<MD_distributor_PropertyType> _distributor;

        [XmlIgnore] private List<MD_digitalTransferOptions_PropertyType> _transferOptions;

        [XmlElement(Type = typeof (MD_format_PropertyType), ElementName = "distributionFormat", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_format_PropertyType> DistributionFormat
        {
            get
            {
                if (_distributionFormat == null) _distributionFormat = new List<MD_format_PropertyType>();
                return _distributionFormat;
            }
            set { _distributionFormat = value; }
        }

        [XmlElement(Type = typeof (MD_distributor_PropertyType), ElementName = "distributor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_distributor_PropertyType> Distributor
        {
            get
            {
                if (_distributor == null) _distributor = new List<MD_distributor_PropertyType>();
                return _distributor;
            }
            set { _distributor = value; }
        }

        [XmlElement(Type = typeof (MD_digitalTransferOptions_PropertyType), ElementName = "transferOptions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_digitalTransferOptions_PropertyType> TransferOptions
        {
            get
            {
                if (_transferOptions == null) _transferOptions = new List<MD_digitalTransferOptions_PropertyType>();
                return _transferOptions;
            }
            set { _transferOptions = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_distribution_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_distribution_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_distribution _mD_Distribution;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_distribution_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_distribution), ElementName = "MD_distribution", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_distribution MD_distribution
        {
            get { return _mD_Distribution; }
            set { _mD_Distribution = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_distribution.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_format_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_format_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _amendmentNumber;
        [XmlIgnore] private CharacterStringPropertyType _fileDecompressionTechnique;
        [XmlIgnore] private List<MD_distributor_PropertyType> _formatDistributor;
        [XmlIgnore] private CharacterStringPropertyType _name;
        [XmlIgnore] private CharacterStringPropertyType _specification;

        [XmlIgnore] private CharacterStringPropertyType _version;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "version", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Version
        {
            get { return _version; }
            set { _version = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "amendmentNumber", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType AmendmentNumber
        {
            get { return _amendmentNumber; }
            set { _amendmentNumber = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "specification", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Specification
        {
            get { return _specification; }
            set { _specification = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "fileDecompressionTechnique",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType FileDecompressionTechnique
        {
            get { return _fileDecompressionTechnique; }
            set { _fileDecompressionTechnique = value; }
        }

        [XmlElement(Type = typeof (MD_distributor_PropertyType), ElementName = "formatDistributor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_distributor_PropertyType> FormatDistributor
        {
            get
            {
                if (_formatDistributor == null) _formatDistributor = new List<MD_distributor_PropertyType>();
                return _formatDistributor;
            }
            set { _formatDistributor = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Name.MakeSchemaCompliant();
            Version.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_format_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_format_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_format _mD_Format;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_format_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_format), ElementName = "MD_format", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_format MD_format
        {
            get { return _mD_Format; }
            set { _mD_Format = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_format.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_distributionUnits_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_distributionUnits_PropertyType
    {
        [XmlIgnore] private MD_distributionUnits _mD_DistributionUnits;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_distributionUnits), ElementName = "MD_distributionUnits", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_distributionUnits MD_distributionUnits
        {
            get { return _mD_DistributionUnits; }
            set { _mD_DistributionUnits = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_distributionUnits.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_mediumFormatCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_mediumFormatCode_PropertyType
    {
        [XmlIgnore] private MD_mediumFormatCode _mD_MediumFormatCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_mediumFormatCode), ElementName = "MD_mediumFormatCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_mediumFormatCode MD_mediumFormatCode
        {
            get { return _mD_MediumFormatCode; }
            set { _mD_MediumFormatCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_mediumFormatCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_mediumNameCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_mediumNameCode_PropertyType
    {
        [XmlIgnore] private MD_mediumNameCode _mD_MediumNameCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_mediumNameCode), ElementName = "MD_mediumNameCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_mediumNameCode MD_mediumNameCode
        {
            get { return _mD_MediumNameCode; }
            set { _mD_MediumNameCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_mediumNameCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_maintenanceInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_maintenanceInformation_Type : AbstractObjectType
    {
        [XmlIgnore] private List<CI_responsibleParty_PropertyType> _contact;
        [XmlIgnore] private DatePropertyType _dateOfNextUpdate;
        [XmlIgnore] private MD_maintenanceFrequencyCode_PropertyType _maintenanceAndUpdateFrequency;
        [XmlIgnore] private List<CharacterStringPropertyType> _maintenanceNote;
        [XmlIgnore] private List<MD_scopeCode_PropertyType> _updateScope;
        [XmlIgnore] private List<MD_scopeDescription_PropertyType> _updateScopeDescription;
        [XmlIgnore] private TM_periodDuration_PropertyType _userDefinedMaintenanceFrequency;

        [XmlElement(Type = typeof (MD_maintenanceFrequencyCode_PropertyType),
            ElementName = "maintenanceAndUpdateFrequency", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_maintenanceFrequencyCode_PropertyType MaintenanceAndUpdateFrequency
        {
            get { return _maintenanceAndUpdateFrequency; }
            set { _maintenanceAndUpdateFrequency = value; }
        }

        [XmlElement(Type = typeof (DatePropertyType), ElementName = "dateOfNextUpdate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DatePropertyType DateOfNextUpdate
        {
            get { return _dateOfNextUpdate; }
            set { _dateOfNextUpdate = value; }
        }

        [XmlElement(Type = typeof (TM_periodDuration_PropertyType), ElementName = "userDefinedMaintenanceFrequency",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public TM_periodDuration_PropertyType UserDefinedMaintenanceFrequency
        {
            get { return _userDefinedMaintenanceFrequency; }
            set { _userDefinedMaintenanceFrequency = value; }
        }

        [XmlElement(Type = typeof (MD_scopeCode_PropertyType), ElementName = "updateScope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_scopeCode_PropertyType> UpdateScope
        {
            get
            {
                if (_updateScope == null) _updateScope = new List<MD_scopeCode_PropertyType>();
                return _updateScope;
            }
            set { _updateScope = value; }
        }

        [XmlElement(Type = typeof (MD_scopeDescription_PropertyType), ElementName = "updateScopeDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_scopeDescription_PropertyType> UpdateScopeDescription
        {
            get
            {
                if (_updateScopeDescription == null)
                    _updateScopeDescription = new List<MD_scopeDescription_PropertyType>();
                return _updateScopeDescription;
            }
            set { _updateScopeDescription = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "maintenanceNote", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> MaintenanceNote
        {
            get
            {
                if (_maintenanceNote == null) _maintenanceNote = new List<CharacterStringPropertyType>();
                return _maintenanceNote;
            }
            set { _maintenanceNote = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "contact", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_responsibleParty_PropertyType> Contact
        {
            get
            {
                if (_contact == null) _contact = new List<CI_responsibleParty_PropertyType>();
                return _contact;
            }
            set { _contact = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            MaintenanceAndUpdateFrequency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_maintenanceInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_maintenanceInformation_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_maintenanceInformation _mD_MaintenanceInformation;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_maintenanceInformation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_maintenanceInformation), ElementName = "MD_maintenanceInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_maintenanceInformation MD_maintenanceInformation
        {
            get { return _mD_MaintenanceInformation; }
            set { _mD_MaintenanceInformation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_maintenanceInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_scopeDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_scopeDescription_Type
    {
        [XmlIgnore] private List<ObjectReferencePropertyType> _attributeInstances;
        [XmlIgnore] private List<ObjectReferencePropertyType> _attributes;
        [XmlIgnore] private CharacterStringPropertyType _dataset;
        [XmlIgnore] private List<ObjectReferencePropertyType> _featureInstances;

        [XmlIgnore] private List<ObjectReferencePropertyType> _features;
        [XmlIgnore] private CharacterStringPropertyType _other;

        [XmlElement(Type = typeof (ObjectReferencePropertyType), ElementName = "attributes", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReferencePropertyType> Attributes
        {
            get
            {
                if (_attributes == null) _attributes = new List<ObjectReferencePropertyType>();
                return _attributes;
            }
            set { _attributes = value; }
        }

        [XmlElement(Type = typeof (ObjectReferencePropertyType), ElementName = "features", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReferencePropertyType> Features
        {
            get
            {
                if (_features == null) _features = new List<ObjectReferencePropertyType>();
                return _features;
            }
            set { _features = value; }
        }

        [XmlElement(Type = typeof (ObjectReferencePropertyType), ElementName = "featureInstances", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReferencePropertyType> FeatureInstances
        {
            get
            {
                if (_featureInstances == null) _featureInstances = new List<ObjectReferencePropertyType>();
                return _featureInstances;
            }
            set { _featureInstances = value; }
        }

        [XmlElement(Type = typeof (ObjectReferencePropertyType), ElementName = "attributeInstances", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReferencePropertyType> AttributeInstances
        {
            get
            {
                if (_attributeInstances == null) _attributeInstances = new List<ObjectReferencePropertyType>();
                return _attributeInstances;
            }
            set { _attributeInstances = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "dataset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Dataset
        {
            get { return _dataset; }
            set { _dataset = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "other", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Other
        {
            get { return _other; }
            set { _other = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            foreach (ObjectReferencePropertyType _c in Attributes) _c.MakeSchemaCompliant();
            foreach (ObjectReferencePropertyType _c in Features) _c.MakeSchemaCompliant();
            foreach (ObjectReferencePropertyType _c in FeatureInstances) _c.MakeSchemaCompliant();
            foreach (ObjectReferencePropertyType _c in AttributeInstances) _c.MakeSchemaCompliant();
            Dataset.MakeSchemaCompliant();
            Other.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_scopeDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_scopeDescription_PropertyType
    {
        [XmlIgnore] private MD_scopeDescription _mD_ScopeDescription;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_scopeDescription), ElementName = "MD_scopeDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_scopeDescription MD_scopeDescription
        {
            get { return _mD_ScopeDescription; }
            set { _mD_ScopeDescription = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_scopeDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_maintenanceFrequencyCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_maintenanceFrequencyCode_PropertyType
    {
        [XmlIgnore] private MD_maintenanceFrequencyCode _mD_MaintenanceFrequencyCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_maintenanceFrequencyCode), ElementName = "MD_maintenanceFrequencyCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_maintenanceFrequencyCode MD_maintenanceFrequencyCode
        {
            get { return _mD_MaintenanceFrequencyCode; }
            set { _mD_MaintenanceFrequencyCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_maintenanceFrequencyCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_scopeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_scopeCode_PropertyType
    {
        [XmlIgnore] private MD_scopeCode _mD_ScopeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_scopeCode), ElementName = "MD_scopeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_scopeCode MD_scopeCode
        {
            get { return _mD_ScopeCode; }
            set { _mD_ScopeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_scopeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractMD_identification_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractMD_identification_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _abstract;
        [XmlIgnore] private List<MD_aggregateInformation_PropertyType> _aggregationInfo;
        [XmlIgnore] private CI_citation_PropertyType _citation;
        [XmlIgnore] private List<CharacterStringPropertyType> _credit;
        [XmlIgnore] private List<MD_keywords_PropertyType> _descriptiveKeywords;
        [XmlIgnore] private List<MD_browseGraphic_PropertyType> _graphicOverview;
        [XmlIgnore] private List<CI_responsibleParty_PropertyType> _pointOfContact;
        [XmlIgnore] private CharacterStringPropertyType _purpose;
        [XmlIgnore] private List<MD_constraints_PropertyType> _resourceConstraints;
        [XmlIgnore] private List<MD_format_PropertyType> _resourceFormat;
        [XmlIgnore] private List<MD_maintenanceInformation_PropertyType> _resourceMaintenance;
        [XmlIgnore] private List<MD_usage_PropertyType> _resourceSpecificUsage;
        [XmlIgnore] private List<MD_progressCode_PropertyType> _status;

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "citation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation_PropertyType Citation
        {
            get { return _citation; }
            set { _citation = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "abstract", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Abstract
        {
            get { return _abstract; }
            set { _abstract = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "purpose", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Purpose
        {
            get { return _purpose; }
            set { _purpose = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "credit", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> Credit
        {
            get
            {
                if (_credit == null) _credit = new List<CharacterStringPropertyType>();
                return _credit;
            }
            set { _credit = value; }
        }

        [XmlElement(Type = typeof (MD_progressCode_PropertyType), ElementName = "status", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_progressCode_PropertyType> Status
        {
            get
            {
                if (_status == null) _status = new List<MD_progressCode_PropertyType>();
                return _status;
            }
            set { _status = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "pointOfContact", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_responsibleParty_PropertyType> PointOfContact
        {
            get
            {
                if (_pointOfContact == null) _pointOfContact = new List<CI_responsibleParty_PropertyType>();
                return _pointOfContact;
            }
            set { _pointOfContact = value; }
        }

        [XmlElement(Type = typeof (MD_maintenanceInformation_PropertyType), ElementName = "resourceMaintenance",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_maintenanceInformation_PropertyType> ResourceMaintenance
        {
            get
            {
                if (_resourceMaintenance == null)
                    _resourceMaintenance = new List<MD_maintenanceInformation_PropertyType>();
                return _resourceMaintenance;
            }
            set { _resourceMaintenance = value; }
        }

        [XmlElement(Type = typeof (MD_browseGraphic_PropertyType), ElementName = "graphicOverview", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_browseGraphic_PropertyType> GraphicOverview
        {
            get
            {
                if (_graphicOverview == null) _graphicOverview = new List<MD_browseGraphic_PropertyType>();
                return _graphicOverview;
            }
            set { _graphicOverview = value; }
        }

        [XmlElement(Type = typeof (MD_format_PropertyType), ElementName = "resourceFormat", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_format_PropertyType> ResourceFormat
        {
            get
            {
                if (_resourceFormat == null) _resourceFormat = new List<MD_format_PropertyType>();
                return _resourceFormat;
            }
            set { _resourceFormat = value; }
        }

        [XmlElement(Type = typeof (MD_keywords_PropertyType), ElementName = "descriptiveKeywords", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_keywords_PropertyType> DescriptiveKeywords
        {
            get
            {
                if (_descriptiveKeywords == null) _descriptiveKeywords = new List<MD_keywords_PropertyType>();
                return _descriptiveKeywords;
            }
            set { _descriptiveKeywords = value; }
        }

        [XmlElement(Type = typeof (MD_usage_PropertyType), ElementName = "resourceSpecificUsage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_usage_PropertyType> ResourceSpecificUsage
        {
            get
            {
                if (_resourceSpecificUsage == null) _resourceSpecificUsage = new List<MD_usage_PropertyType>();
                return _resourceSpecificUsage;
            }
            set { _resourceSpecificUsage = value; }
        }

        [XmlElement(Type = typeof (MD_constraints_PropertyType), ElementName = "resourceConstraints", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_constraints_PropertyType> ResourceConstraints
        {
            get
            {
                if (_resourceConstraints == null) _resourceConstraints = new List<MD_constraints_PropertyType>();
                return _resourceConstraints;
            }
            set { _resourceConstraints = value; }
        }

        [XmlElement(Type = typeof (MD_aggregateInformation_PropertyType), ElementName = "aggregationInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_aggregateInformation_PropertyType> AggregationInfo
        {
            get
            {
                if (_aggregationInfo == null) _aggregationInfo = new List<MD_aggregateInformation_PropertyType>();
                return _aggregationInfo;
            }
            set { _aggregationInfo = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Citation.MakeSchemaCompliant();
            Abstract.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_identification_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (MD_dataIdentification_Type))]
    [XmlInclude(typeof (MD_serviceIdentification_Type))]
    public class MD_identification_PropertyType
    {
        [XmlIgnore] private AbstractMD_identification _abstractMD_Identification;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_identification_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractMD_identification), ElementName = "AbstractMD_identification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractMD_identification AbstractMD_identification
        {
            get { return _abstractMD_Identification; }
            set { _abstractMD_Identification = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractMD_identification.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_browseGraphic_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_browseGraphic_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _fileDescription;
        [XmlIgnore] private CharacterStringPropertyType _fileName;
        [XmlIgnore] private CharacterStringPropertyType _fileType;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "fileName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType FileName
        {
            get { return _fileName; }
            set { _fileName = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "fileDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType FileDescription
        {
            get { return _fileDescription; }
            set { _fileDescription = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "fileType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType FileType
        {
            get { return _fileType; }
            set { _fileType = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            FileName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_browseGraphic_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_browseGraphic_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_browseGraphic _mD_BrowseGraphic;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_browseGraphic_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_browseGraphic), ElementName = "MD_browseGraphic", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_browseGraphic MD_browseGraphic
        {
            get { return _mD_BrowseGraphic; }
            set { _mD_BrowseGraphic = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_browseGraphic.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_dataIdentification_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_dataIdentification_Type : AbstractMD_identification_Type
    {
        [XmlIgnore] private List<MD_characterSetCode_PropertyType> _characterSet;
        [XmlIgnore] private CharacterStringPropertyType _environmentDescription;
        [XmlIgnore] private List<EX_extent_PropertyType> _extent;
        [XmlIgnore] private List<CharacterStringPropertyType> _language;
        [XmlIgnore] private List<MD_spatialRepresentationTypeCode_PropertyType> _spatialRepresentationType;

        [XmlIgnore] private List<MD_resolution_PropertyType> _spatialResolution;
        [XmlIgnore] private CharacterStringPropertyType _supplementalInformation;
        [XmlIgnore] private List<MD_topicCategoryCode_PropertyType> _topicCategory;

        [XmlElement(Type = typeof (MD_spatialRepresentationTypeCode_PropertyType),
            ElementName = "spatialRepresentationType", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_spatialRepresentationTypeCode_PropertyType> SpatialRepresentationType
        {
            get
            {
                if (_spatialRepresentationType == null)
                    _spatialRepresentationType = new List<MD_spatialRepresentationTypeCode_PropertyType>();
                return _spatialRepresentationType;
            }
            set { _spatialRepresentationType = value; }
        }

        [XmlElement(Type = typeof (MD_resolution_PropertyType), ElementName = "spatialResolution", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_resolution_PropertyType> SpatialResolution
        {
            get
            {
                if (_spatialResolution == null) _spatialResolution = new List<MD_resolution_PropertyType>();
                return _spatialResolution;
            }
            set { _spatialResolution = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "language", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> Language
        {
            get
            {
                if (_language == null) _language = new List<CharacterStringPropertyType>();
                return _language;
            }
            set { _language = value; }
        }

        [XmlElement(Type = typeof (MD_characterSetCode_PropertyType), ElementName = "characterSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_characterSetCode_PropertyType> CharacterSet
        {
            get
            {
                if (_characterSet == null) _characterSet = new List<MD_characterSetCode_PropertyType>();
                return _characterSet;
            }
            set { _characterSet = value; }
        }

        [XmlElement(Type = typeof (MD_topicCategoryCode_PropertyType), ElementName = "topicCategory", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_topicCategoryCode_PropertyType> TopicCategory
        {
            get
            {
                if (_topicCategory == null) _topicCategory = new List<MD_topicCategoryCode_PropertyType>();
                return _topicCategory;
            }
            set { _topicCategory = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "environmentDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType EnvironmentDescription
        {
            get { return _environmentDescription; }
            set { _environmentDescription = value; }
        }

        [XmlElement(Type = typeof (EX_extent_PropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_extent_PropertyType> Extent
        {
            get
            {
                if (_extent == null) _extent = new List<EX_extent_PropertyType>();
                return _extent;
            }
            set { _extent = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "supplementalInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType SupplementalInformation
        {
            get { return _supplementalInformation; }
            set { _supplementalInformation = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CharacterStringPropertyType _c in Language) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_dataIdentification_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_dataIdentification_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_dataIdentification _mD_DataIdentification;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_dataIdentification_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_dataIdentification), ElementName = "MD_dataIdentification", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_dataIdentification MD_dataIdentification
        {
            get { return _mD_DataIdentification; }
            set { _mD_DataIdentification = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_dataIdentification.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_serviceIdentification_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_serviceIdentification_Type : AbstractMD_identification_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_serviceIdentification_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_serviceIdentification_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_serviceIdentification _mD_ServiceIdentification;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_serviceIdentification_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_serviceIdentification), ElementName = "MD_serviceIdentification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_serviceIdentification MD_serviceIdentification
        {
            get { return _mD_ServiceIdentification; }
            set { _mD_ServiceIdentification = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_serviceIdentification.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_representativeFraction_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_representativeFraction_Type : AbstractObjectType
    {
        [XmlIgnore] private IntegerPropertyType _denominator;

        [XmlElement(Type = typeof (IntegerPropertyType), ElementName = "denominator", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public IntegerPropertyType Denominator
        {
            get { return _denominator; }
            set { _denominator = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Denominator.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_representativeFraction_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_representativeFraction_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_representativeFraction _mD_RepresentativeFraction;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_representativeFraction_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_representativeFraction), ElementName = "MD_representativeFraction",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_representativeFraction MD_representativeFraction
        {
            get { return _mD_RepresentativeFraction; }
            set { _mD_RepresentativeFraction = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_representativeFraction.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_usage_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_usage_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _specificUsage;

        [XmlIgnore] private DateTimePropertyType _usageDateTime;
        [XmlIgnore] private List<CI_responsibleParty_PropertyType> _userContactInfo;

        [XmlIgnore] private CharacterStringPropertyType _userDeterminedLimitations;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "specificUsage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType SpecificUsage
        {
            get { return _specificUsage; }
            set { _specificUsage = value; }
        }

        [XmlElement(Type = typeof (DateTimePropertyType), ElementName = "usageDateTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DateTimePropertyType UsageDateTime
        {
            get { return _usageDateTime; }
            set { _usageDateTime = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "userDeterminedLimitations",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType UserDeterminedLimitations
        {
            get { return _userDeterminedLimitations; }
            set { _userDeterminedLimitations = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "userContactInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_responsibleParty_PropertyType> UserContactInfo
        {
            get
            {
                if (_userContactInfo == null) _userContactInfo = new List<CI_responsibleParty_PropertyType>();
                return _userContactInfo;
            }
            set { _userContactInfo = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            SpecificUsage.MakeSchemaCompliant();
            foreach (CI_responsibleParty_PropertyType _c in UserContactInfo) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_usage_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_usage_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_usage _mD_Usage;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_usage_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_usage), ElementName = "MD_usage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_usage MD_usage
        {
            get { return _mD_Usage; }
            set { _mD_Usage = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_usage.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_keywords_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_keywords_Type : AbstractObjectType
    {
        [XmlIgnore] private List<CharacterStringPropertyType> _keyword;
        [XmlIgnore] private CI_citation_PropertyType _thesaurusName;

        [XmlIgnore] private MD_keywordTypeCode_PropertyType _type;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "keyword", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> Keyword
        {
            get
            {
                if (_keyword == null) _keyword = new List<CharacterStringPropertyType>();
                return _keyword;
            }
            set { _keyword = value; }
        }

        [XmlElement(Type = typeof (MD_keywordTypeCode_PropertyType), ElementName = "type", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_keywordTypeCode_PropertyType Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "thesaurusName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation_PropertyType ThesaurusName
        {
            get { return _thesaurusName; }
            set { _thesaurusName = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CharacterStringPropertyType _c in Keyword) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_keywords_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_keywords_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_keywords _mD_Keywords;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_keywords_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_keywords), ElementName = "MD_keywords", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_keywords MD_keywords
        {
            get { return _mD_Keywords; }
            set { _mD_Keywords = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_keywords.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_association_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_association_Type : AbstractObjectType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_association_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_association_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_association _dS_Association;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_association_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_association), ElementName = "DS_association", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_association DS_association
        {
            get { return _dS_Association; }
            set { _dS_Association = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_association.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_aggregateInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_aggregateInformation_Type : AbstractObjectType
    {
        [XmlIgnore] private MD_identifier_PropertyType _aggregateDataSetIdentifier;
        [XmlIgnore] private CI_citation_PropertyType _aggregateDataSetName;
        [XmlIgnore] private DS_associationTypeCode_PropertyType _associationType;
        [XmlIgnore] private DS_initiativeTypeCode_PropertyType _initiativeType;

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "aggregateDataSetName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation_PropertyType AggregateDataSetName
        {
            get { return _aggregateDataSetName; }
            set { _aggregateDataSetName = value; }
        }

        [XmlElement(Type = typeof (MD_identifier_PropertyType), ElementName = "aggregateDataSetIdentifier",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_identifier_PropertyType AggregateDataSetIdentifier
        {
            get { return _aggregateDataSetIdentifier; }
            set { _aggregateDataSetIdentifier = value; }
        }

        [XmlElement(Type = typeof (DS_associationTypeCode_PropertyType), ElementName = "associationType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_associationTypeCode_PropertyType AssociationType
        {
            get { return _associationType; }
            set { _associationType = value; }
        }

        [XmlElement(Type = typeof (DS_initiativeTypeCode_PropertyType), ElementName = "initiativeType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_initiativeTypeCode_PropertyType InitiativeType
        {
            get { return _initiativeType; }
            set { _initiativeType = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            AssociationType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_aggregateInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_aggregateInformation_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_aggregateInformation _mD_AggregateInformation;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_aggregateInformation_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_aggregateInformation), ElementName = "MD_aggregateInformation", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_aggregateInformation MD_aggregateInformation
        {
            get { return _mD_AggregateInformation; }
            set { _mD_AggregateInformation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_aggregateInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_resolution_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_resolution_Type
    {
        [XmlIgnore] private DistancePropertyType _distance;
        [XmlIgnore] private MD_representativeFraction_PropertyType _equivalentScale;

        [XmlElement(Type = typeof (MD_representativeFraction_PropertyType), ElementName = "equivalentScale",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_representativeFraction_PropertyType EquivalentScale
        {
            get { return _equivalentScale; }
            set { _equivalentScale = value; }
        }

        [XmlElement(Type = typeof (DistancePropertyType), ElementName = "distance", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DistancePropertyType Distance
        {
            get { return _distance; }
            set { _distance = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EquivalentScale.MakeSchemaCompliant();
            Distance.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_resolution_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_resolution_PropertyType
    {
        [XmlIgnore] private MD_resolution _mD_Resolution;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_resolution), ElementName = "MD_resolution", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_resolution MD_resolution
        {
            get { return _mD_Resolution; }
            set { _mD_Resolution = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_resolution.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_topicCategoryCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_topicCategoryCode_PropertyType
    {
        [XmlIgnore] private MD_topicCategoryCode_Type _mD_TopicCategoryCode;

        [XmlIgnore] public bool MD_TopicCategoryCodeSpecified;
        [XmlIgnore] private String _nilReason;


        public MD_topicCategoryCode_PropertyType()
        {
            MD_TopicCategoryCodeSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "MD_topicCategoryCode", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_topicCategoryCode_Type MD_topicCategoryCode
        {
            get { return _mD_TopicCategoryCode; }
            set
            {
                _mD_TopicCategoryCode = value;
                MD_TopicCategoryCodeSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MD_characterSetCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_characterSetCode_PropertyType
    {
        [XmlIgnore] private MD_characterSetCode _mD_CharacterSetCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_characterSetCode), ElementName = "MD_characterSetCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_characterSetCode MD_characterSetCode
        {
            get { return _mD_CharacterSetCode; }
            set { _mD_CharacterSetCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_characterSetCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_spatialRepresentationTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd")
    , Serializable]
    public class MD_spatialRepresentationTypeCode_PropertyType
    {
        [XmlIgnore] private MD_spatialRepresentationTypeCode _mD_SpatialRepresentationTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_spatialRepresentationTypeCode), ElementName = "MD_spatialRepresentationTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_spatialRepresentationTypeCode MD_spatialRepresentationTypeCode
        {
            get { return _mD_SpatialRepresentationTypeCode; }
            set { _mD_SpatialRepresentationTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_spatialRepresentationTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_progressCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_progressCode_PropertyType
    {
        [XmlIgnore] private MD_progressCode _mD_ProgressCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_progressCode), ElementName = "MD_progressCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_progressCode MD_progressCode
        {
            get { return _mD_ProgressCode; }
            set { _mD_ProgressCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_progressCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_keywordTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class MD_keywordTypeCode_PropertyType
    {
        [XmlIgnore] private MD_keywordTypeCode _mD_KeywordTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_keywordTypeCode), ElementName = "MD_keywordTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_keywordTypeCode MD_keywordTypeCode
        {
            get { return _mD_KeywordTypeCode; }
            set { _mD_KeywordTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_keywordTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_associationTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DS_associationTypeCode_PropertyType
    {
        [XmlIgnore] private DS_associationTypeCode _dS_AssociationTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_associationTypeCode), ElementName = "DS_associationTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_associationTypeCode DS_associationTypeCode
        {
            get { return _dS_AssociationTypeCode; }
            set { _dS_AssociationTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_associationTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_initiativeTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DS_initiativeTypeCode_PropertyType
    {
        [XmlIgnore] private DS_initiativeTypeCode _dS_InitiativeTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_initiativeTypeCode), ElementName = "DS_initiativeTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_initiativeTypeCode DS_initiativeTypeCode
        {
            get { return _dS_InitiativeTypeCode; }
            set { _dS_InitiativeTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_initiativeTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_processStep_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_processStep_Type : AbstractObjectType
    {
        [XmlIgnore] private DateTimePropertyType _dateTime;
        [XmlIgnore] private CharacterStringPropertyType _description;
        [XmlIgnore] private List<CI_responsibleParty_PropertyType> _processor;

        [XmlIgnore] private CharacterStringPropertyType _rationale;
        [XmlIgnore] private List<LI_source_PropertyType> _source;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "rationale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Rationale
        {
            get { return _rationale; }
            set { _rationale = value; }
        }

        [XmlElement(Type = typeof (DateTimePropertyType), ElementName = "dateTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DateTimePropertyType DateTime
        {
            get { return _dateTime; }
            set { _dateTime = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "processor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_responsibleParty_PropertyType> Processor
        {
            get
            {
                if (_processor == null) _processor = new List<CI_responsibleParty_PropertyType>();
                return _processor;
            }
            set { _processor = value; }
        }

        [XmlElement(Type = typeof (LI_source_PropertyType), ElementName = "source", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LI_source_PropertyType> Source
        {
            get
            {
                if (_source == null) _source = new List<LI_source_PropertyType>();
                return _source;
            }
            set { _source = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Description.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_processStep_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_processStep_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private LI_processStep _lI_ProcessStep;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public LI_processStep_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LI_processStep), ElementName = "LI_processStep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LI_processStep LI_processStep
        {
            get { return _lI_ProcessStep; }
            set { _lI_ProcessStep = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            LI_processStep.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_source_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_source_Type : AbstractObjectType
    {
        [XmlIgnore] private CharacterStringPropertyType _description;

        [XmlIgnore] private MD_representativeFraction_PropertyType _scaleDenominator;
        [XmlIgnore] private CI_citation_PropertyType _sourceCitation;
        [XmlIgnore] private List<EX_extent_PropertyType> _sourceExtent;

        [XmlIgnore] private MD_referenceSystem_PropertyType _sourceReferenceSystem;
        [XmlIgnore] private List<LI_processStep_PropertyType> _sourceStep;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (MD_representativeFraction_PropertyType), ElementName = "scaleDenominator",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_representativeFraction_PropertyType ScaleDenominator
        {
            get { return _scaleDenominator; }
            set { _scaleDenominator = value; }
        }

        [XmlElement(Type = typeof (MD_referenceSystem_PropertyType), ElementName = "sourceReferenceSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_referenceSystem_PropertyType SourceReferenceSystem
        {
            get { return _sourceReferenceSystem; }
            set { _sourceReferenceSystem = value; }
        }

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "sourceCitation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation_PropertyType SourceCitation
        {
            get { return _sourceCitation; }
            set { _sourceCitation = value; }
        }

        [XmlElement(Type = typeof (EX_extent_PropertyType), ElementName = "sourceExtent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_extent_PropertyType> SourceExtent
        {
            get
            {
                if (_sourceExtent == null) _sourceExtent = new List<EX_extent_PropertyType>();
                return _sourceExtent;
            }
            set { _sourceExtent = value; }
        }

        [XmlElement(Type = typeof (LI_processStep_PropertyType), ElementName = "sourceStep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LI_processStep_PropertyType> SourceStep
        {
            get
            {
                if (_sourceStep == null) _sourceStep = new List<LI_processStep_PropertyType>();
                return _sourceStep;
            }
            set { _sourceStep = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_source_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_source_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private LI_source _lI_Source;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public LI_source_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LI_source), ElementName = "LI_source", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LI_source LI_source
        {
            get { return _lI_Source; }
            set { _lI_Source = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            LI_source.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_lineage_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_lineage_Type : AbstractObjectType
    {
        [XmlIgnore] private List<LI_processStep_PropertyType> _processStep;
        [XmlIgnore] private List<LI_source_PropertyType> _source;
        [XmlIgnore] private CharacterStringPropertyType _statement;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "statement", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Statement
        {
            get { return _statement; }
            set { _statement = value; }
        }

        [XmlElement(Type = typeof (LI_processStep_PropertyType), ElementName = "processStep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LI_processStep_PropertyType> ProcessStep
        {
            get
            {
                if (_processStep == null) _processStep = new List<LI_processStep_PropertyType>();
                return _processStep;
            }
            set { _processStep = value; }
        }

        [XmlElement(Type = typeof (LI_source_PropertyType), ElementName = "source", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LI_source_PropertyType> Source
        {
            get
            {
                if (_source == null) _source = new List<LI_source_PropertyType>();
                return _source;
            }
            set { _source = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_lineage_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_lineage_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private LI_lineage _lI_Lineage;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public LI_lineage_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LI_lineage), ElementName = "LI_lineage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LI_lineage LI_lineage
        {
            get { return _lI_Lineage; }
            set { _lI_Lineage = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            LI_lineage.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_conformanceResult_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_conformanceResult_Type : AbstractDQ_result_Type
    {
        [XmlIgnore] private CharacterStringPropertyType _explanation;
        [XmlIgnore] private BooleanPropertyType _pass;
        [XmlIgnore] private CI_citation_PropertyType _specification;

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "specification", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation_PropertyType Specification
        {
            get { return _specification; }
            set { _specification = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "explanation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Explanation
        {
            get { return _explanation; }
            set { _explanation = value; }
        }

        [XmlElement(Type = typeof (BooleanPropertyType), ElementName = "pass", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public BooleanPropertyType Pass
        {
            get { return _pass; }
            set { _pass = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Specification.MakeSchemaCompliant();
            Explanation.MakeSchemaCompliant();
            Pass.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_conformanceResult_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_conformanceResult_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_conformanceResult _dQ_ConformanceResult;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_conformanceResult_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_conformanceResult), ElementName = "DQ_conformanceResult", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_conformanceResult DQ_conformanceResult
        {
            get { return _dQ_ConformanceResult; }
            set { _dQ_ConformanceResult = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_conformanceResult.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_quantitativeResult_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_quantitativeResult_Type : AbstractDQ_result_Type
    {
        [XmlIgnore] private CharacterStringPropertyType _errorStatistic;
        [XmlIgnore] private List<RecordPropertyType> _value;
        [XmlIgnore] private RecordTypePropertyType _valueType;

        [XmlIgnore] private UnitOfMeasurePropertyType _valueUnit;

        [XmlElement(Type = typeof (RecordTypePropertyType), ElementName = "valueType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RecordTypePropertyType ValueType
        {
            get { return _valueType; }
            set { _valueType = value; }
        }

        [XmlElement(Type = typeof (UnitOfMeasurePropertyType), ElementName = "valueUnit", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public UnitOfMeasurePropertyType ValueUnit
        {
            get { return _valueUnit; }
            set { _valueUnit = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "errorStatistic", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ErrorStatistic
        {
            get { return _errorStatistic; }
            set { _errorStatistic = value; }
        }

        [XmlElement(Type = typeof (RecordPropertyType), ElementName = "value", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<RecordPropertyType> Value
        {
            get
            {
                if (_value == null) _value = new List<RecordPropertyType>();
                return _value;
            }
            set { _value = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            ValueUnit.MakeSchemaCompliant();
            foreach (RecordPropertyType _c in Value) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_quantitativeResult_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_quantitativeResult_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_quantitativeResult _dQ_QuantitativeResult;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_quantitativeResult_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_quantitativeResult), ElementName = "DQ_quantitativeResult", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_quantitativeResult DQ_quantitativeResult
        {
            get { return _dQ_QuantitativeResult; }
            set { _dQ_QuantitativeResult = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_quantitativeResult.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_result_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractDQ_result_Type : AbstractObjectType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_result_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (DQ_conformanceResult_Type))]
    [XmlInclude(typeof (DQ_quantitativeResult_Type))]
    public class DQ_result_PropertyType
    {
        [XmlIgnore] private AbstractDQ_result _abstractDQ_Result;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_result_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_result), ElementName = "AbstractDQ_result", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_result AbstractDQ_result
        {
            get { return _abstractDQ_Result; }
            set { _abstractDQ_Result = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDQ_result.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_temporalValidity_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_temporalValidity_Type : AbstractDQ_temporalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_temporalValidity_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_temporalValidity_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_temporalValidity _dQ_TemporalValidity;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_temporalValidity_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_temporalValidity), ElementName = "DQ_temporalValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_temporalValidity DQ_temporalValidity
        {
            get { return _dQ_TemporalValidity; }
            set { _dQ_TemporalValidity = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_temporalValidity.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_temporalConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_temporalConsistency_Type : AbstractDQ_temporalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_temporalConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_temporalConsistency_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_temporalConsistency _dQ_TemporalConsistency;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_temporalConsistency_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_temporalConsistency), ElementName = "DQ_temporalConsistency", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_temporalConsistency DQ_temporalConsistency
        {
            get { return _dQ_TemporalConsistency; }
            set { _dQ_TemporalConsistency = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_temporalConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_accuracyOfATimeMeasurement_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_accuracyOfATimeMeasurement_Type : AbstractDQ_temporalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_accuracyOfATimeMeasurement_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_accuracyOfATimeMeasurement_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_accuracyOfATimeMeasurement _dQ_AccuracyOfATimeMeasurement;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_accuracyOfATimeMeasurement_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_accuracyOfATimeMeasurement), ElementName = "DQ_accuracyOfATimeMeasurement",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_accuracyOfATimeMeasurement DQ_accuracyOfATimeMeasurement
        {
            get { return _dQ_AccuracyOfATimeMeasurement; }
            set { _dQ_AccuracyOfATimeMeasurement = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_accuracyOfATimeMeasurement.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_quantitativeAttributeAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_quantitativeAttributeAccuracy_Type : AbstractDQ_thematicAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_quantitativeAttributeAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd")
    , Serializable]
    public class DQ_quantitativeAttributeAccuracy_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_quantitativeAttributeAccuracy _dQ_QuantitativeAttributeAccuracy;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_quantitativeAttributeAccuracy_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_quantitativeAttributeAccuracy), ElementName = "DQ_quantitativeAttributeAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_quantitativeAttributeAccuracy DQ_quantitativeAttributeAccuracy
        {
            get { return _dQ_QuantitativeAttributeAccuracy; }
            set { _dQ_QuantitativeAttributeAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_quantitativeAttributeAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_nonQuantitativeAttributeAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_nonQuantitativeAttributeAccuracy_Type : AbstractDQ_thematicAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_nonQuantitativeAttributeAccuracy_PropertyType",
        Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_nonQuantitativeAttributeAccuracy_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_nonQuantitativeAttributeAccuracy _dQ_NonQuantitativeAttributeAccuracy;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_nonQuantitativeAttributeAccuracy_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_nonQuantitativeAttributeAccuracy),
            ElementName = "DQ_nonQuantitativeAttributeAccuracy", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_nonQuantitativeAttributeAccuracy DQ_nonQuantitativeAttributeAccuracy
        {
            get { return _dQ_NonQuantitativeAttributeAccuracy; }
            set { _dQ_NonQuantitativeAttributeAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_nonQuantitativeAttributeAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_thematicClassificationCorrectness_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_thematicClassificationCorrectness_Type : AbstractDQ_thematicAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_thematicClassificationCorrectness_PropertyType",
        Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_thematicClassificationCorrectness_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_thematicClassificationCorrectness _dQ_ThematicClassificationCorrectness;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_thematicClassificationCorrectness_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_thematicClassificationCorrectness),
            ElementName = "DQ_thematicClassificationCorrectness", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_thematicClassificationCorrectness DQ_thematicClassificationCorrectness
        {
            get { return _dQ_ThematicClassificationCorrectness; }
            set { _dQ_ThematicClassificationCorrectness = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_thematicClassificationCorrectness.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_relativeInternalPositionalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_relativeInternalPositionalAccuracy_Type : AbstractDQ_positionalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_relativeInternalPositionalAccuracy_PropertyType",
        Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_relativeInternalPositionalAccuracy_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_relativeInternalPositionalAccuracy _dQ_RelativeInternalPositionalAccuracy;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_relativeInternalPositionalAccuracy_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_relativeInternalPositionalAccuracy),
            ElementName = "DQ_relativeInternalPositionalAccuracy", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_relativeInternalPositionalAccuracy DQ_relativeInternalPositionalAccuracy
        {
            get { return _dQ_RelativeInternalPositionalAccuracy; }
            set { _dQ_RelativeInternalPositionalAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_relativeInternalPositionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_griddedDataPositionalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_griddedDataPositionalAccuracy_Type : AbstractDQ_positionalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_griddedDataPositionalAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd")
    , Serializable]
    public class DQ_griddedDataPositionalAccuracy_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_griddedDataPositionalAccuracy _dQ_GriddedDataPositionalAccuracy;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_griddedDataPositionalAccuracy_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_griddedDataPositionalAccuracy), ElementName = "DQ_griddedDataPositionalAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_griddedDataPositionalAccuracy DQ_griddedDataPositionalAccuracy
        {
            get { return _dQ_GriddedDataPositionalAccuracy; }
            set { _dQ_GriddedDataPositionalAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_griddedDataPositionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_absoluteExternalPositionalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_absoluteExternalPositionalAccuracy_Type : AbstractDQ_positionalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_absoluteExternalPositionalAccuracy_PropertyType",
        Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_absoluteExternalPositionalAccuracy_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_absoluteExternalPositionalAccuracy _dQ_AbsoluteExternalPositionalAccuracy;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_absoluteExternalPositionalAccuracy_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_absoluteExternalPositionalAccuracy),
            ElementName = "DQ_absoluteExternalPositionalAccuracy", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_absoluteExternalPositionalAccuracy DQ_absoluteExternalPositionalAccuracy
        {
            get { return _dQ_AbsoluteExternalPositionalAccuracy; }
            set { _dQ_AbsoluteExternalPositionalAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_absoluteExternalPositionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_topologicalConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_topologicalConsistency_Type : AbstractDQ_logicalConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_topologicalConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_topologicalConsistency_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_topologicalConsistency _dQ_TopologicalConsistency;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_topologicalConsistency_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_topologicalConsistency), ElementName = "DQ_topologicalConsistency",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_topologicalConsistency DQ_topologicalConsistency
        {
            get { return _dQ_TopologicalConsistency; }
            set { _dQ_TopologicalConsistency = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_topologicalConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_formatConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_formatConsistency_Type : AbstractDQ_logicalConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_formatConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_formatConsistency_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_formatConsistency _dQ_FormatConsistency;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_formatConsistency_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_formatConsistency), ElementName = "DQ_formatConsistency", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_formatConsistency DQ_formatConsistency
        {
            get { return _dQ_FormatConsistency; }
            set { _dQ_FormatConsistency = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_formatConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_domainConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_domainConsistency_Type : AbstractDQ_logicalConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_domainConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_domainConsistency_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_domainConsistency _dQ_DomainConsistency;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_domainConsistency_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_domainConsistency), ElementName = "DQ_domainConsistency", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_domainConsistency DQ_domainConsistency
        {
            get { return _dQ_DomainConsistency; }
            set { _dQ_DomainConsistency = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_domainConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_conceptualConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_conceptualConsistency_Type : AbstractDQ_logicalConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_conceptualConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_conceptualConsistency_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_conceptualConsistency _dQ_ConceptualConsistency;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_conceptualConsistency_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_conceptualConsistency), ElementName = "DQ_conceptualConsistency",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_conceptualConsistency DQ_conceptualConsistency
        {
            get { return _dQ_ConceptualConsistency; }
            set { _dQ_ConceptualConsistency = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_conceptualConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_completenessOmission_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_completenessOmission_Type : AbstractDQ_completeness_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_completenessOmission_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_completenessOmission_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_completenessOmission _dQ_CompletenessOmission;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_completenessOmission_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_completenessOmission), ElementName = "DQ_completenessOmission", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_completenessOmission DQ_completenessOmission
        {
            get { return _dQ_CompletenessOmission; }
            set { _dQ_CompletenessOmission = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_completenessOmission.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_completenessCommission_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_completenessCommission_Type : AbstractDQ_completeness_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_completenessCommission_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_completenessCommission_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_completenessCommission _dQ_CompletenessCommission;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_completenessCommission_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_completenessCommission), ElementName = "DQ_completenessCommission",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_completenessCommission DQ_completenessCommission
        {
            get { return _dQ_CompletenessCommission; }
            set { _dQ_CompletenessCommission = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_completenessCommission.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_temporalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractDQ_temporalAccuracy_Type : AbstractDQ_element_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_temporalAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (DQ_accuracyOfATimeMeasurement_Type))]
    [XmlInclude(typeof (DQ_temporalConsistency_Type))]
    [XmlInclude(typeof (DQ_temporalValidity_Type))]
    public class DQ_temporalAccuracy_PropertyType
    {
        [XmlIgnore] private AbstractDQ_temporalAccuracy _abstractDQ_TemporalAccuracy;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_temporalAccuracy_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_temporalAccuracy), ElementName = "AbstractDQ_temporalAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_temporalAccuracy AbstractDQ_temporalAccuracy
        {
            get { return _abstractDQ_TemporalAccuracy; }
            set { _abstractDQ_TemporalAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDQ_temporalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_thematicAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractDQ_thematicAccuracy_Type : AbstractDQ_element_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_thematicAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (DQ_nonQuantitativeAttributeAccuracy_Type))]
    [XmlInclude(typeof (DQ_quantitativeAttributeAccuracy_Type))]
    [XmlInclude(typeof (DQ_thematicClassificationCorrectness_Type))]
    public class DQ_thematicAccuracy_PropertyType
    {
        [XmlIgnore] private AbstractDQ_thematicAccuracy _abstractDQ_ThematicAccuracy;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_thematicAccuracy_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_thematicAccuracy), ElementName = "AbstractDQ_thematicAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_thematicAccuracy AbstractDQ_thematicAccuracy
        {
            get { return _abstractDQ_ThematicAccuracy; }
            set { _abstractDQ_ThematicAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDQ_thematicAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_positionalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractDQ_positionalAccuracy_Type : AbstractDQ_element_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_positionalAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (DQ_relativeInternalPositionalAccuracy_Type))]
    [XmlInclude(typeof (DQ_absoluteExternalPositionalAccuracy_Type))]
    [XmlInclude(typeof (DQ_griddedDataPositionalAccuracy_Type))]
    public class DQ_positionalAccuracy_PropertyType
    {
        [XmlIgnore] private AbstractDQ_positionalAccuracy _abstractDQ_PositionalAccuracy;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_positionalAccuracy_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_positionalAccuracy), ElementName = "AbstractDQ_positionalAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_positionalAccuracy AbstractDQ_positionalAccuracy
        {
            get { return _abstractDQ_PositionalAccuracy; }
            set { _abstractDQ_PositionalAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDQ_positionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_logicalConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractDQ_logicalConsistency_Type : AbstractDQ_element_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_logicalConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (DQ_formatConsistency_Type))]
    [XmlInclude(typeof (DQ_conceptualConsistency_Type))]
    [XmlInclude(typeof (DQ_topologicalConsistency_Type))]
    [XmlInclude(typeof (DQ_domainConsistency_Type))]
    public class DQ_logicalConsistency_PropertyType
    {
        [XmlIgnore] private AbstractDQ_logicalConsistency _abstractDQ_LogicalConsistency;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_logicalConsistency_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_logicalConsistency), ElementName = "AbstractDQ_logicalConsistency",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_logicalConsistency AbstractDQ_logicalConsistency
        {
            get { return _abstractDQ_LogicalConsistency; }
            set { _abstractDQ_LogicalConsistency = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDQ_logicalConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_completeness_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractDQ_completeness_Type : AbstractDQ_element_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_completeness_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (DQ_completenessCommission_Type))]
    [XmlInclude(typeof (DQ_completenessOmission_Type))]
    public class DQ_completeness_PropertyType
    {
        [XmlIgnore] private AbstractDQ_completeness _abstractDQ_Completeness;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_completeness_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_completeness), ElementName = "AbstractDQ_completeness", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_completeness AbstractDQ_completeness
        {
            get { return _abstractDQ_Completeness; }
            set { _abstractDQ_Completeness = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDQ_completeness.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_element_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractDQ_element_Type : AbstractObjectType
    {
        [XmlIgnore] private List<DateTimePropertyType> _dateTime;
        [XmlIgnore] private CharacterStringPropertyType _evaluationMethodDescription;
        [XmlIgnore] private DQ_evaluationMethodTypeCode_PropertyType _evaluationMethodType;
        [XmlIgnore] private CI_citation_PropertyType _evaluationProcedure;
        [XmlIgnore] private CharacterStringPropertyType _measureDescription;
        [XmlIgnore] private MD_identifier_PropertyType _measureIdentification;
        [XmlIgnore] private List<CharacterStringPropertyType> _nameOfMeasure;
        [XmlIgnore] private List<DQ_result_PropertyType> _result;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "nameOfMeasure", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> NameOfMeasure
        {
            get
            {
                if (_nameOfMeasure == null) _nameOfMeasure = new List<CharacterStringPropertyType>();
                return _nameOfMeasure;
            }
            set { _nameOfMeasure = value; }
        }

        [XmlElement(Type = typeof (MD_identifier_PropertyType), ElementName = "measureIdentification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_identifier_PropertyType MeasureIdentification
        {
            get { return _measureIdentification; }
            set { _measureIdentification = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "measureDescription", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType MeasureDescription
        {
            get { return _measureDescription; }
            set { _measureDescription = value; }
        }

        [XmlElement(Type = typeof (DQ_evaluationMethodTypeCode_PropertyType), ElementName = "evaluationMethodType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_evaluationMethodTypeCode_PropertyType EvaluationMethodType
        {
            get { return _evaluationMethodType; }
            set { _evaluationMethodType = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "evaluationMethodDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType EvaluationMethodDescription
        {
            get { return _evaluationMethodDescription; }
            set { _evaluationMethodDescription = value; }
        }

        [XmlElement(Type = typeof (CI_citation_PropertyType), ElementName = "evaluationProcedure", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation_PropertyType EvaluationProcedure
        {
            get { return _evaluationProcedure; }
            set { _evaluationProcedure = value; }
        }

        [XmlElement(Type = typeof (DateTimePropertyType), ElementName = "dateTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DateTimePropertyType> DateTime
        {
            get
            {
                if (_dateTime == null) _dateTime = new List<DateTimePropertyType>();
                return _dateTime;
            }
            set { _dateTime = value; }
        }

        [XmlElement(Type = typeof (DQ_result_PropertyType), ElementName = "result", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DQ_result_PropertyType> Result
        {
            get
            {
                if (_result == null) _result = new List<DQ_result_PropertyType>();
                return _result;
            }
            set { _result = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DQ_result_PropertyType _c in Result) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_element_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (AbstractDQ_positionalAccuracy_Type))]
    [XmlInclude(typeof (AbstractDQ_logicalConsistency_Type))]
    [XmlInclude(typeof (AbstractDQ_completeness_Type))]
    [XmlInclude(typeof (AbstractDQ_temporalAccuracy_Type))]
    [XmlInclude(typeof (AbstractDQ_thematicAccuracy_Type))]
    public class DQ_element_PropertyType
    {
        [XmlIgnore] private AbstractDQ_element _abstractDQ_Element;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_element_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_element), ElementName = "AbstractDQ_element", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_element AbstractDQ_element
        {
            get { return _abstractDQ_Element; }
            set { _abstractDQ_Element = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDQ_element.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_dataQuality_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_dataQuality_Type : AbstractObjectType
    {
        [XmlIgnore] private LI_lineage_PropertyType _lineage;
        [XmlIgnore] private List<DQ_element_PropertyType> _report;
        [XmlIgnore] private DQ_scope_PropertyType _scope;

        [XmlElement(Type = typeof (DQ_scope_PropertyType), ElementName = "scope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_scope_PropertyType Scope
        {
            get { return _scope; }
            set { _scope = value; }
        }

        [XmlElement(Type = typeof (DQ_element_PropertyType), ElementName = "report", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DQ_element_PropertyType> Report
        {
            get
            {
                if (_report == null) _report = new List<DQ_element_PropertyType>();
                return _report;
            }
            set { _report = value; }
        }

        [XmlElement(Type = typeof (LI_lineage_PropertyType), ElementName = "lineage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LI_lineage_PropertyType Lineage
        {
            get { return _lineage; }
            set { _lineage = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Scope.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_dataQuality_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_dataQuality_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_dataQuality _dQ_DataQuality;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_dataQuality_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_dataQuality), ElementName = "DQ_dataQuality", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_dataQuality DQ_dataQuality
        {
            get { return _dQ_DataQuality; }
            set { _dQ_DataQuality = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_dataQuality.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_scope_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_scope_Type : AbstractObjectType
    {
        [XmlIgnore] private EX_extent_PropertyType _extent;
        [XmlIgnore] private MD_scopeCode_PropertyType _level;
        [XmlIgnore] private List<MD_scopeDescription_PropertyType> _levelDescription;

        [XmlElement(Type = typeof (MD_scopeCode_PropertyType), ElementName = "level", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_scopeCode_PropertyType Level
        {
            get { return _level; }
            set { _level = value; }
        }

        [XmlElement(Type = typeof (EX_extent_PropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_extent_PropertyType Extent
        {
            get { return _extent; }
            set { _extent = value; }
        }

        [XmlElement(Type = typeof (MD_scopeDescription_PropertyType), ElementName = "levelDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_scopeDescription_PropertyType> LevelDescription
        {
            get
            {
                if (_levelDescription == null) _levelDescription = new List<MD_scopeDescription_PropertyType>();
                return _levelDescription;
            }
            set { _levelDescription = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Level.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_scope_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_scope_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DQ_scope _dQ_Scope;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DQ_scope_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_scope), ElementName = "DQ_scope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_scope DQ_scope
        {
            get { return _dQ_Scope; }
            set { _dQ_Scope = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_scope.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_evaluationMethodTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_evaluationMethodTypeCode_PropertyType
    {
        [XmlIgnore] private DQ_evaluationMethodTypeCode _dQ_EvaluationMethodTypeCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_evaluationMethodTypeCode), ElementName = "DQ_evaluationMethodTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_evaluationMethodTypeCode DQ_evaluationMethodTypeCode
        {
            get { return _dQ_EvaluationMethodTypeCode; }
            set { _dQ_EvaluationMethodTypeCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DQ_evaluationMethodTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_freeText_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_freeText_Type : AbstractObjectType
    {
        [XmlIgnore] private List<LocalisedCharacterStringPropertyType> _textGroup;

        [XmlIgnore]
        public LocalisedCharacterStringPropertyType this[int index]
        {
            get { return TextGroup[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return TextGroup.Count; }
        }

        [XmlElement(Type = typeof (LocalisedCharacterStringPropertyType), ElementName = "textGroup", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LocalisedCharacterStringPropertyType> TextGroup
        {
            get
            {
                if (_textGroup == null) _textGroup = new List<LocalisedCharacterStringPropertyType>();
                return _textGroup;
            }
            set { _textGroup = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return TextGroup.GetEnumerator();
        }

        public void Add(LocalisedCharacterStringPropertyType obj)
        {
            TextGroup.Add(obj);
        }

        public void Clear()
        {
            TextGroup.Clear();
        }

        public LocalisedCharacterStringPropertyType Remove(Int32 index)
        {
            LocalisedCharacterStringPropertyType  obj = TextGroup[index];
            TextGroup.Remove(obj);
            return obj;
        }

        public bool Remove(LocalisedCharacterStringPropertyType obj)
        {
            return TextGroup.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (LocalisedCharacterStringPropertyType _c in TextGroup) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_freeText_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_freeText_PropertyType : CharacterStringPropertyType
    {
        [XmlIgnore] private PT_freeText _pT_FreeText;

        [XmlElement(Type = typeof (PT_freeText), ElementName = "PT_freeText", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public PT_freeText PT_freeText
        {
            get { return _pT_FreeText; }
            set { _pT_FreeText = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            PT_freeText.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_locale_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_locale_Type : AbstractObjectType
    {
        [XmlIgnore] private MD_characterSetCode_PropertyType _characterEncoding;
        [XmlIgnore] private CountryPropertyType _country;
        [XmlIgnore] private LanguageCodePropertyType _languageCode;

        [XmlElement(Type = typeof (LanguageCodePropertyType), ElementName = "languageCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LanguageCodePropertyType LanguageCode
        {
            get { return _languageCode; }
            set { _languageCode = value; }
        }

        [XmlElement(Type = typeof (CountryPropertyType), ElementName = "country", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CountryPropertyType Country
        {
            get { return _country; }
            set { _country = value; }
        }

        [XmlElement(Type = typeof (MD_characterSetCode_PropertyType), ElementName = "characterEncoding",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_characterSetCode_PropertyType CharacterEncoding
        {
            get { return _characterEncoding; }
            set { _characterEncoding = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            LanguageCode.MakeSchemaCompliant();
            CharacterEncoding.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_locale_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_locale_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private PT_locale _pT_Locale;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public PT_locale_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (PT_locale), ElementName = "PT_locale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public PT_locale PT_locale
        {
            get { return _pT_Locale; }
            set { _pT_Locale = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            PT_locale.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LocalisedCharacterString_type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LocalisedCharacterStringType
    {
        [XmlIgnore] private String _id;

        [XmlIgnore] private String _locale;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public String Id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlAttribute(AttributeName = "locale", DataType = "anyURI")]
        public String Locale
        {
            get { return _locale; }
            set { _locale = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "LocalisedCharacterString_propertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class LocalisedCharacterStringPropertyType : ObjectReferencePropertyType
    {
        [XmlIgnore] private LocalisedCharacterString _localisedCharacterString;

        [XmlElement(Type = typeof (LocalisedCharacterString), ElementName = "LocalisedCharacterString",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LocalisedCharacterString LocalisedCharacterString
        {
            get { return _localisedCharacterString; }
            set { _localisedCharacterString = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            LocalisedCharacterString.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_localeContainer_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_localeContainer_Type
    {
        [XmlIgnore] private List<CI_date_PropertyType> _date;
        [XmlIgnore] private CharacterStringPropertyType _description;

        [XmlIgnore] private PT_locale_PropertyType _locale;
        [XmlIgnore] private List<LocalisedCharacterStringPropertyType> _localisedString;
        [XmlIgnore] private List<CI_responsibleParty_PropertyType> _responsibleParty;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (PT_locale_PropertyType), ElementName = "locale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public PT_locale_PropertyType Locale
        {
            get { return _locale; }
            set { _locale = value; }
        }

        [XmlElement(Type = typeof (CI_date_PropertyType), ElementName = "date", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_date_PropertyType> Date
        {
            get
            {
                if (_date == null) _date = new List<CI_date_PropertyType>();
                return _date;
            }
            set { _date = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "responsibleParty",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_responsibleParty_PropertyType> ResponsibleParty
        {
            get
            {
                if (_responsibleParty == null) _responsibleParty = new List<CI_responsibleParty_PropertyType>();
                return _responsibleParty;
            }
            set { _responsibleParty = value; }
        }

        [XmlElement(Type = typeof (LocalisedCharacterStringPropertyType), ElementName = "localisedString",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LocalisedCharacterStringPropertyType> LocalisedString
        {
            get
            {
                if (_localisedString == null) _localisedString = new List<LocalisedCharacterStringPropertyType>();
                return _localisedString;
            }
            set { _localisedString = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Description.MakeSchemaCompliant();
            Locale.MakeSchemaCompliant();
            foreach (CI_date_PropertyType _c in Date) _c.MakeSchemaCompliant();
            foreach (CI_responsibleParty_PropertyType _c in ResponsibleParty) _c.MakeSchemaCompliant();
            foreach (LocalisedCharacterStringPropertyType _c in LocalisedString) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_localeContainer_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class PT_localeContainer_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private PT_localeContainer _pT_LocaleContainer;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public PT_localeContainer_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (PT_localeContainer), ElementName = "PT_localeContainer", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public PT_localeContainer PT_localeContainer
        {
            get { return _pT_LocaleContainer; }
            set { _pT_LocaleContainer = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            PT_localeContainer.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LanguageCode_propertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LanguageCodePropertyType
    {
        [XmlIgnore] private LanguageCode _languageCode;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LanguageCode), ElementName = "LanguageCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LanguageCode LanguageCode
        {
            get { return _languageCode; }
            set { _languageCode = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            LanguageCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Country_propertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CountryPropertyType
    {
        [XmlIgnore] private Country _country;
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Country), ElementName = "Country", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = "http://www.isotc211.org/2005/gmd")]
        public Country Country
        {
            get { return _country; }
            set { _country = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Country.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_metadata_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_metadata_Type : AbstractObjectType
    {
        [XmlIgnore] private List<MD_applicationSchemaInformation_PropertyType> _applicationSchemaInfo;
        [XmlIgnore] private MD_characterSetCode_PropertyType _characterSet;
        [XmlIgnore] private List<CI_responsibleParty_PropertyType> _contact;
        [XmlIgnore] private List<MD_contentInformation_PropertyType> _contentInfo;
        [XmlIgnore] private List<DQ_dataQuality_PropertyType> _dataQualityInfo;
        [XmlIgnore] private CharacterStringPropertyType _dataSetURI;
        [XmlIgnore] private DatePropertyType _dateStamp;
        [XmlIgnore] private List<DS_dataSet_PropertyType> _describes;
        [XmlIgnore] private MD_distribution_PropertyType _distributionInfo;
        [XmlIgnore] private List<ObjectReferencePropertyType> _featureAttribute;
        [XmlIgnore] private List<ObjectReferencePropertyType> _featureType;
        [XmlIgnore] private CharacterStringPropertyType _fileIdentifier;
        [XmlIgnore] private List<MD_scopeCode_PropertyType> _hierarchyLevel;
        [XmlIgnore] private List<CharacterStringPropertyType> _hierarchyLevelName;
        [XmlIgnore] private List<MD_identification_PropertyType> _identificationInfo;

        [XmlIgnore] private CharacterStringPropertyType _language;
        [XmlIgnore] private List<PT_locale_PropertyType> _locale;
        [XmlIgnore] private List<MD_constraints_PropertyType> _metadataConstraints;
        [XmlIgnore] private List<MD_metadataExtensionInformation_PropertyType> _metadataExtensionInfo;
        [XmlIgnore] private MD_maintenanceInformation_PropertyType _metadataMaintenance;
        [XmlIgnore] private CharacterStringPropertyType _metadataStandardName;
        [XmlIgnore] private CharacterStringPropertyType _metadataStandardVersion;
        [XmlIgnore] private CharacterStringPropertyType _parentIdentifier;
        [XmlIgnore] private List<MD_portrayalCatalogueReference_PropertyType> _portrayalCatalogueInfo;
        [XmlIgnore] private List<ObjectReferencePropertyType> _propertyType;
        [XmlIgnore] private List<MD_referenceSystem_PropertyType> _referenceSystemInfo;
        [XmlIgnore] private List<DS_aggregate_PropertyType> _series;
        [XmlIgnore] private List<MD_spatialRepresentation_PropertyType> _spatialRepresentationInfo;

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "fileIdentifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType FileIdentifier
        {
            get { return _fileIdentifier; }
            set { _fileIdentifier = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "language", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType Language
        {
            get { return _language; }
            set { _language = value; }
        }

        [XmlElement(Type = typeof (MD_characterSetCode_PropertyType), ElementName = "characterSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_characterSetCode_PropertyType CharacterSet
        {
            get { return _characterSet; }
            set { _characterSet = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "parentIdentifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType ParentIdentifier
        {
            get { return _parentIdentifier; }
            set { _parentIdentifier = value; }
        }

        [XmlElement(Type = typeof (MD_scopeCode_PropertyType), ElementName = "hierarchyLevel", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_scopeCode_PropertyType> HierarchyLevel
        {
            get
            {
                if (_hierarchyLevel == null) _hierarchyLevel = new List<MD_scopeCode_PropertyType>();
                return _hierarchyLevel;
            }
            set { _hierarchyLevel = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "hierarchyLevelName", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterStringPropertyType> HierarchyLevelName
        {
            get
            {
                if (_hierarchyLevelName == null) _hierarchyLevelName = new List<CharacterStringPropertyType>();
                return _hierarchyLevelName;
            }
            set { _hierarchyLevelName = value; }
        }

        [XmlElement(Type = typeof (CI_responsibleParty_PropertyType), ElementName = "contact", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_responsibleParty_PropertyType> Contact
        {
            get
            {
                if (_contact == null) _contact = new List<CI_responsibleParty_PropertyType>();
                return _contact;
            }
            set { _contact = value; }
        }

        [XmlElement(Type = typeof (DatePropertyType), ElementName = "dateStamp", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DatePropertyType DateStamp
        {
            get { return _dateStamp; }
            set { _dateStamp = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "metadataStandardName",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType MetadataStandardName
        {
            get { return _metadataStandardName; }
            set { _metadataStandardName = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "metadataStandardVersion",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType MetadataStandardVersion
        {
            get { return _metadataStandardVersion; }
            set { _metadataStandardVersion = value; }
        }

        [XmlElement(Type = typeof (CharacterStringPropertyType), ElementName = "dataSetURI", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterStringPropertyType DataSetURI
        {
            get { return _dataSetURI; }
            set { _dataSetURI = value; }
        }

        [XmlElement(Type = typeof (PT_locale_PropertyType), ElementName = "locale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<PT_locale_PropertyType> Locale
        {
            get
            {
                if (_locale == null) _locale = new List<PT_locale_PropertyType>();
                return _locale;
            }
            set { _locale = value; }
        }

        [XmlElement(Type = typeof (MD_spatialRepresentation_PropertyType), ElementName = "spatialRepresentationInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_spatialRepresentation_PropertyType> SpatialRepresentationInfo
        {
            get
            {
                if (_spatialRepresentationInfo == null)
                    _spatialRepresentationInfo = new List<MD_spatialRepresentation_PropertyType>();
                return _spatialRepresentationInfo;
            }
            set { _spatialRepresentationInfo = value; }
        }

        [XmlElement(Type = typeof (MD_referenceSystem_PropertyType), ElementName = "referenceSystemInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_referenceSystem_PropertyType> ReferenceSystemInfo
        {
            get
            {
                if (_referenceSystemInfo == null) _referenceSystemInfo = new List<MD_referenceSystem_PropertyType>();
                return _referenceSystemInfo;
            }
            set { _referenceSystemInfo = value; }
        }

        [XmlElement(Type = typeof (MD_metadataExtensionInformation_PropertyType), ElementName = "metadataExtensionInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_metadataExtensionInformation_PropertyType> MetadataExtensionInfo
        {
            get
            {
                if (_metadataExtensionInfo == null)
                    _metadataExtensionInfo = new List<MD_metadataExtensionInformation_PropertyType>();
                return _metadataExtensionInfo;
            }
            set { _metadataExtensionInfo = value; }
        }

        [XmlElement(Type = typeof (MD_identification_PropertyType), ElementName = "identificationInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_identification_PropertyType> IdentificationInfo
        {
            get
            {
                if (_identificationInfo == null) _identificationInfo = new List<MD_identification_PropertyType>();
                return _identificationInfo;
            }
            set { _identificationInfo = value; }
        }

        [XmlElement(Type = typeof (MD_contentInformation_PropertyType), ElementName = "contentInfo", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_contentInformation_PropertyType> ContentInfo
        {
            get
            {
                if (_contentInfo == null) _contentInfo = new List<MD_contentInformation_PropertyType>();
                return _contentInfo;
            }
            set { _contentInfo = value; }
        }

        [XmlElement(Type = typeof (MD_distribution_PropertyType), ElementName = "distributionInfo", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_distribution_PropertyType DistributionInfo
        {
            get { return _distributionInfo; }
            set { _distributionInfo = value; }
        }

        [XmlElement(Type = typeof (DQ_dataQuality_PropertyType), ElementName = "dataQualityInfo", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DQ_dataQuality_PropertyType> DataQualityInfo
        {
            get
            {
                if (_dataQualityInfo == null) _dataQualityInfo = new List<DQ_dataQuality_PropertyType>();
                return _dataQualityInfo;
            }
            set { _dataQualityInfo = value; }
        }

        [XmlElement(Type = typeof (MD_portrayalCatalogueReference_PropertyType), ElementName = "portrayalCatalogueInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_portrayalCatalogueReference_PropertyType> PortrayalCatalogueInfo
        {
            get
            {
                if (_portrayalCatalogueInfo == null)
                    _portrayalCatalogueInfo = new List<MD_portrayalCatalogueReference_PropertyType>();
                return _portrayalCatalogueInfo;
            }
            set { _portrayalCatalogueInfo = value; }
        }

        [XmlElement(Type = typeof (MD_constraints_PropertyType), ElementName = "metadataConstraints", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_constraints_PropertyType> MetadataConstraints
        {
            get
            {
                if (_metadataConstraints == null) _metadataConstraints = new List<MD_constraints_PropertyType>();
                return _metadataConstraints;
            }
            set { _metadataConstraints = value; }
        }

        [XmlElement(Type = typeof (MD_applicationSchemaInformation_PropertyType), ElementName = "applicationSchemaInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_applicationSchemaInformation_PropertyType> ApplicationSchemaInfo
        {
            get
            {
                if (_applicationSchemaInfo == null)
                    _applicationSchemaInfo = new List<MD_applicationSchemaInformation_PropertyType>();
                return _applicationSchemaInfo;
            }
            set { _applicationSchemaInfo = value; }
        }

        [XmlElement(Type = typeof (MD_maintenanceInformation_PropertyType), ElementName = "metadataMaintenance",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_maintenanceInformation_PropertyType MetadataMaintenance
        {
            get { return _metadataMaintenance; }
            set { _metadataMaintenance = value; }
        }

        [XmlElement(Type = typeof (DS_aggregate_PropertyType), ElementName = "series", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_aggregate_PropertyType> Series
        {
            get
            {
                if (_series == null) _series = new List<DS_aggregate_PropertyType>();
                return _series;
            }
            set { _series = value; }
        }

        [XmlElement(Type = typeof (DS_dataSet_PropertyType), ElementName = "describes", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_dataSet_PropertyType> Describes
        {
            get
            {
                if (_describes == null) _describes = new List<DS_dataSet_PropertyType>();
                return _describes;
            }
            set { _describes = value; }
        }

        [XmlElement(Type = typeof (ObjectReferencePropertyType), ElementName = "propertyType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReferencePropertyType> PropertyType
        {
            get
            {
                if (_propertyType == null) _propertyType = new List<ObjectReferencePropertyType>();
                return _propertyType;
            }
            set { _propertyType = value; }
        }

        [XmlElement(Type = typeof (ObjectReferencePropertyType), ElementName = "featureType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReferencePropertyType> FeatureType
        {
            get
            {
                if (_featureType == null) _featureType = new List<ObjectReferencePropertyType>();
                return _featureType;
            }
            set { _featureType = value; }
        }

        [XmlElement(Type = typeof (ObjectReferencePropertyType), ElementName = "featureAttribute", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReferencePropertyType> FeatureAttribute
        {
            get
            {
                if (_featureAttribute == null) _featureAttribute = new List<ObjectReferencePropertyType>();
                return _featureAttribute;
            }
            set { _featureAttribute = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CI_responsibleParty_PropertyType _c in Contact) _c.MakeSchemaCompliant();
            DateStamp.MakeSchemaCompliant();
            foreach (MD_identification_PropertyType _c in IdentificationInfo) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_metadata_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_metadata_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private MD_metadata _mD_Metadata;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public MD_metadata_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_metadata), ElementName = "MD_metadata", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_metadata MD_metadata
        {
            get { return _mD_Metadata; }
            set { _mD_Metadata = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            MD_metadata.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDS_aggregate_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractDS_aggregate_Type : AbstractObjectType
    {
        [XmlIgnore] private List<DS_dataSet_PropertyType> _composedOf;

        [XmlIgnore] private List<MD_metadata_PropertyType> _seriesMetadata;

        [XmlIgnore] private List<DS_aggregate_PropertyType> _subset;

        [XmlIgnore] private List<DS_aggregate_PropertyType> _superset;

        [XmlElement(Type = typeof (DS_dataSet_PropertyType), ElementName = "composedOf", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_dataSet_PropertyType> ComposedOf
        {
            get
            {
                if (_composedOf == null) _composedOf = new List<DS_dataSet_PropertyType>();
                return _composedOf;
            }
            set { _composedOf = value; }
        }

        [XmlElement(Type = typeof (MD_metadata_PropertyType), ElementName = "seriesMetadata", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_metadata_PropertyType> SeriesMetadata
        {
            get
            {
                if (_seriesMetadata == null) _seriesMetadata = new List<MD_metadata_PropertyType>();
                return _seriesMetadata;
            }
            set { _seriesMetadata = value; }
        }

        [XmlElement(Type = typeof (DS_aggregate_PropertyType), ElementName = "subset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_aggregate_PropertyType> Subset
        {
            get
            {
                if (_subset == null) _subset = new List<DS_aggregate_PropertyType>();
                return _subset;
            }
            set { _subset = value; }
        }

        [XmlElement(Type = typeof (DS_aggregate_PropertyType), ElementName = "superset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_aggregate_PropertyType> Superset
        {
            get
            {
                if (_superset == null) _superset = new List<DS_aggregate_PropertyType>();
                return _superset;
            }
            set { _superset = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DS_dataSet_PropertyType _c in ComposedOf) _c.MakeSchemaCompliant();
            foreach (MD_metadata_PropertyType _c in SeriesMetadata) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_aggregate_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (DS_otherAggregate_Type))]
    [XmlInclude(typeof (DS_series_Type))]
    [XmlInclude(typeof (DS_initiative_Type))]
    public class DS_aggregate_PropertyType
    {
        [XmlIgnore] private AbstractDS_aggregate _abstractDS_Aggregate;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_aggregate_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDS_aggregate), ElementName = "AbstractDS_aggregate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDS_aggregate AbstractDS_aggregate
        {
            get { return _abstractDS_Aggregate; }
            set { _abstractDS_Aggregate = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDS_aggregate.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_dataSet_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_dataSet_Type : AbstractObjectType
    {
        [XmlIgnore] private List<MD_metadata_PropertyType> _has;

        [XmlIgnore] private List<DS_aggregate_PropertyType> _partOf;

        [XmlElement(Type = typeof (MD_metadata_PropertyType), ElementName = "has", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_metadata_PropertyType> Has
        {
            get
            {
                if (_has == null) _has = new List<MD_metadata_PropertyType>();
                return _has;
            }
            set { _has = value; }
        }

        [XmlElement(Type = typeof (DS_aggregate_PropertyType), ElementName = "partOf", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_aggregate_PropertyType> PartOf
        {
            get
            {
                if (_partOf == null) _partOf = new List<DS_aggregate_PropertyType>();
                return _partOf;
            }
            set { _partOf = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (MD_metadata_PropertyType _c in Has) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_dataSet_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_dataSet_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_dataSet _dS_DataSet;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_dataSet_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_dataSet), ElementName = "DS_dataSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_dataSet DS_dataSet
        {
            get { return _dS_DataSet; }
            set { _dS_DataSet = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_dataSet.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_otherAggregate_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_otherAggregate_Type : AbstractDS_aggregate_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_otherAggregate_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_otherAggregate_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_otherAggregate _dS_OtherAggregate;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_otherAggregate_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_otherAggregate), ElementName = "DS_otherAggregate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_otherAggregate DS_otherAggregate
        {
            get { return _dS_OtherAggregate; }
            set { _dS_OtherAggregate = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_otherAggregate.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_series_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_series_Type : AbstractDS_aggregate_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_series_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_series_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_series _dS_Series;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_series_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_series), ElementName = "DS_series", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_series DS_series
        {
            get { return _dS_Series; }
            set { _dS_Series = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_series.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_initiative_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_initiative_Type : AbstractDS_aggregate_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_initiative_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_initiative_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_initiative _dS_Initiative;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_initiative_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_initiative), ElementName = "DS_initiative", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_initiative DS_initiative
        {
            get { return _dS_Initiative; }
            set { _dS_Initiative = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_initiative.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_platform_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_platform_Type : DS_series_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_platform_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_platform_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_platform _dS_Platform;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_platform_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_platform), ElementName = "DS_platform", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_platform DS_platform
        {
            get { return _dS_Platform; }
            set { _dS_Platform = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_platform.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_sensor_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_sensor_Type : DS_series_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_sensor_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_sensor_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_sensor _dS_Sensor;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_sensor_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_sensor), ElementName = "DS_sensor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_sensor DS_sensor
        {
            get { return _dS_Sensor; }
            set { _dS_Sensor = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_sensor.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_productionSeries_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_productionSeries_Type : DS_series_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_productionSeries_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DS_productionSeries_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_productionSeries _dS_ProductionSeries;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_productionSeries_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_productionSeries), ElementName = "DS_productionSeries", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_productionSeries DS_productionSeries
        {
            get { return _dS_ProductionSeries; }
            set { _dS_ProductionSeries = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_productionSeries.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_stereoMate_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_stereoMate_Type : DS_otherAggregate_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_stereoMate_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_stereoMate_PropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DS_stereoMate _dS_StereoMate;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private String _uuidref;

        public DS_stereoMate_PropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public String Uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_stereoMate), ElementName = "DS_stereoMate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_stereoMate DS_stereoMate
        {
            get { return _dS_StereoMate; }
            set { _dS_StereoMate = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DS_stereoMate.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "IdentifiedObjectType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class IdentifiedObjectType : DefinitionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCRSType : IdentifiedObjectType
    {
        [XmlIgnore] private List<DomainOfValidity> _domainOfValidity;

        [XmlIgnore] private List<String> _scope;

        [XmlElement(Type = typeof (DomainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DomainOfValidity> DomainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new List<DomainOfValidity>();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (String), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<String> Scope
        {
            get
            {
                if (_scope == null) _scope = new List<String>();
                return _scope;
            }
            set { _scope = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeographicCRSType))]
    [XmlInclude(typeof (GeocentricCRSType))]
    [XmlInclude(typeof (TemporalCRSType))]
    [XmlInclude(typeof (AbstractGeneralDerivedCRSType))]
    [XmlInclude(typeof (ImageCRSType))]
    [XmlInclude(typeof (GeodeticCRSType))]
    [XmlInclude(typeof (CompoundCRSType))]
    [XmlInclude(typeof (VerticalCRSType))]
    [XmlInclude(typeof (EngineeringCRSType))]
    public class CRSPropertyType
    {
        [XmlIgnore] private AbstractCRS _abstractCRS;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractCRS), ElementName = "AbstractCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCRS AbstractCRS
        {
            get { return _abstractCRS; }
            set { _abstractCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoordinateSystemAxisType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CoordinateSystemAxisType : IdentifiedObjectType
    {
        [XmlIgnore] private AxisAbbrev _axisAbbrev;

        [XmlIgnore] private AxisDirection _axisDirection;
        [XmlIgnore] private Double _maximumValue;

        [XmlIgnore] public bool MaximumValueSpecified;

        [XmlIgnore] private Double _minimumValue;

        [XmlIgnore] public bool MinimumValueSpecified;
        [XmlIgnore] private RangeMeaning _rangeMeaning;
        [XmlIgnore] private String _uom;

        [XmlAttribute(AttributeName = "uom")]
        public String Uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        [XmlElement(Type = typeof (AxisAbbrev), ElementName = "axisAbbrev", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AxisAbbrev AxisAbbrev
        {
            get
            {
                
                return _axisAbbrev;
            }
            set { _axisAbbrev = value; }
        }

        [XmlElement(Type = typeof (AxisDirection), ElementName = "axisDirection", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AxisDirection AxisDirection
        {
            get
            {
                
                return _axisDirection;
            }
            set { _axisDirection = value; }
        }


        [XmlElement(ElementName = "minimumValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public Double MinimumValue
        {
            get { return _minimumValue; }
            set
            {
                _minimumValue = value;
                MinimumValueSpecified = true;
            }
        }


        [XmlElement(ElementName = "maximumValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public Double MaximumValue
        {
            get { return _maximumValue; }
            set
            {
                _maximumValue = value;
                MaximumValueSpecified = true;
            }
        }

        [XmlElement(Type = typeof (RangeMeaning), ElementName = "rangeMeaning", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public RangeMeaning RangeMeaning
        {
            get
            {
                
                return _rangeMeaning;
            }
            set { _rangeMeaning = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            AxisAbbrev.MakeSchemaCompliant();
            AxisDirection.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoordinateSystemAxisPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CoordinateSystemAxisPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CoordinateSystemAxis _coordinateSystemAxis;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CoordinateSystemAxisPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CoordinateSystemAxis), ElementName = "CoordinateSystemAxis", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoordinateSystemAxis CoordinateSystemAxis
        {
            get
            {
                
                return _coordinateSystemAxis;
            }
            set { _coordinateSystemAxis = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CoordinateSystemAxis.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCoordinateSystemType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCoordinateSystemType : IdentifiedObjectType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<Axis> _axis;

        [XmlIgnore]
        public Axis this[int index]
        {
            get { return Axis[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return Axis.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Axis), ElementName = "axis", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Axis> Axis
        {
            get
            {
                if (_axis == null) _axis = new List<Axis>();
                return _axis;
            }
            set { _axis = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Axis.GetEnumerator();
        }

        public void Add(Axis obj)
        {
            Axis.Add(obj);
        }

        public void Clear()
        {
            Axis.Clear();
        }

        public Axis Remove(Int32 index)
        {
            Axis obj = Axis[index];
            Axis.Remove(obj);
            return obj;
        }

        public bool Remove(Axis obj)
        {
            return Axis.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (Axis _c in Axis) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoordinateSystemPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (VerticalCSType))]
    [XmlInclude(typeof (TimeCSType))]
    [XmlInclude(typeof (LinearCSType))]
    [XmlInclude(typeof (SphericalCSType))]
    [XmlInclude(typeof (EllipsoidalCSType))]
    [XmlInclude(typeof (AffineCSType))]
    [XmlInclude(typeof (TemporalCSType))]
    [XmlInclude(typeof (UserDefinedCSType))]
    [XmlInclude(typeof (PolarCSType))]
    [XmlInclude(typeof (CylindricalCSType))]
    [XmlInclude(typeof (ObliqueCartesianCSType))]
    [XmlInclude(typeof (CartesianCSType))]
    public class CoordinateSystemPropertyType
    {
        [XmlIgnore] private AbstractCoordinateSystem _abstractCoordinateSystem;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CoordinateSystemPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractCoordinateSystem), ElementName = "AbstractCoordinateSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCoordinateSystem AbstractCoordinateSystem
        {
            get { return _abstractCoordinateSystem; }
            set { _abstractCoordinateSystem = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractCoordinateSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EllipsoidalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EllipsoidalCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EllipsoidalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EllipsoidalCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EllipsoidalCS _ellipsoidalCS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public EllipsoidalCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (EllipsoidalCS), ElementName = "EllipsoidalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public EllipsoidalCS EllipsoidalCS
        {
            get
            {
                
                return _ellipsoidalCS;
            }
            set { _ellipsoidalCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EllipsoidalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CartesianCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CartesianCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CartesianCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CartesianCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CartesianCS _cartesianCS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CartesianCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CartesianCS), ElementName = "CartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CartesianCS CartesianCS
        {
            get
            {
                
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CartesianCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private VerticalCS _verticalCS;

        public VerticalCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (VerticalCS), ElementName = "VerticalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VerticalCS VerticalCS
        {
            get
            {
                
                return _verticalCS;
            }
            set { _verticalCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            VerticalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TimeCS _timeCS;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TimeCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeCS), ElementName = "TimeCS", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public TimeCS TimeCS
        {
            get
            {
                
                return _timeCS;
            }
            set { _timeCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TimeCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LinearCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LinearCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LinearCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LinearCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private LinearCS _linearCS;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public LinearCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (LinearCS), ElementName = "LinearCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LinearCS LinearCS
        {
            get
            {
                
                return _linearCS;
            }
            set { _linearCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            LinearCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UserDefinedCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class UserDefinedCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UserDefinedCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class UserDefinedCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private UserDefinedCS _userDefinedCS;

        public UserDefinedCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (UserDefinedCS), ElementName = "UserDefinedCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UserDefinedCS UserDefinedCS
        {
            get
            {
                
                return _userDefinedCS;
            }
            set { _userDefinedCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            UserDefinedCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SphericalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SphericalCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SphericalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SphericalCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private SphericalCS _sphericalCS;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public SphericalCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (SphericalCS), ElementName = "SphericalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SphericalCS SphericalCS
        {
            get
            {
                
                return _sphericalCS;
            }
            set { _sphericalCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            SphericalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PolarCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PolarCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PolarCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PolarCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private PolarCS _polarCS;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public PolarCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (PolarCS), ElementName = "PolarCS", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PolarCS PolarCS
        {
            get
            {
                
                return _polarCS;
            }
            set { _polarCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            PolarCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CylindricalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CylindricalCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CylindricalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CylindricalCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CylindricalCS _cylindricalCS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CylindricalCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CylindricalCS), ElementName = "CylindricalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CylindricalCS CylindricalCS
        {
            get
            {
                
                return _cylindricalCS;
            }
            set { _cylindricalCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CylindricalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AffineCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AffineCSType : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AffineCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AffineCSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private AffineCS _affineCS;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public AffineCSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AffineCS), ElementName = "AffineCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AffineCS AffineCS
        {
            get
            {
                
                return _affineCS;
            }
            set { _affineCS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AffineCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractDatumType : IdentifiedObjectType
    {
        [XmlIgnore] private AnchorDefinition _anchorDefinition;
        [XmlIgnore] private DomainOfValidity _domainOfValidity;
        [XmlIgnore] private DateTime _realizationEpoch;

        [XmlIgnore] public bool RealizationEpochSpecified;

        [XmlIgnore] private List<String> _scope;

        public AbstractDatumType()
        {
            _realizationEpoch = DateTime.Now;
        }

        [XmlElement(Type = typeof (DomainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DomainOfValidity DomainOfValidity
        {
            get
            {
                
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (String), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<String> Scope
        {
            get
            {
                if (_scope == null) _scope = new List<String>();
                return _scope;
            }
            set { _scope = value; }
        }

        [XmlElement(Type = typeof (AnchorDefinition), ElementName = "anchorDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AnchorDefinition AnchorDefinition
        {
            get
            {
                
                return _anchorDefinition;
            }
            set { _anchorDefinition = value; }
        }


        [XmlElement(ElementName = "realizationEpoch", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "date", Namespace = Declarations.SchemaVersion)]
        public DateTime RealizationEpoch
        {
            get { return _realizationEpoch; }
            set
            {
                _realizationEpoch = value;
                RealizationEpochSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime RealizationEpochUtc
        {
            get { return _realizationEpoch.ToUniversalTime(); }
            set
            {
                _realizationEpoch = value.ToLocalTime();
                RealizationEpochSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (EngineeringDatumType))]
    [XmlInclude(typeof (VerticalDatumType))]
    [XmlInclude(typeof (ImageDatumType))]
    [XmlInclude(typeof (TemporalDatumBaseType))]
    [XmlInclude(typeof (GeodeticDatumType))]
    public class DatumPropertyType
    {
        [XmlIgnore] private AbstractDatum _abstractDatum;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public DatumPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractDatum), ElementName = "AbstractDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractDatum AbstractDatum
        {
            get { return _abstractDatum; }
            set { _abstractDatum = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodeticDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodeticDatumType : AbstractDatumType
    {
        [XmlIgnore] private Ellipsoid_E _ellipsoid;
        [XmlIgnore] private PrimeMeridian_E _primeMeridian;

        [XmlElement(Type = typeof (PrimeMeridian_E), ElementName = "primeMeridian", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PrimeMeridian_E PrimeMeridian
        {
            get
            {
                
                return _primeMeridian;
            }
            set { _primeMeridian = value; }
        }

        [XmlElement(Type = typeof (Ellipsoid_E), ElementName = "ellipsoid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Ellipsoid_E Ellipsoid
        {
            get
            {
                
                return _ellipsoid;
            }
            set { _ellipsoid = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            PrimeMeridian.MakeSchemaCompliant();
            Ellipsoid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodeticDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodeticDatumPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private GeodeticDatum _geodeticDatum;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public GeodeticDatumPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeodeticDatum), ElementName = "GeodeticDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeodeticDatum GeodeticDatum
        {
            get
            {
                
                return _geodeticDatum;
            }
            set { _geodeticDatum = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            GeodeticDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EllipsoidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EllipsoidType : IdentifiedObjectType
    {
        [XmlIgnore] private SecondDefiningParameter_E _secondDefiningParameter;
        [XmlIgnore] private SemiMajorAxis _semiMajorAxis;

        [XmlElement(Type = typeof (SemiMajorAxis), ElementName = "semiMajorAxis", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SemiMajorAxis SemiMajorAxis
        {
            get
            {
                
                return _semiMajorAxis;
            }
            set { _semiMajorAxis = value; }
        }

        [XmlElement(Type = typeof (SecondDefiningParameter_E), ElementName = "secondDefiningParameter", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SecondDefiningParameter_E SecondDefiningParameter
        {
            get
            {
                
                return _secondDefiningParameter;
            }
            set { _secondDefiningParameter = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            SemiMajorAxis.MakeSchemaCompliant();
            SecondDefiningParameter.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EllipsoidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EllipsoidPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Ellipsoid _ellipsoid;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public EllipsoidPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Ellipsoid), ElementName = "Ellipsoid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Ellipsoid Ellipsoid
        {
            get
            {
                
                return _ellipsoid;
            }
            set { _ellipsoid = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Ellipsoid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PrimeMeridianType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PrimeMeridianType : IdentifiedObjectType
    {
        [XmlIgnore] private GreenwichLongitude _greenwichLongitude;

        [XmlElement(Type = typeof (GreenwichLongitude), ElementName = "greenwichLongitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GreenwichLongitude GreenwichLongitude
        {
            get
            {
                
                return _greenwichLongitude;
            }
            set { _greenwichLongitude = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            GreenwichLongitude.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PrimeMeridianPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PrimeMeridianPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private PrimeMeridian _primeMeridian;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public PrimeMeridianPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (PrimeMeridian), ElementName = "PrimeMeridian", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PrimeMeridian PrimeMeridian
        {
            get
            {
                
                return _primeMeridian;
            }
            set { _primeMeridian = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            PrimeMeridian.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EngineeringDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EngineeringDatumType : AbstractDatumType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EngineeringDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EngineeringDatumPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EngineeringDatum _engineeringDatum;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public EngineeringDatumPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (EngineeringDatum), ElementName = "EngineeringDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public EngineeringDatum EngineeringDatum
        {
            get
            {
                
                return _engineeringDatum;
            }
            set { _engineeringDatum = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EngineeringDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ImageDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ImageDatumType : AbstractDatumType
    {
        [XmlIgnore] private PixelInCell _pixelInCell;

        [XmlElement(Type = typeof (PixelInCell), ElementName = "pixelInCell", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PixelInCell PixelInCell
        {
            get
            {
                
                return _pixelInCell;
            }
            set { _pixelInCell = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            PixelInCell.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ImageDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ImageDatumPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private ImageDatum _imageDatum;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public ImageDatumPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ImageDatum), ElementName = "ImageDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ImageDatum ImageDatum
        {
            get
            {
                
                return _imageDatum;
            }
            set { _imageDatum = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            ImageDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalDatumType : AbstractDatumType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalDatumPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private VerticalDatum _verticalDatum;

        public VerticalDatumPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (VerticalDatum), ElementName = "VerticalDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VerticalDatum VerticalDatum
        {
            get
            {
                
                return _verticalDatum;
            }
            set { _verticalDatum = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            VerticalDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalDatumType : TemporalDatumBaseType
    {
        [XmlIgnore] private DateTime _origin;

        [XmlIgnore] public bool OriginSpecified;

        public TemporalDatumType()
        {
            Origin = DateTime.Now;
        }


        [XmlElement(ElementName = "origin", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = Declarations.SchemaVersion)]
        public DateTime Origin
        {
            get { return _origin; }
            set
            {
                _origin = value;
                OriginSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime OriginUtc
        {
            get { return _origin.ToUniversalTime(); }
            set
            {
                _origin = value.ToLocalTime();
                OriginSpecified = true;
            }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalDatumBaseType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class TemporalDatumBaseType : AbstractDatumType
    {
        [XmlIgnore] private Description _description;
        [XmlIgnore] private DescriptionReference _descriptionReference;
        [XmlIgnore] private DomainOfValidity _domainOfValidity;
        [XmlIgnore] private String _id;
        [XmlIgnore] private Identifier _identifier;

        [XmlIgnore] private List<MetaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<Name> _name;
        [XmlIgnore] private String _remarks;
        [XmlIgnore] private List<String> _scope;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public String Id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (MetaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<MetaDataProperty> MetaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<MetaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (Description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Description Description
        {
            get
            {
                
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (DescriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DescriptionReference DescriptionReference
        {
            get
            {
                
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (Identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Identifier Identifier
        {
            get
            {
                
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (Name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Name> Name
        {
            get
            {
                if (_name == null) _name = new List<Name>();
                return _name;
            }
            set { _name = value; }
        }

        [XmlElement(ElementName = "remarks", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string",
            Namespace = Declarations.SchemaVersion)]
        public String Remarks
        {
            get { return _remarks; }
            set { _remarks = value; }
        }

        [XmlElement(Type = typeof (DomainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DomainOfValidity DomainOfValidity
        {
            get
            {
                
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (String), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<String> Scope
        {
            get
            {
                if (_scope == null) _scope = new List<String>();
                return _scope;
            }
            set { _scope = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalDatumPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TemporalDatum _temporalDatum;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TemporalDatumPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TemporalDatum), ElementName = "TemporalDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TemporalDatum TemporalDatum
        {
            get
            {
                
                return _temporalDatum;
            }
            set { _temporalDatum = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TemporalDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCoordinateOperationType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCoordinateOperationType : IdentifiedObjectType
    {
        [XmlIgnore] private List<CoordinateOperationAccuracy> _coordinateOperationAccuracy;
        [XmlIgnore] private DomainOfValidity _domainOfValidity;
        [XmlIgnore] private String _operationVersion;

        [XmlIgnore] private List<String> _scope;
        [XmlIgnore] private SourceCRSProperty _sourceCRS;
        [XmlIgnore] private TargetCRSProperty _targetCrsProperty;

        [XmlElement(Type = typeof (DomainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DomainOfValidity DomainOfValidity
        {
            get
            {
                
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (String), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<String> Scope
        {
            get
            {
                if (_scope == null) _scope = new List<String>();
                return _scope;
            }
            set { _scope = value; }
        }

        [XmlElement(ElementName = "operationVersion", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public String OperationVersion
        {
            get { return _operationVersion; }
            set { _operationVersion = value; }
        }

        [XmlElement(Type = typeof (CoordinateOperationAccuracy), ElementName = "coordinateOperationAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<CoordinateOperationAccuracy> CoordinateOperationAccuracy
        {
            get
            {
                if (_coordinateOperationAccuracy == null)
                    _coordinateOperationAccuracy = new List<CoordinateOperationAccuracy>();
                return _coordinateOperationAccuracy;
            }
            set { _coordinateOperationAccuracy = value; }
        }

        [XmlElement(Type = typeof (SourceCRSProperty), ElementName = "sourceCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SourceCRSProperty SourceCRS
        {
            get
            {
                
                return _sourceCRS;
            }
            set { _sourceCRS = value; }
        }

        [XmlElement(Type = typeof (TargetCRSProperty), ElementName = "targetCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TargetCRSProperty TargetCRS
        {
            get
            {
                
                return _targetCrsProperty;
            }
            set { _targetCrsProperty = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoordinateOperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractGeneralTransformationType))]
    [XmlInclude(typeof (PassThroughOperationType))]
    [XmlInclude(typeof (ConcatenatedOperationType))]
    [XmlInclude(typeof (AbstractGeneralConversionType))]
    public class CoordinateOperationPropertyType
    {
        [XmlIgnore] private AbstractCoordinateOperation _abstractCoordinateOperation;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CoordinateOperationPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractCoordinateOperation), ElementName = "AbstractCoordinateOperation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCoordinateOperation AbstractCoordinateOperation
        {
            get { return _abstractCoordinateOperation; }
            set { _abstractCoordinateOperation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractCoordinateOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SingleOperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractGeneralTransformationType))]
    [XmlInclude(typeof (PassThroughOperationType))]
    [XmlInclude(typeof (ConcatenatedOperationType))]
    [XmlInclude(typeof (AbstractGeneralConversionType))]
    public class SingleOperationPropertyType
    {
        [XmlIgnore] private AbstractSingleOperation _abstractSingleOperation;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public SingleOperationPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractSingleOperation), ElementName = "AbstractSingleOperation", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractSingleOperation AbstractSingleOperation
        {
            get { return _abstractSingleOperation; }
            set { _abstractSingleOperation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractSingleOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralConversionType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralConversionType : AbstractCoordinateOperationType
    {
        [XmlIgnore] private List<CoordinateOperationAccuracy> _coordinateOperationAccuracy;
        [XmlIgnore] private Description _description;
        [XmlIgnore] private DescriptionReference _descriptionReference;
        [XmlIgnore] private DomainOfValidity _domainOfValidity;
        [XmlIgnore] private String _id;
        [XmlIgnore] private Identifier _identifier;

        [XmlIgnore] private List<MetaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<Name> _name;
        [XmlIgnore] private String _remarks;
        [XmlIgnore] private List<String> _scope;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public String Id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (MetaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<MetaDataProperty> MetaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<MetaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (Description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Description Description
        {
            get
            {
                
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (DescriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DescriptionReference DescriptionReference
        {
            get
            {
                
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (Identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Identifier Identifier
        {
            get
            {
                
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (Name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Name> Name
        {
            get
            {
                if (_name == null) _name = new List<Name>();
                return _name;
            }
            set { _name = value; }
        }

        [XmlElement(ElementName = "remarks", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string",
            Namespace = Declarations.SchemaVersion)]
        public String Remarks
        {
            get { return _remarks; }
            set { _remarks = value; }
        }

        [XmlElement(Type = typeof (DomainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DomainOfValidity DomainOfValidity
        {
            get
            {
                
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (String), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<String> Scope
        {
            get
            {
                if (_scope == null) _scope = new List<String>();
                return _scope;
            }
            set { _scope = value; }
        }

        [XmlElement(Type = typeof (CoordinateOperationAccuracy), ElementName = "coordinateOperationAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<CoordinateOperationAccuracy> CoordinateOperationAccuracy
        {
            get
            {
                if (_coordinateOperationAccuracy == null)
                    _coordinateOperationAccuracy = new List<CoordinateOperationAccuracy>();
                return _coordinateOperationAccuracy;
            }
            set { _coordinateOperationAccuracy = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeneralConversionPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (ConversionType))]
    public class GeneralConversionPropertyType
    {
        [XmlIgnore] private AbstractGeneralConversion _abstractGeneralConversion;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public GeneralConversionPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeneralConversion), ElementName = "AbstractGeneralConversion",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeneralConversion AbstractGeneralConversion
        {
            get { return _abstractGeneralConversion; }
            set { _abstractGeneralConversion = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeneralConversion.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralTransformationType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralTransformationType : AbstractCoordinateOperationType
    {
        [XmlIgnore] private List<CoordinateOperationAccuracy> _coordinateOperationAccuracy;
        [XmlIgnore] private Description _description;
        [XmlIgnore] private DescriptionReference _descriptionReference;
        [XmlIgnore] private DomainOfValidity _domainOfValidity;
        [XmlIgnore] private String _id;
        [XmlIgnore] private Identifier _identifier;

        [XmlIgnore] private List<MetaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<Name> _name;
        [XmlIgnore] private String _operationVersion;
        [XmlIgnore] private String _remarks;
        [XmlIgnore] private List<String> _scope;
        [XmlIgnore] private SourceCRSProperty _sourceCRS;
        [XmlIgnore] private TargetCRSProperty _targetCrsProperty;

        public AbstractGeneralTransformationType()
        {
            OperationVersion = string.Empty;
        }

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public String Id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (MetaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<MetaDataProperty> MetaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<MetaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (Description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Description Description
        {
            get
            {
                
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (DescriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DescriptionReference DescriptionReference
        {
            get
            {
                
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (Identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Identifier Identifier
        {
            get
            {
                
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (Name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Name> Name
        {
            get
            {
                if (_name == null) _name = new List<Name>();
                return _name;
            }
            set { _name = value; }
        }

        [XmlElement(ElementName = "remarks", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string",
            Namespace = Declarations.SchemaVersion)]
        public String Remarks
        {
            get { return _remarks; }
            set { _remarks = value; }
        }

        [XmlElement(Type = typeof (DomainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DomainOfValidity DomainOfValidity
        {
            get
            {
                
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (String), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<String> Scope
        {
            get
            {
                if (_scope == null) _scope = new List<String>();
                return _scope;
            }
            set { _scope = value; }
        }

        [XmlElement(ElementName = "operationVersion", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public String OperationVersion
        {
            get { return _operationVersion; }
            set { _operationVersion = value; }
        }

        [XmlElement(Type = typeof (CoordinateOperationAccuracy), ElementName = "coordinateOperationAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<CoordinateOperationAccuracy> CoordinateOperationAccuracy
        {
            get
            {
                if (_coordinateOperationAccuracy == null)
                    _coordinateOperationAccuracy = new List<CoordinateOperationAccuracy>();
                return _coordinateOperationAccuracy;
            }
            set { _coordinateOperationAccuracy = value; }
        }

        [XmlElement(Type = typeof (SourceCRSProperty), ElementName = "sourceCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SourceCRSProperty SourceCRS
        {
            get
            {
                
                return _sourceCRS;
            }
            set { _sourceCRS = value; }
        }

        [XmlElement(Type = typeof (TargetCRSProperty), ElementName = "targetCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TargetCRSProperty TargetCRS
        {
            get
            {
                
                return _targetCrsProperty;
            }
            set { _targetCrsProperty = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Identifier.MakeSchemaCompliant();
            SourceCRS.MakeSchemaCompliant();
            TargetCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeneralTransformationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (TransformationType))]
    public class GeneralTransformationPropertyType
    {
        [XmlIgnore] private AbstractGeneralTransformation _abstractGeneralTransformation;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public GeneralTransformationPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeneralTransformation), ElementName = "AbstractGeneralTransformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeneralTransformation AbstractGeneralTransformation
        {
            get { return _abstractGeneralTransformation; }
            set { _abstractGeneralTransformation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeneralTransformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConcatenatedOperationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConcatenatedOperationType : AbstractCoordinateOperationType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<CoordOperationProperty> _coordOperation;

        [XmlIgnore]
        public CoordOperationProperty this[int index]
        {
            get { return CoordOperation[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return CoordOperation.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (CoordOperationProperty), ElementName = "coordOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<CoordOperationProperty> CoordOperation
        {
            get
            {
                if (_coordOperation == null) _coordOperation = new List<CoordOperationProperty>();
                return _coordOperation;
            }
            set { _coordOperation = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return CoordOperation.GetEnumerator();
        }

        public void Add(CoordOperationProperty obj)
        {
            CoordOperation.Add(obj);
        }

        public void Clear()
        {
            CoordOperation.Clear();
        }

        public CoordOperationProperty Remove(Int32 index)
        {
            CoordOperationProperty obj = CoordOperation[index];
            CoordOperation.Remove(obj);
            return obj;
        }

        public bool Remove(CoordOperationProperty obj)
        {
            return CoordOperation.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CoordOperationProperty _c in CoordOperation) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConcatenatedOperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConcatenatedOperationPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private ConcatenatedOperation _concatenatedOperation;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public ConcatenatedOperationPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ConcatenatedOperation), ElementName = "ConcatenatedOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ConcatenatedOperation ConcatenatedOperation
        {
            get
            {
                
                return _concatenatedOperation;
            }
            set { _concatenatedOperation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            ConcatenatedOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PassThroughOperationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PassThroughOperationType : AbstractCoordinateOperationType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private CoordOperationProperty _coordOperation;

        [XmlIgnore] private List<String> _modifiedCoordinate;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (String), ElementName = "modifiedCoordinate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public List<String> ModifiedCoordinate
        {
            get
            {
                if (_modifiedCoordinate == null) _modifiedCoordinate = new List<String>();
                return _modifiedCoordinate;
            }
            set { _modifiedCoordinate = value; }
        }

        [XmlElement(Type = typeof (CoordOperationProperty), ElementName = "coordOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoordOperationProperty CoordOperation
        {
            get
            {
                
                return _coordOperation;
            }
            set { _coordOperation = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            CoordOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PassThroughOperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PassThroughOperationPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private PassThroughOperation _passThroughOperation;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public PassThroughOperationPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (PassThroughOperation), ElementName = "PassThroughOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PassThroughOperation PassThroughOperation
        {
            get
            {
                
                return _passThroughOperation;
            }
            set { _passThroughOperation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            PassThroughOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConversionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConversionType : AbstractGeneralConversionType
    {
        [XmlIgnore] private MethodProperty _method;

        [XmlIgnore] private List<ParameterValueProperty> _parameterValue;

        [XmlElement(Type = typeof (MethodProperty), ElementName = "method", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public MethodProperty Method
        {
            get
            {
                
                return _method;
            }
            set { _method = value; }
        }

        [XmlElement(Type = typeof (ParameterValueProperty), ElementName = "parameterValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ParameterValueProperty> ParameterValue
        {
            get
            {
                if (_parameterValue == null) _parameterValue = new List<ParameterValueProperty>();
                return _parameterValue;
            }
            set { _parameterValue = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Method.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConversionPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConversionPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private Conversion _conversion;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public ConversionPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Conversion), ElementName = "Conversion", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Conversion Conversion
        {
            get
            {
                
                return _conversion;
            }
            set { _conversion = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Conversion.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TransformationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TransformationType : AbstractGeneralTransformationType
    {
        [XmlIgnore] private MethodProperty _method;

        [XmlIgnore] private List<ParameterValueProperty> _parameterValue;

        [XmlElement(Type = typeof (MethodProperty), ElementName = "method", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public MethodProperty Method
        {
            get
            {
                
                return _method;
            }
            set { _method = value; }
        }

        [XmlElement(Type = typeof (ParameterValueProperty), ElementName = "parameterValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ParameterValueProperty> ParameterValue
        {
            get
            {
                if (_parameterValue == null) _parameterValue = new List<ParameterValueProperty>();
                return _parameterValue;
            }
            set { _parameterValue = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Method.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TransformationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TransformationPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private Transformation _transformation;
        [XmlIgnore] private String _type;

        public TransformationPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Transformation), ElementName = "Transformation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Transformation Transformation
        {
            get
            {
                
                return _transformation;
            }
            set { _transformation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            Transformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralParameterValueType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralParameterValueType
    {
        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractGeneralParameterValuePropertyType", Namespace = Declarations.SchemaVersion),
     Serializable]
    [XmlInclude(typeof (ParameterValueGroupType))]
    [XmlInclude(typeof (ParameterValueType))]
    public class AbstractGeneralParameterValuePropertyType
    {
        [XmlIgnore] private AbstractGeneralParameterValue _abstractGeneralParameterValue;

        [XmlElement(Type = typeof (AbstractGeneralParameterValue), ElementName = "AbstractGeneralParameterValue",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeneralParameterValue AbstractGeneralParameterValue
        {
            get { return _abstractGeneralParameterValue; }
            set { _abstractGeneralParameterValue = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeneralParameterValue.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ParameterValueType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ParameterValueType : AbstractGeneralParameterValueType
    {
        [XmlIgnore] private Boolean _booleanValue;

        [XmlIgnore] public bool BooleanValueSpecified;
        [XmlIgnore] private DmsAngleValue _dmsAngleValue;
        [XmlIgnore] private String _integerValue;
        [XmlIgnore] private String _integerValueList;
        [XmlIgnore] private OperationParameterProperty _operationParameter;
        [XmlIgnore] private String _stringValue;
        [XmlIgnore] private Value _value;
        [XmlIgnore] private String _valueFile;
        [XmlIgnore] private ValueList _valueList;

        public ParameterValueType()
        {
            StringValue = string.Empty;
            IntegerValue = string.Empty;
            BooleanValueSpecified = true;
            ValueFile = string.Empty;
        }

        [XmlElement(Type = typeof (Value), ElementName = "value", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Value Value
        {
            get
            {
                
                return _value;
            }
            set { _value = value; }
        }

        [XmlElement(Type = typeof (DmsAngleValue), ElementName = "dmsAngleValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DmsAngleValue DmsAngleValue
        {
            get
            {
                
                return _dmsAngleValue;
            }
            set { _dmsAngleValue = value; }
        }

        [XmlElement(ElementName = "stringValue", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string"
            , Namespace = Declarations.SchemaVersion)]
        public String StringValue
        {
            get { return _stringValue; }
            set { _stringValue = value; }
        }

        [XmlElement(ElementName = "integerValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public String IntegerValue
        {
            get { return _integerValue; }
            set { _integerValue = value; }
        }


        [XmlElement(ElementName = "booleanValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "boolean", Namespace = Declarations.SchemaVersion)]
        public Boolean BooleanValue
        {
            get { return _booleanValue; }
            set
            {
                _booleanValue = value;
                BooleanValueSpecified = true;
            }
        }

        [XmlElement(Type = typeof (ValueList), ElementName = "valueList", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ValueList ValueList
        {
            get
            {
                
                return _valueList;
            }
            set { _valueList = value; }
        }

        [XmlElement(ElementName = "integerValueList", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public String IntegerValueList
        {
            get { return _integerValueList; }
            set { _integerValueList = value; }
        }

        [XmlElement(ElementName = "valueFile", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public String ValueFile
        {
            get { return _valueFile; }
            set { _valueFile = value; }
        }

        [XmlElement(Type = typeof (OperationParameterProperty), ElementName = "operationParameter", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public OperationParameterProperty OperationParameter
        {
            get
            {
                
                return _operationParameter;
            }
            set { _operationParameter = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Value.MakeSchemaCompliant();
            DmsAngleValue.MakeSchemaCompliant();
            ValueList.MakeSchemaCompliant();
            OperationParameter.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ParameterValueGroupType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ParameterValueGroupType : AbstractGeneralParameterValueType
    {
        [XmlIgnore] private GroupProperty _group;
        [XmlIgnore] private List<ParameterValueProperty> _parameterValue;

        [XmlElement(Type = typeof (ParameterValueProperty), ElementName = "parameterValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ParameterValueProperty> ParameterValue
        {
            get
            {
                if (_parameterValue == null) _parameterValue = new List<ParameterValueProperty>();
                return _parameterValue;
            }
            set { _parameterValue = value; }
        }

        [XmlElement(Type = typeof (GroupProperty), ElementName = "group", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public GroupProperty Group
        {
            get
            {
                
                return _group;
            }
            set { _group = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (ParameterValueProperty _c in ParameterValue) _c.MakeSchemaCompliant();
            Group.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationMethodType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationMethodType : IdentifiedObjectType
    {
        [XmlIgnore] private Formula _formula;
        [XmlIgnore] private FormulaCitation _formulaCitation;
        [XmlIgnore] private List<ParameterProperty> _parameter;
        [XmlIgnore] private String _sourceDimensions;
        [XmlIgnore] private String _targetDimensions;

        [XmlElement(Type = typeof (FormulaCitation), ElementName = "formulaCitation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public FormulaCitation FormulaCitation
        {
            get
            {
                
                return _formulaCitation;
            }
            set { _formulaCitation = value; }
        }

        [XmlElement(Type = typeof (Formula), ElementName = "formula", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public Formula Formula
        {
            get
            {
                
                return _formula;
            }
            set { _formula = value; }
        }

        [XmlElement(ElementName = "sourceDimensions", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public String SourceDimensions
        {
            get { return _sourceDimensions; }
            set { _sourceDimensions = value; }
        }

        [XmlElement(ElementName = "targetDimensions", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public String TargetDimensions
        {
            get { return _targetDimensions; }
            set { _targetDimensions = value; }
        }

        [XmlElement(Type = typeof (ParameterProperty), ElementName = "parameter", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ParameterProperty> Parameter
        {
            get
            {
                if (_parameter == null) _parameter = new List<ParameterProperty>();
                return _parameter;
            }
            set { _parameter = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            FormulaCitation.MakeSchemaCompliant();
            Formula.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationMethodPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationMethodPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private OperationMethod _operationMethod;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public OperationMethodPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (OperationMethod), ElementName = "OperationMethod", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public OperationMethod OperationMethod
        {
            get
            {
                
                return _operationMethod;
            }
            set { _operationMethod = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            OperationMethod.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralOperationParameterType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralOperationParameterType : IdentifiedObjectType
    {
        [XmlIgnore] private String _minimumOccurs;

        [XmlElement(ElementName = "minimumOccurs", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public String MinimumOccurs
        {
            get { return _minimumOccurs; }
            set { _minimumOccurs = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralOperationParameterPropertyType", Namespace = Declarations.SchemaVersion),
     Serializable]
    [XmlInclude(typeof (OperationParameterGroupType))]
    [XmlInclude(typeof (OperationParameterType))]
    public class AbstractGeneralOperationParameterPropertyType
    {
        [XmlIgnore] private AbstractGeneralOperationParameter _abstractGeneralOperationParameter;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public AbstractGeneralOperationParameterPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeneralOperationParameter), ElementName = "AbstractGeneralOperationParameter"
            , IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeneralOperationParameter AbstractGeneralOperationParameter
        {
            get { return _abstractGeneralOperationParameter; }
            set { _abstractGeneralOperationParameter = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractGeneralOperationParameter.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationParameterType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationParameterType : AbstractGeneralOperationParameterType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationParameterPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationParameterPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private OperationParameter _operationParameter;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public OperationParameterPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (OperationParameter), ElementName = "OperationParameter", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public OperationParameter OperationParameter
        {
            get
            {
                
                return _operationParameter;
            }
            set { _operationParameter = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            OperationParameter.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationParameterGroupType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationParameterGroupType : AbstractGeneralOperationParameterType
    {
        [XmlIgnore] private String _maximumOccurs;

        [XmlIgnore] private List<ParameterProperty> _parameter;

        [XmlElement(ElementName = "maximumOccurs", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public String MaximumOccurs
        {
            get { return _maximumOccurs; }
            set { _maximumOccurs = value; }
        }

        [XmlElement(Type = typeof (ParameterProperty), ElementName = "parameter", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ParameterProperty> Parameter
        {
            get
            {
                if (_parameter == null) _parameter = new List<ParameterProperty>();
                return _parameter;
            }
            set { _parameter = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (ParameterProperty _c in Parameter) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationParameterGroupPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationParameterGroupPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private OperationParameterGroup _operationParameterGroup;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public OperationParameterGroupPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (OperationParameterGroup), ElementName = "OperationParameterGroup", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public OperationParameterGroup OperationParameterGroup
        {
            get
            {
                
                return _operationParameterGroup;
            }
            set { _operationParameterGroup = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            OperationParameterGroup.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SingleCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeographicCRSType))]
    [XmlInclude(typeof (GeocentricCRSType))]
    [XmlInclude(typeof (TemporalCRSType))]
    [XmlInclude(typeof (AbstractGeneralDerivedCRSType))]
    [XmlInclude(typeof (ImageCRSType))]
    [XmlInclude(typeof (GeodeticCRSType))]
    [XmlInclude(typeof (CompoundCRSType))]
    [XmlInclude(typeof (VerticalCRSType))]
    [XmlInclude(typeof (EngineeringCRSType))]
    public class SingleCRSPropertyType
    {
        [XmlIgnore] private AbstractSingleCRS _abstractSingleCRS;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public SingleCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractSingleCRS), ElementName = "AbstractSingleCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractSingleCRS AbstractSingleCRS
        {
            get { return _abstractSingleCRS; }
            set { _abstractSingleCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractSingleCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralDerivedCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralDerivedCRSType : AbstractCRSType
    {
        [XmlIgnore] private ConversionProperty _conversion;

        [XmlElement(Type = typeof (ConversionProperty), ElementName = "conversion", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ConversionProperty Conversion
        {
            get
            {
                
                return _conversion;
            }
            set { _conversion = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Conversion.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompoundCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompoundCRSType : AbstractCRSType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool AggregationTypeSpecified;
        [XmlIgnore] private List<ComponentReferenceSystemProperty> _componentReferenceSystem;

        [XmlIgnore]
        public ComponentReferenceSystemProperty this[int index]
        {
            get { return ComponentReferenceSystem[index]; }
        }

        [XmlIgnore]
        public Int32 Count
        {
            get { return ComponentReferenceSystem.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType AggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                AggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (ComponentReferenceSystemProperty), ElementName = "componentReferenceSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ComponentReferenceSystemProperty> ComponentReferenceSystem
        {
            get
            {
                if (_componentReferenceSystem == null) _componentReferenceSystem = new List<ComponentReferenceSystemProperty>();
                return _componentReferenceSystem;
            }
            set { _componentReferenceSystem = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return ComponentReferenceSystem.GetEnumerator();
        }

        public void Add(ComponentReferenceSystemProperty obj)
        {
            ComponentReferenceSystem.Add(obj);
        }

        public void Clear()
        {
            ComponentReferenceSystem.Clear();
        }

        public ComponentReferenceSystemProperty Remove(Int32 index)
        {
            ComponentReferenceSystemProperty obj = ComponentReferenceSystem[index];
            ComponentReferenceSystem.Remove(obj);
            return obj;
        }

        public bool Remove(ComponentReferenceSystemProperty obj)
        {
            return ComponentReferenceSystem.Remove(obj);
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (ComponentReferenceSystemProperty _c in ComponentReferenceSystem) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompoundCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompoundCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CompoundCRS _compoundCRS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CompoundCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CompoundCRS), ElementName = "CompoundCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CompoundCRS CompoundCRS
        {
            get
            {
                
                return _compoundCRS;
            }
            set { _compoundCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CompoundCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodeticCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodeticCRSType : AbstractCRSType
    {
        [XmlIgnore] private CartesianCSProperty _cartesianCS;
        [XmlIgnore] private EllipsoidalCSProperty _ellipsoidalCS;
        [XmlIgnore] private GeodeticDatumProperty _geodeticDatum;
        [XmlIgnore] private SphericalCSProperty _sphericalCS;

        [XmlElement(Type = typeof (EllipsoidalCSProperty), ElementName = "ellipsoidalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public EllipsoidalCSProperty EllipsoidalCS
        {
            get
            {
                
                return _ellipsoidalCS;
            }
            set { _ellipsoidalCS = value; }
        }

        [XmlElement(Type = typeof (CartesianCSProperty), ElementName = "cartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CartesianCSProperty CartesianCS
        {
            get
            {
                
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        [XmlElement(Type = typeof (SphericalCSProperty), ElementName = "sphericalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SphericalCSProperty SphericalCS
        {
            get
            {
                
                return _sphericalCS;
            }
            set { _sphericalCS = value; }
        }

        [XmlElement(Type = typeof (GeodeticDatumProperty), ElementName = "geodeticDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeodeticDatumProperty GeodeticDatum
        {
            get
            {
                
                return _geodeticDatum;
            }
            set { _geodeticDatum = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            EllipsoidalCS.MakeSchemaCompliant();
            CartesianCS.MakeSchemaCompliant();
            SphericalCS.MakeSchemaCompliant();
            GeodeticDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodeticCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodeticCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private GeodeticCRS _geodeticCRS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public GeodeticCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeodeticCRS), ElementName = "GeodeticCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeodeticCRS GeodeticCRS
        {
            get
            {
                
                return _geodeticCRS;
            }
            set { _geodeticCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            GeodeticCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalCRSType : AbstractCRSType
    {
        [XmlIgnore] private VerticalCSProperty _verticalCS;

        [XmlIgnore] private VerticalDatumProperty _verticalDatum;

        [XmlElement(Type = typeof (VerticalCSProperty), ElementName = "verticalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VerticalCSProperty VerticalCS
        {
            get
            {
                
                return _verticalCS;
            }
            set { _verticalCS = value; }
        }

        [XmlElement(Type = typeof (VerticalDatumProperty), ElementName = "verticalDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VerticalDatumProperty VerticalDatum
        {
            get
            {
                
                return _verticalDatum;
            }
            set { _verticalDatum = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            VerticalCS.MakeSchemaCompliant();
            VerticalDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;
        [XmlIgnore] private VerticalCRS _verticalCRS;

        public VerticalCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (VerticalCRS), ElementName = "VerticalCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VerticalCRS VerticalCRS
        {
            get
            {
                
                return _verticalCRS;
            }
            set { _verticalCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            VerticalCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ProjectedCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ProjectedCRSType : AbstractGeneralDerivedCRSType
    {
        [XmlIgnore] private BaseGeodeticCRSProperty _baseGeodeticCRS;

        [XmlIgnore] private BaseGeographicCRS _baseGeographicCRS;

        [XmlIgnore] private CartesianCSProperty _cartesianCS;

        [XmlElement(Type = typeof (BaseGeodeticCRSProperty), ElementName = "baseGeodeticCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public BaseGeodeticCRSProperty BaseGeodeticCRS
        {
            get
            {
                
                return _baseGeodeticCRS;
            }
            set { _baseGeodeticCRS = value; }
        }

        [XmlElement(Type = typeof (BaseGeographicCRS), ElementName = "baseGeographicCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public BaseGeographicCRS BaseGeographicCRS
        {
            get
            {
                
                return _baseGeographicCRS;
            }
            set { _baseGeographicCRS = value; }
        }

        [XmlElement(Type = typeof (CartesianCSProperty), ElementName = "cartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CartesianCSProperty CartesianCS
        {
            get
            {
                
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            BaseGeodeticCRS.MakeSchemaCompliant();
            BaseGeographicCRS.MakeSchemaCompliant();
            CartesianCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ProjectedCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ProjectedCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private ProjectedCRS _projectedCRS;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public ProjectedCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ProjectedCRS), ElementName = "ProjectedCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ProjectedCRS ProjectedCRS
        {
            get
            {
                
                return _projectedCRS;
            }
            set { _projectedCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            ProjectedCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DerivedCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DerivedCRSType : AbstractGeneralDerivedCRSType
    {
        [XmlIgnore] private BaseCRSProperty _baseCRS;
        [XmlIgnore] private CoordinateSystemProperty _coordinateSystem;

        [XmlIgnore] private DerivedCRSType_E _derivedCRSType;

        [XmlElement(Type = typeof (BaseCRSProperty), ElementName = "baseCRS", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public BaseCRSProperty BaseCRS
        {
            get
            {
                
                return _baseCRS;
            }
            set { _baseCRS = value; }
        }

        [XmlElement(Type = typeof (DerivedCRSType_E), ElementName = "derivedCRSType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DerivedCRSType_E DerivedCRSType_child
        {
            get
            {
                
                return _derivedCRSType;
            }
            set { _derivedCRSType = value; }
        }

        [XmlElement(Type = typeof (CoordinateSystemProperty), ElementName = "coordinateSystem", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoordinateSystemProperty CoordinateSystem
        {
            get
            {
                
                return _coordinateSystem;
            }
            set { _coordinateSystem = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            BaseCRS.MakeSchemaCompliant();
            DerivedCRSType_child.MakeSchemaCompliant();
            CoordinateSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DerivedCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DerivedCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private DerivedCRS _derivedCRS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public DerivedCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (DerivedCRS), ElementName = "DerivedCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DerivedCRS DerivedCRS
        {
            get
            {
                
                return _derivedCRS;
            }
            set { _derivedCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            DerivedCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EngineeringCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EngineeringCRSType : AbstractCRSType
    {
        [XmlIgnore] private AffineCSProperty _affineCS;

        [XmlIgnore] private CartesianCSProperty _cartesianCS;
        [XmlIgnore] private CoordinateSystemProperty _coordinateSystem;

        [XmlIgnore] private CylindricalCSProperty _cylindricalCS;
        [XmlIgnore] private EngineeringDatumProperty _engineeringDatum;

        [XmlIgnore] private LinearCSProperty _linearCS;

        [XmlIgnore] private PolarCSProperty _polarCS;

        [XmlIgnore] private SphericalCSProperty _sphericalCS;

        [XmlIgnore] private UserDefinedCSProperty _userDefinedCS;

        [XmlElement(Type = typeof (AffineCSProperty), ElementName = "affineCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AffineCSProperty AffineCS
        {
            get
            {
                
                return _affineCS;
            }
            set { _affineCS = value; }
        }

        [XmlElement(Type = typeof (CartesianCSProperty), ElementName = "cartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CartesianCSProperty CartesianCS
        {
            get
            {
                
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        [XmlElement(Type = typeof (CylindricalCSProperty), ElementName = "cylindricalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CylindricalCSProperty CylindricalCS
        {
            get
            {
                
                return _cylindricalCS;
            }
            set { _cylindricalCS = value; }
        }

        [XmlElement(Type = typeof (LinearCSProperty), ElementName = "linearCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LinearCSProperty LinearCS
        {
            get
            {
                
                return _linearCS;
            }
            set { _linearCS = value; }
        }

        [XmlElement(Type = typeof (PolarCSProperty), ElementName = "polarCS", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PolarCSProperty PolarCS
        {
            get
            {
                
                return _polarCS;
            }
            set { _polarCS = value; }
        }

        [XmlElement(Type = typeof (SphericalCSProperty), ElementName = "sphericalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SphericalCSProperty SphericalCS
        {
            get
            {
                
                return _sphericalCS;
            }
            set { _sphericalCS = value; }
        }

        [XmlElement(Type = typeof (UserDefinedCSProperty), ElementName = "userDefinedCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UserDefinedCSProperty UserDefinedCS
        {
            get
            {
                
                return _userDefinedCS;
            }
            set { _userDefinedCS = value; }
        }

        [XmlElement(Type = typeof (CoordinateSystemProperty), ElementName = "coordinateSystem", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoordinateSystemProperty CoordinateSystem
        {
            get
            {
                
                return _coordinateSystem;
            }
            set { _coordinateSystem = value; }
        }

        [XmlElement(Type = typeof (EngineeringDatumProperty), ElementName = "engineeringDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public EngineeringDatumProperty EngineeringDatum
        {
            get
            {
                
                return _engineeringDatum;
            }
            set { _engineeringDatum = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            AffineCS.MakeSchemaCompliant();
            CartesianCS.MakeSchemaCompliant();
            CylindricalCS.MakeSchemaCompliant();
            LinearCS.MakeSchemaCompliant();
            PolarCS.MakeSchemaCompliant();
            SphericalCS.MakeSchemaCompliant();
            UserDefinedCS.MakeSchemaCompliant();
            CoordinateSystem.MakeSchemaCompliant();
            EngineeringDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EngineeringCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EngineeringCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EngineeringCRS _engineeringCRS;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public EngineeringCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (EngineeringCRS), ElementName = "EngineeringCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public EngineeringCRS EngineeringCRS
        {
            get
            {
                
                return _engineeringCRS;
            }
            set { _engineeringCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EngineeringCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ImageCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ImageCRSType : AbstractCRSType
    {
        [XmlIgnore] private AffineCSProperty _affineCS;
        [XmlIgnore] private CartesianCSProperty _cartesianCS;
        [XmlIgnore] private ImageDatumProperty _imageDatum;
        [XmlIgnore] private UsesObliqueCartesianCS _usesObliqueCartesianCS;

        [XmlElement(Type = typeof (CartesianCSProperty), ElementName = "cartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CartesianCSProperty CartesianCS
        {
            get
            {
                
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        [XmlElement(Type = typeof (AffineCSProperty), ElementName = "affineCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AffineCSProperty AffineCS
        {
            get
            {
                
                return _affineCS;
            }
            set { _affineCS = value; }
        }

        [XmlElement(Type = typeof (UsesObliqueCartesianCS), ElementName = "usesObliqueCartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UsesObliqueCartesianCS UsesObliqueCartesianCS
        {
            get
            {
                
                return _usesObliqueCartesianCS;
            }
            set { _usesObliqueCartesianCS = value; }
        }

        [XmlElement(Type = typeof (ImageDatumProperty), ElementName = "imageDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ImageDatumProperty ImageDatum
        {
            get
            {
                
                return _imageDatum;
            }
            set { _imageDatum = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            CartesianCS.MakeSchemaCompliant();
            AffineCS.MakeSchemaCompliant();
            UsesObliqueCartesianCS.MakeSchemaCompliant();
            ImageDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ImageCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ImageCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private ImageCRS _imageCRS;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public ImageCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ImageCRS), ElementName = "ImageCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ImageCRS ImageCRS
        {
            get
            {
                
                return _imageCRS;
            }
            set { _imageCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            ImageCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalCRSType : AbstractCRSType
    {
        [XmlIgnore] private TemporalDatumProperty _temporalDatum;
        [XmlIgnore] private TimeCSProperty _timeCS;

        [XmlIgnore] private UsesTemporalCS _usesTemporalCS;

        [XmlElement(Type = typeof (TimeCSProperty), ElementName = "timeCS", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public TimeCSProperty TimeCS
        {
            get
            {
                
                return _timeCS;
            }
            set { _timeCS = value; }
        }

        [XmlElement(Type = typeof (UsesTemporalCS), ElementName = "usesTemporalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UsesTemporalCS UsesTemporalCS
        {
            get
            {
                
                return _usesTemporalCS;
            }
            set { _usesTemporalCS = value; }
        }

        [XmlElement(Type = typeof (TemporalDatumProperty), ElementName = "temporalDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TemporalDatumProperty TemporalDatum
        {
            get
            {
                
                return _temporalDatum;
            }
            set { _temporalDatum = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            TimeCS.MakeSchemaCompliant();
            UsesTemporalCS.MakeSchemaCompliant();
            TemporalDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalCRSPropertyType
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private TemporalCRS _temporalCRS;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public TemporalCRSPropertyType()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TemporalCRS), ElementName = "TemporalCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TemporalCRS TemporalCRS
        {
            get
            {
                
                return _temporalCRS;
            }
            set { _temporalCRS = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            TemporalCRS.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGML", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractGML : AbstractGMLType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractAssociationRole", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  AbstractAssociationRole : AssociationRoleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractStrictAssociationRole", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  AbstractStrictAssociationRole : AssociationRoleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  AbstractReference : ReferenceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractInlineProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  AbstractInlineProperty : InlinePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "description", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Description : StringOrRefType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "descriptionReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  DescriptionReference : ReferenceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "name", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Name : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "identifier", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Identifier : CodeWithAuthorityType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Definition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Definition : DefinitionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Dictionary", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Dictionary : DictionaryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dictionaryEntry", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DictionaryEntry : DictionaryEntryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "unitOfMeasure", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UnitOfMeasure : UnitOfMeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "UnitDefinition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class UnitDefinition : UnitDefinitionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "quantityType", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  QuantityType : StringOrRefType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "quantityTypeReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  QuantityTypeReference : ReferenceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "catalogSymbol", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CatalogSymbol : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "BaseUnit", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class BaseUnit : BaseUnitType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DerivedUnit", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DerivedUnit : DerivedUnitType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "derivationUnitTerm", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  DerivationUnitTerm : DerivationUnitTermType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ConventionalUnit", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class ConventionalUnit : ConventionalUnitType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "conversionToPreferredUnit", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  ConversionToPreferredUnit : ConversionToPreferredUnitType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "roughConversionToPreferredUnit", Namespace = Declarations.SchemaVersion, IsNullable = false)
    , Serializable]
    public class  RoughConversionToPreferredUnit : ConversionToPreferredUnitType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "measure", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Measure : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "angle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Angle : AngleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeometry", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public abstract class AbstractGeometry : AbstractGeometryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pos", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Pos : DirectPositionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "posList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  PosList : DirectPositionListType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "vector", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Vector : VectorType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Envelope", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Envelope : EnvelopeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeometricPrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeometricPrimitive : AbstractGeometricPrimitiveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Point", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Point : PointType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  PointProperty : PointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractCurve : AbstractCurveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "curveProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CurveProperty : CurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LineString", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LineString : LineStringType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractSurface : AbstractSurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "surfaceProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SurfaceProperty : SurfacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Polygon", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Polygon : PolygonType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "exterior", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Exterior : AbstractRingPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "interior", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Interior : AbstractRingPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractRing", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractRing : AbstractRingType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LinearRing", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LinearRing : LinearRingType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Curve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Curve : CurveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  BaseCurve : CurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OrientableCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class OrientableCurve : OrientableCurveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCurveSegment", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractCurveSegment : AbstractCurveSegmentType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "segments", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Segments : CurveSegmentArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LineStringSegment", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class LineStringSegment : LineStringSegmentType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ArcString", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ArcString : ArcStringType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Arc", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Arc : ArcType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Circle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Circle : CircleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ArcStringByBulge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class ArcStringByBulge : ArcStringByBulgeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ArcByBulge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ArcByBulge : ArcByBulgeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ArcByCenterPoint", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class ArcByCenterPoint : ArcByCenterPointType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CircleByCenterPoint", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class CircleByCenterPoint : CircleByCenterPointType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CubicSpline", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CubicSpline : CubicSplineType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "BSpline", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class BSpline : BSplineType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Bezier", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Bezier : BezierType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OffsetCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class OffsetCurve : OffsetCurveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AffinePlacement", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class AffinePlacement : AffinePlacementType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Clothoid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Clothoid : ClothoidType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeodesicString", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeodesicString : GeodesicStringType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Geodesic", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Geodesic : GeodesicType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Surface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Surface : SurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  BaseSurface : SurfacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OrientableSurface", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class OrientableSurface : OrientableSurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSurfacePatch", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractSurfacePatch : AbstractSurfacePatchType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "patches", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Patches : SurfacePatchArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PolygonPatch", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class PolygonPatch : PolygonPatchType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Triangle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Triangle : TriangleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Rectangle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Rectangle : RectangleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Ring", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Ring : RingType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "curveMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CurveMember : CurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractParametricCurveSurface", Namespace = Declarations.SchemaVersion, IsNullable = false)
    , Serializable]
    public abstract class AbstractParametricCurveSurface : AbstractParametricCurveSurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGriddedSurface", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGriddedSurface : AbstractGriddedSurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Cone", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Cone : ConeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Cylinder", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Cylinder : CylinderType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Sphere", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Sphere : SphereType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PolyhedralSurface", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class PolyhedralSurface : SurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TriangulatedSurface", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class TriangulatedSurface : SurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Tin", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Tin : TinType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSolid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class AbstractSolid : AbstractSolidType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "solidProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SolidProperty : SolidPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Solid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Solid : SolidType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Shell", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Shell : ShellType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "surfaceMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SurfaceMember : SurfacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeometricAggregate", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeometricAggregate : AbstractGeometricAggregateType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiGeometry", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiGeometry : MultiGeometryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geometryMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  GeometryMember : GeometryPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geometryMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  GeometryMembers : GeometryArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiPoint", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiPoint : MultiPointType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  PointMember : PointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  PointMembers : PointArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiCurve : MultiCurveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "curveMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CurveMembers : CurveArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiSurface : MultiSurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "surfaceMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SurfaceMembers : SurfaceArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiSolid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiSolid : MultiSolidType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "solidMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SolidMember : SolidPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "solidMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SolidMembers : SolidArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeObject", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimeObject : AbstractTimeObjectType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimePrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimePrimitive : AbstractTimePrimitiveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "validTime", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ValidTime : TimePrimitivePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeComplex", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimeComplex : AbstractTimeComplexType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeGeometricPrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false)
    , Serializable]
    public abstract class AbstractTimeGeometricPrimitive : AbstractTimeGeometricPrimitiveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeInstant", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeInstant : TimeInstantType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimePeriod", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimePeriod : TimePeriodType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "timePosition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  TimePosition : TimePositionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "timeInterval", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  TimeInterval : TimeIntervalLengthType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractFeature", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractFeature : AbstractFeatureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "boundedBy", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class  BoundedBy : BoundingShapeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EnvelopeWithTimePeriod", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class EnvelopeWithTimePeriod : EnvelopeWithTimePeriodType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "locationName", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  LocationName : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "locationReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  LocationReference : ReferenceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "direction", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Direction : DirectionPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dataSource", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DataSource : StringOrRefType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dataSourceReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  DataSourceReference : ReferenceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DynamicFeature", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DynamicFeature : DynamicFeatureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DynamicFeatureCollection", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class DynamicFeatureCollection : DynamicFeatureCollectionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dynamicMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DynamicMembers : DynamicFeatureMemberType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeSlice", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimeSlice : AbstractTimeSliceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "history", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  History : HistoryPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeometricComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class GeometricComplex : GeometricComplexType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompositeCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CompositeCurve : CompositeCurveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompositeSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class CompositeSurface : CompositeSurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompositeSolid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CompositeSolid : CompositeSolidType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTopology", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public abstract class AbstractTopology : AbstractTopologyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTopoPrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTopoPrimitive : AbstractTopoPrimitiveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Node", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Node : NodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "directedNode", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DirectedNode : DirectedNodePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Edge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Edge : EdgeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "directedEdge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DirectedEdge : DirectedEdgePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Face", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Face : FaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "directedFace", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DirectedFace : DirectedFacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoSolid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoSolid : TopoSolidType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "directedTopoSolid", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  DirectedTopoSolid : DirectedTopoSolidPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoPoint", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoPoint : TopoPointType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoPointProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  TopoPointProperty : TopoPointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoCurve : TopoCurveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoCurveProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  TopoCurveProperty : TopoCurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoSurface : TopoSurfaceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoSurfaceProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  TopoSurfaceProperty : TopoSurfacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoVolume", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoVolume : TopoVolumeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoVolumeProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  TopoVolumeProperty : TopoVolumePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoComplex : TopoComplexType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "subComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SubComplex : TopoComplexPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "superComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SuperComplex : TopoComplexPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "maximalComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  MaximalComplex : TopoComplexPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoPrimitiveMember", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  TopoPrimitiveMember : TopoPrimitiveMemberType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoPrimitiveMembers", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  TopoPrimitiveMembers : TopoPrimitiveArrayAssociationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Boolean", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class Boolean
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private Boolean _value;

        [XmlIgnore] public bool ValueSpecified;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlText(typeof (System.Boolean))]
        public Boolean Value
        {
            get { return _value; }
            set
            {
                _value = value;
                ValueSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlRoot(ElementName = "Category", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class Category : CodeType
    {
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CategoryList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CategoryList : CodeOrNilReasonListType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Count", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class Count
    {
        [XmlIgnore] private String _nilReason;

        [XmlIgnore] private String _value;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlText(DataType = "string")]
        public String Value
        {
            get { return _value; }
            set { _value = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
        }
    }


    [XmlRoot(ElementName = "Quantity", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class Quantity : MeasureType
    {
        [XmlIgnore] private String _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "QuantityList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class QuantityList : MeasureOrNilReasonListType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ValueProperty : ValuePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueComponent", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ValueComponent : ValuePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueComponents", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ValueComponents : ValueArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompositeValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CompositeValue : CompositeValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ValueArray", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ValueArray : ValueArrayType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CategoryExtent", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CategoryExtent : CategoryExtentType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "QuantityExtent", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class QuantityExtent : QuantityExtentType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Grid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Grid : GridType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractImplicitGeometry", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractImplicitGeometry : AbstractGeometryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "RectifiedGrid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class RectifiedGrid : RectifiedGridType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public abstract class AbstractCoverage : AbstractCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDiscreteCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class AbstractDiscreteCoverage : DiscreteCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractContinuousCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractContinuousCoverage : AbstractContinuousCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "domainSet", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DomainSet : DomainSetType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "rangeSet", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  RangeSet : RangeSetType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DataBlock", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DataBlock : DataBlockType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "rangeParameters", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  RangeParameters : AssociationRoleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "tupleList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  TupleList : CoordinatesType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "File", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class File : FileType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coverageFunction", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  CoverageFunction : CoverageFunctionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CoverageMappingRule", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class CoverageMappingRule : MappingRuleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GridFunction", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GridFunction : GridFunctionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiPointCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MultiPointCoverage : DiscreteCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiCurveCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MultiCurveCoverage : DiscreteCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiSurfaceCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MultiSurfaceCoverage : DiscreteCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiSolidCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MultiSolidCoverage : DiscreteCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GridCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GridCoverage : DiscreteCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "RectifiedGridCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class RectifiedGridCoverage : DiscreteCoverageType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Observation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Observation : ObservationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "using", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Using : ProcedurePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "target", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Target : TargetPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "subject", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Subject : TargetPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "resultOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ResultOf : ResultType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DirectedObservation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class DirectedObservation : DirectedObservationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DirectedObservationAtDistance", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class DirectedObservationAtDistance : DirectedObservationAtDistanceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeTopologyPrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimeTopologyPrimitive : AbstractTimeTopologyPrimitiveType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeTopologyComplex", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class TimeTopologyComplex : TimeTopologyComplexType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeNode", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeNode : TimeNodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeEdge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeEdge : TimeEdgeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeReferenceSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class TimeReferenceSystem : TimeReferenceSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeCoordinateSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class TimeCoordinateSystem : TimeCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeCalendar", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeCalendar : TimeCalendarType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeCalendarEra", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeCalendarEra : TimeCalendarEraType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeClock", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeClock : TimeClockType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeOrdinalReferenceSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class TimeOrdinalReferenceSystem : TimeOrdinalReferenceSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeOrdinalEra", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeOrdinalEra : TimeOrdinalEraType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "anchorPoint", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  AnchorPoint : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "datumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DatumRef : DatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesPrimeMeridian", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  UsesPrimeMeridian : PrimeMeridianPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesEllipsoid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesEllipsoid : EllipsoidPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geodeticDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  GeodeticDatumRef : GeodeticDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ellipsoidRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  EllipsoidRef : EllipsoidPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "primeMeridianRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  PrimeMeridianRef : PrimeMeridianPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "engineeringDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  EngineeringDatumRef : EngineeringDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "imageDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ImageDatumRef : ImageDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  VerticalDatumRef : VerticalDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "temporalDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  TemporalDatumRef : TemporalDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateOperationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  CoordinateOperationRef : CoordinateOperationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "singleOperationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  SingleOperationRef : SingleOperationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractOperation : AbstractCoordinateOperationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  OperationRef : OperationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "generalConversionRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  GeneralConversionRef : GeneralConversionPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "generalTransformationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  GeneralTransformationRef : GeneralTransformationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesSingleOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  UsesSingleOperation : CoordinateOperationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "concatenatedOperationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  ConcatenatedOperationRef : ConcatenatedOperationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesOperation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesOperation : CoordinateOperationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "passThroughOperationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  PassThroughOperationRef : PassThroughOperationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesMethod", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesMethod : OperationMethodPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesValue : AbstractGeneralParameterValuePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "conversionRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ConversionRef : ConversionPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "transformationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  TransformationRef : TransformationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dmsAngleValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DmsAngleValue : DMSAngleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueOfParameter", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  ValueOfParameter : OperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "includesValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  IncludesValue : AbstractGeneralParameterValuePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valuesOfGroup", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ValuesOfGroup : OperationParameterGroupPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "methodFormula", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  MethodFormula : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesParameter", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesParameter : AbstractGeneralOperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationMethodRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  OperationMethodRef : OperationMethodPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractGeneralOperationParameterRef", Namespace = Declarations.SchemaVersion,
        IsNullable = false), Serializable]
    public class  AbstractGeneralOperationParameterRef : AbstractGeneralOperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationParameterRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  OperationParameterRef : OperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "includesParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  IncludesParameter : AbstractGeneralOperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationParameterGroupRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  OperationParameterGroupRef : OperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "referenceSystemRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  ReferenceSystemRef : CRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "crsRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CrsRef : CRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateSystemAxisRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  CoordinateSystemAxisRef : CoordinateSystemAxisPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesAxis", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesAxis : CoordinateSystemAxisPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateSystemRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  CoordinateSystemRef : CoordinateSystemPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ellipsoidalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  EllipsoidalCSRef : EllipsoidalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "cartesianCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CartesianCSRef : CartesianCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  VerticalCSRef : VerticalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TemporalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TemporalCS : TemporalCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "temporalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  TemporalCSRef : TemporalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "linearCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  LinearCSRef : LinearCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "userDefinedCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  UserDefinedCSRef : UserDefinedCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "sphericalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SphericalCSRef : SphericalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "polarCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  PolarCSRef : PolarCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "cylindricalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  CylindricalCSRef : CylindricalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ObliqueCartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class ObliqueCartesianCS : ObliqueCartesianCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "obliqueCartesianCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  ObliqueCartesianCSRef : ObliqueCartesianCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "singleCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SingleCRSRef : SingleCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "definedByConversion", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  DefinedByConversion : GeneralConversionPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "includesSingleCRS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  IncludesSingleCRS : SingleCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "compoundCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CompoundCRSRef : CompoundCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesEllipsoidalCS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  UsesEllipsoidalCS : EllipsoidalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesCartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesCartesianCS : CartesianCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesSphericalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesSphericalCS : SphericalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesGeodeticDatum", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  UsesGeodeticDatum : GeodeticDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesVerticalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesVerticalCS : VerticalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesVerticalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  UsesVerticalDatum : VerticalDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  VerticalCRSRef : VerticalCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseGeographicCRS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  BaseGeographicCRS : GeographicCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "projectedCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ProjectedCRSRef : ProjectedCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesCS : CoordinateSystemPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "derivedCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DerivedCRSRef : DerivedCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesEngineeringDatum", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  UsesEngineeringDatum : EngineeringDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "engineeringCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  EngineeringCRSRef : EngineeringCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesAffineCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesAffineCS : AffineCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesImageDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesImageDatum : ImageDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesObliqueCartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  UsesObliqueCartesianCS : ObliqueCartesianCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "imageCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ImageCRSRef : ImageCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesTimeCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesTimeCS : TimeCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesTemporalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  UsesTemporalCS : TemporalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesTemporalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  UsesTemporalDatum : TemporalDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "temporalCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  TemporalCRSRef : TemporalCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeographicCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeographicCRS : GeographicCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geographicCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  GeographicCRSRef : GeographicCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeocentricCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeocentricCRS : GeocentricCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geocentricCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  GeocentricCRSRef : GeocentricCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dmsAngle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DmsAngle : DMSAngleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "degrees", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Degrees : DegreesType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "member", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Member : AssociationRoleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "members", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Members : ArrayAssociationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "metaDataProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  MetaDataProperty : MetaDataPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Bag", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Bag : BagType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Array", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Array : ArrayType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractMetaData", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public abstract class AbstractMetaData : AbstractMetaDataType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GenericMetaData", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GenericMetaData : GenericMetaDataType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinates", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Coordinates : CoordinatesType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointRep", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  PointRep : PointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "location", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Location : LocationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LocationString", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LocationString : StringOrRefType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LocationKeyWord", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LocationKeyWord : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "priorityLocation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  PriorityLocation : PriorityLocationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "featureMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  FeatureMember : FeaturePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "featureProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  FeatureProperty : FeaturePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "featureMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  FeatureMembers : FeatureArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractFeatureCollection", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractFeatureCollection : AbstractFeatureCollectionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "FeatureCollection", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class FeatureCollection : FeatureCollectionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "track", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Track : HistoryPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DefinitionCollection", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class DefinitionCollection : DictionaryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "definitionMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  DefinitionMember : DictionaryEntryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "indirectEntry", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  IndirectEntry : IndirectEntryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DefinitionProxy", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DefinitionProxy : DefinitionProxyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "definitionRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  DefinitionRef : ReferenceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MappingRule", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MappingRule : StringOrRefType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "centerOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CenterOf : PointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "position", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Position : PointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "extentOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ExtentOf : SurfacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "edgeOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  EdgeOf : CurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "centerLineOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  CenterLineOf : CurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiLocation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  MultiLocation : MultiPointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCenterOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  MultiCenterOf : MultiPointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiPosition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  MultiPosition : MultiPointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCenterLineOf", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  MultiCenterLineOf : MultiCurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiEdgeOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  MultiEdgeOf : MultiCurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  MultiCoverage : MultiSurfacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiExtentOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  MultiExtentOf : MultiSurfacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "polygonPatches", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  PolygonPatches : SurfacePatchArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "trianglePatches", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  TrianglePatches : SurfacePatchArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiPointDomain", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  MultiPointDomain : DomainSetType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCurveDomain", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  MultiCurveDomain : DomainSetType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiSurfaceDomain", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  MultiSurfaceDomain : DomainSetType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiSolidDomain", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  MultiSolidDomain : DomainSetType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "gridDomain", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  GridDomain : DomainSetType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "rectifiedGridDomain", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  RectifiedGridDomain : DomainSetType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "generalOperationParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  GeneralOperationParameter : AbstractGeneralOperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MovingObjectStatus", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MovingObjectStatus : MovingObjectStatusType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "status", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Status : StringOrRefType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "statusReference", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  StatusReference : ReferenceType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoComplexProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  TopoComplexProperty : TopoComplexPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiPointProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  MultiPointProperty : MultiPointPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCurveProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  MultiCurveProperty : MultiCurvePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiSurfaceProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  MultiSurfaceProperty : MultiSurfacePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiSolidProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  MultiSolidProperty : MultiSolidPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiGeometryProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  MultiGeometryProperty : MultiGeometryPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointArrayProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  PointArrayProperty : PointArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "curveArrayProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  CurveArrayProperty : CurveArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "surfaceArrayProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  SurfaceArrayProperty : SurfaceArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "solidArrayProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  SolidArrayProperty : SolidArrayPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_temporalExtent", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class EX_temporalExtent : EX_temporalExtent_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_verticalExtent", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class EX_verticalExtent : EX_verticalExtent_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_boundingPolygon", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class EX_boundingPolygon : EX_boundingPolygon_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_extent", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class EX_extent : EX_extent_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractEX_geographicExtent", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractEX_geographicExtent : AbstractEX_geographicExtent_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }



    [XmlRoot(ElementName = "AbstractCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractCRS : AbstractCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "domainOfValidity", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  DomainOfValidity
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private EX_extent _eX_Extent;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public DomainOfValidity()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (EX_extent), ElementName = "EX_extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_extent EX_extent
        {
            get { return _eX_Extent; }
            set { _eX_Extent = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            EX_extent.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CoordinateSystemAxis", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class CoordinateSystemAxis : CoordinateSystemAxisType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "axisAbbrev", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  AxisAbbrev : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "axisDirection", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  AxisDirection : CodeWithAuthorityType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "rangeMeaning", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  RangeMeaning : CodeWithAuthorityType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCoordinateSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractCoordinateSystem : AbstractCoordinateSystemType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "axis", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Axis : CoordinateSystemAxisPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EllipsoidalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class EllipsoidalCS : EllipsoidalCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CartesianCS : CartesianCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "VerticalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class VerticalCS : VerticalCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeCS : TimeCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LinearCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LinearCS : LinearCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "UserDefinedCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class UserDefinedCS : UserDefinedCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "SphericalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class SphericalCS : SphericalCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PolarCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class PolarCS : PolarCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CylindricalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CylindricalCS : CylindricalCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AffineCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class AffineCS : AffineCSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractDatum : AbstractDatumType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "anchorDefinition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class  AnchorDefinition : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeodeticDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeodeticDatum : GeodeticDatumType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "primeMeridian", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class PrimeMeridian_E : PrimeMeridianPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ellipsoid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Ellipsoid_E : EllipsoidPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Ellipsoid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Ellipsoid : EllipsoidType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "semiMajorAxis", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  SemiMajorAxis : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "secondDefiningParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  SecondDefiningParameter_E
    {
        [XmlIgnore] private SecondDefiningParameter _secondDefiningParameter;

        [XmlElement(Type = typeof (SecondDefiningParameter), ElementName = "SecondDefiningParameter", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SecondDefiningParameter SecondDefiningParameter
        {
            get
            {
                
                return _secondDefiningParameter;
            }
            set { _secondDefiningParameter = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            SecondDefiningParameter.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "SecondDefiningParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class SecondDefiningParameter
    {
        [XmlIgnore] private MeasureType _inverseFlattening;

        [XmlIgnore] private bool _isSphere;

        [XmlIgnore] public bool IsSphereSpecified;
        [XmlIgnore] private LengthType _semiMinorAxis;


        public SecondDefiningParameter()
        {
            IsSphere = true;
        }

        [XmlElement(Type = typeof (MeasureType), ElementName = "inverseFlattening", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType InverseFlattening
        {
            get
            {
                
                return _inverseFlattening;
            }
            set { _inverseFlattening = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "semiMinorAxis", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType SemiMinorAxis
        {
            get
            {
                
                return _semiMinorAxis;
            }
            set { _semiMinorAxis = value; }
        }

        [XmlElement(ElementName = "isSphere", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "boolean",
            Namespace = Declarations.SchemaVersion)]
        public bool IsSphere
        {
            get { return _isSphere; }
            set
            {
                _isSphere = value;
                IsSphereSpecified = true;
            }
        }

        public virtual void MakeSchemaCompliant()
        {
            InverseFlattening.MakeSchemaCompliant();
            SemiMinorAxis.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PrimeMeridian", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class PrimeMeridian : PrimeMeridianType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "greenwichLongitude", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class  GreenwichLongitude : AngleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EngineeringDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class EngineeringDatum : EngineeringDatumType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ImageDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ImageDatum : ImageDatumType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pixelInCell", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  PixelInCell : CodeWithAuthorityType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "VerticalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class VerticalDatum : VerticalDatumType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TemporalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TemporalDatum : TemporalDatumType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCoordinateOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractCoordinateOperation : AbstractCoordinateOperationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateOperationAccuracy", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    [XmlInclude(typeof (DQ_relativeInternalPositionalAccuracy_Type))]
    [XmlInclude(typeof (DQ_absoluteExternalPositionalAccuracy_Type))]
    [XmlInclude(typeof (DQ_griddedDataPositionalAccuracy_Type))]
    public class  CoordinateOperationAccuracy
    {
        [XmlIgnore] private AbstractDQ_positionalAccuracy _abstractDQ_PositionalAccuracy;
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public CoordinateOperationAccuracy()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_positionalAccuracy), ElementName = "AbstractDQ_positionalAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_positionalAccuracy AbstractDQ_positionalAccuracy
        {
            get { return _abstractDQ_PositionalAccuracy; }
            set { _abstractDQ_PositionalAccuracy = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            AbstractDQ_positionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "sourceCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class SourceCRSProperty : CRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "targetCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TargetCRSProperty : CRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSingleOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractSingleOperation : AbstractCoordinateOperationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralConversion", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeneralConversion : AbstractGeneralConversionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralTransformation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeneralTransformation : AbstractGeneralTransformationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ConcatenatedOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class ConcatenatedOperation : ConcatenatedOperationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordOperation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CoordOperationProperty : CoordinateOperationPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PassThroughOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class PassThroughOperation : PassThroughOperationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Conversion", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Conversion : ConversionType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "method", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MethodProperty : OperationMethodPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "parameterValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ParameterValueProperty : AbstractGeneralParameterValuePropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Transformation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Transformation : TransformationType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralParameterValue", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeneralParameterValue : AbstractGeneralParameterValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ParameterValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ParameterValue : ParameterValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "value", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Value : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  ValueList : MeasureListType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class OperationParameterProperty : OperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ParameterValueGroup", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class ParameterValueGroup : ParameterValueGroupType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "group", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GroupProperty : OperationParameterGroupPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OperationMethod", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class OperationMethod : OperationMethodType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "formulaCitation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  FormulaCitation
    {
        [XmlIgnore] private Actuate _actuate;

        [XmlIgnore] public bool ActuateSpecified;
        [XmlIgnore] private String _arcrole;
        [XmlIgnore] private CI_citation _cI_Citation;
        [XmlIgnore] private String _href;
        [XmlIgnore] private String _nilReason;
        [XmlIgnore] private String _remoteSchema;
        [XmlIgnore] private String _role;
        [XmlIgnore] private Show _show;

        [XmlIgnore] public bool ShowSpecified;
        [XmlIgnore] private String _title;
        [XmlIgnore] private String _type;

        public FormulaCitation()
        {
            Type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public String Type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public String Href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public String Role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public String Arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public String Title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public Show Show
        {
            get { return _show; }
            set
            {
                _show = value;
                ShowSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public Actuate Actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                ActuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public String NilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public String RemoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CI_citation), ElementName = "CI_citation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_citation CI_citation
        {
            get { return _cI_Citation; }
            set { _cI_Citation = value; }
        }

        public virtual void MakeSchemaCompliant()
        {
            CI_citation.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "formula", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class  Formula : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "parameter", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ParameterProperty : AbstractGeneralOperationParameterPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralOperationParameter", Namespace = Declarations.SchemaVersion,
        IsNullable = false), Serializable]
    public abstract class AbstractGeneralOperationParameter : AbstractGeneralOperationParameterType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OperationParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class OperationParameter : OperationParameterType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OperationParameterGroup", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class OperationParameterGroup : OperationParameterGroupType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSingleCRS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractSingleCRS : AbstractCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralDerivedCRS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeneralDerivedCRS : AbstractGeneralDerivedCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "conversion", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ConversionProperty : GeneralConversionPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompoundCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CompoundCRS : CompoundCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "componentReferenceSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class ComponentReferenceSystemProperty : SingleCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeodeticCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeodeticCRS : GeodeticCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ellipsoidalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class EllipsoidalCSProperty : EllipsoidalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "cartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CartesianCSProperty : CartesianCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "sphericalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class SphericalCSProperty : SphericalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geodeticDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeodeticDatumProperty : GeodeticDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "VerticalCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class VerticalCRS : VerticalCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class VerticalCSProperty : VerticalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class VerticalDatumProperty : VerticalDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ProjectedCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ProjectedCRS : ProjectedCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseGeodeticCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class BaseGeodeticCRSProperty : GeodeticCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DerivedCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DerivedCRS : DerivedCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class BaseCRSProperty : SingleCRSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "derivedCRSType", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DerivedCRSType_E : CodeWithAuthorityType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateSystem", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class CoordinateSystemProperty : CoordinateSystemPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EngineeringCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class EngineeringCRS : EngineeringCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "cylindricalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CylindricalCSProperty : CylindricalCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "linearCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LinearCSProperty : LinearCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "polarCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class PolarCSProperty : PolarCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "userDefinedCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class UserDefinedCSProperty : UserDefinedCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "engineeringDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class EngineeringDatumProperty : EngineeringDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ImageCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ImageCRS : ImageCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "affineCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class AffineCSProperty : AffineCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "imageDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ImageDatumProperty : ImageDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TemporalCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TemporalCRS : TemporalCRSType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "timeCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeCSProperty : TimeCSPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "temporalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TemporalDatumProperty : TemporalDatumPropertyType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }
}

namespace SharpMap.Entities.Iso.Gco
{





    [XmlRoot(ElementName = "AbstractObject", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public abstract class AbstractObject : AbstractObjectType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TypeName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable
    ]
    public class TypeName : TypeNameType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MemberName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class MemberName : MemberNameType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Multiplicity", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class Multiplicity : MultiplicityType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiplicityRange", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class MultiplicityRange : MultiplicityRangeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Measure", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Measure : MeasureType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Length", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Length : LengthType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Angle", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Angle : AngleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Scale", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Scale : ScaleType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Distance", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable
    ]
    public class Distance : LengthType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGenericName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class AbstractGenericName : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LocalName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class LocalName : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ScopedName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class ScopedName : CodeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "UnlimitedInteger", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = true),
     Serializable]
    public class UnlimitedInteger : UnlimitedIntegerType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "RecordType", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class RecordType : RecordTypeType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Binary", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Binary : BinaryType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }
}
namespace SharpMap.Entities.Iso.Gmd
{

    [XmlRoot(ElementName = "EX_geographicBoundingBox", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class EX_geographicBoundingBox : EX_geographicBoundingBox_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_spatialTemporalExtent", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class EX_spatialTemporalExtent : EX_spatialTemporalExtent_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_geographicDescription", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class EX_geographicDescription : EX_geographicDescription_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "RS_identifier", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class RS_identifier : RS_identifier_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_referenceSystem", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_referenceSystem : MD_referenceSystem_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_identifier", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_identifier : MD_identifier_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractRS_referenceSystem", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractRS_referenceSystem : AbstractRS_referenceSystem_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_responsibleParty", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_responsibleParty : CI_responsibleParty_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_citation", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_citation : CI_citation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_address", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_address : CI_address_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_onlineResource", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_onlineResource : CI_onlineResource_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_contact", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_contact : CI_contact_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_telephone", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_telephone : CI_telephone_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_date", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable]
    public class CI_date : CI_date_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_series", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_series : CI_series_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_roleCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_roleCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_presentationFormCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class CI_presentationFormCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_onLineFunctionCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_onLineFunctionCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_dateTypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_dateTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_gridSpatialRepresentation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_gridSpatialRepresentation : MD_gridSpatialRepresentation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_vectorSpatialRepresentation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_vectorSpatialRepresentation : MD_vectorSpatialRepresentation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractMD_spatialRepresentation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractMD_spatialRepresentation : AbstractMD_spatialRepresentation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_georeferenceable", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_georeferenceable : MD_georeferenceable_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_dimension", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_dimension : MD_dimension_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_georectified", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_georectified : MD_georectified_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_geometricObjects", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_geometricObjects : MD_geometricObjects_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_topologyLevelCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_topologyLevelCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_geometricObjectTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_geometricObjectTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_cellGeometryCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_cellGeometryCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_dimensionNameTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_dimensionNameTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_extendedElementInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_extendedElementInformation : MD_extendedElementInformation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_metadataExtensionInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_metadataExtensionInformation : MD_metadataExtensionInformation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_datatypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_datatypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_featureCatalogueDescription", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_featureCatalogueDescription : MD_featureCatalogueDescription_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_coverageDescription", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false)
    , Serializable]
    public class MD_coverageDescription : MD_coverageDescription_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_imageDescription", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_imageDescription : MD_imageDescription_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractMD_contentInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractMD_contentInformation : AbstractMD_contentInformation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_rangeDimension", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_rangeDimension : MD_rangeDimension_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_band", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable]
    public class MD_band : MD_band_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_coverageContentTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_coverageContentTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_imagingConditionCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class MD_imagingConditionCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_applicationSchemaInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_applicationSchemaInformation : MD_applicationSchemaInformation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_portrayalCatalogueReference", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_portrayalCatalogueReference : MD_portrayalCatalogueReference_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_constraints", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_constraints : MD_constraints_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_legalConstraints", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_legalConstraints : MD_legalConstraints_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_securityConstraints", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false)
    , Serializable]
    public class MD_securityConstraints : MD_securityConstraints_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_classificationCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_classificationCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_restrictionCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_restrictionCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_medium", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_medium : MD_medium_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_digitalTransferOptions", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_digitalTransferOptions : MD_digitalTransferOptions_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_standardOrderProcess", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class MD_standardOrderProcess : MD_standardOrderProcess_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_distributor", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_distributor : MD_distributor_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_distribution", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_distribution : MD_distribution_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_format", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_format : MD_format_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_distributionUnits", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_distributionUnits : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_mediumFormatCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_mediumFormatCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_mediumNameCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_mediumNameCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_maintenanceInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_maintenanceInformation : MD_maintenanceInformation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_scopeDescription", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_scopeDescription : MD_scopeDescription_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_maintenanceFrequencyCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_maintenanceFrequencyCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_scopeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_scopeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractMD_identification", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractMD_identification : AbstractMD_identification_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_browseGraphic", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_browseGraphic : MD_browseGraphic_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_dataIdentification", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_dataIdentification : MD_dataIdentification_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_serviceIdentification", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_serviceIdentification : MD_serviceIdentification_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_representativeFraction", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_representativeFraction : MD_representativeFraction_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_usage", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable
    ]
    public class MD_usage : MD_usage_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_keywords", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_keywords : MD_keywords_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_association", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_association : DS_association_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_aggregateInformation", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class MD_aggregateInformation : MD_aggregateInformation_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_resolution", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_resolution : MD_resolution_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_characterSetCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_characterSetCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_spatialRepresentationTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_spatialRepresentationTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_progressCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_progressCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_keywordTypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_keywordTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_associationTypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false)
    , Serializable]
    public class DS_associationTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_initiativeTypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_initiativeTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LI_processStep", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class LI_processStep : LI_processStep_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LI_source", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class LI_source : LI_source_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LI_lineage", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class LI_lineage : LI_lineage_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_conformanceResult", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_conformanceResult : DQ_conformanceResult_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_quantitativeResult", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_quantitativeResult : DQ_quantitativeResult_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_result", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public abstract class AbstractDQ_result : AbstractDQ_result_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_temporalValidity", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_temporalValidity : DQ_temporalValidity_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_temporalConsistency", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false)
    , Serializable]
    public class DQ_temporalConsistency : DQ_temporalConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_accuracyOfATimeMeasurement", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_accuracyOfATimeMeasurement : DQ_accuracyOfATimeMeasurement_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_quantitativeAttributeAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_quantitativeAttributeAccuracy : DQ_quantitativeAttributeAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_nonQuantitativeAttributeAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_nonQuantitativeAttributeAccuracy : DQ_nonQuantitativeAttributeAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_thematicClassificationCorrectness", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_thematicClassificationCorrectness : DQ_thematicClassificationCorrectness_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_relativeInternalPositionalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_relativeInternalPositionalAccuracy : DQ_relativeInternalPositionalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_griddedDataPositionalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_griddedDataPositionalAccuracy : DQ_griddedDataPositionalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_absoluteExternalPositionalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_absoluteExternalPositionalAccuracy : DQ_absoluteExternalPositionalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_topologicalConsistency", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_topologicalConsistency : DQ_topologicalConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_formatConsistency", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_formatConsistency : DQ_formatConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_domainConsistency", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_domainConsistency : DQ_domainConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_conceptualConsistency", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_conceptualConsistency : DQ_conceptualConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_completenessOmission", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class DQ_completenessOmission : DQ_completenessOmission_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_completenessCommission", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_completenessCommission : DQ_completenessCommission_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_temporalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractDQ_temporalAccuracy : AbstractDQ_temporalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_thematicAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractDQ_thematicAccuracy : AbstractDQ_thematicAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_positionalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractDQ_positionalAccuracy : AbstractDQ_positionalAccuracy_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_logicalConsistency", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractDQ_logicalConsistency : AbstractDQ_logicalConsistency_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_completeness", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public abstract class AbstractDQ_completeness : AbstractDQ_completeness_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_element", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public abstract class AbstractDQ_element : AbstractDQ_element_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_dataQuality", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_dataQuality : DQ_dataQuality_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_scope", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable
    ]
    public class DQ_scope : DQ_scope_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_evaluationMethodTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_evaluationMethodTypeCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PT_freeText", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class PT_freeText : PT_freeText_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PT_locale", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class PT_locale : PT_locale_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LocalisedCharacterString", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class LocalisedCharacterString : LocalisedCharacterStringType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PT_localeContainer", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class PT_localeContainer : PT_localeContainer_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LanguageCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class LanguageCode : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Country", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable]
    public class Country : CodeListValueType
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_metadata", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_metadata : MD_metadata_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDS_aggregate", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public abstract class AbstractDS_aggregate : AbstractDS_aggregate_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_dataSet", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_dataSet : DS_dataSet_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_otherAggregate", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_otherAggregate : DS_otherAggregate_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_series", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_series : DS_series_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_initiative", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_initiative : DS_initiative_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_platform", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_platform : DS_platform_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_sensor", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_sensor : DS_sensor_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_productionSeries", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_productionSeries : DS_productionSeries_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_stereoMate", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_stereoMate : DS_stereoMate_Type
    {
        public override void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }
}