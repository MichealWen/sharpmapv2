// /*
//  *  The attached / following is part of SharpMap.Data.Providers.Gml
//  *  SharpMap.Data.Providers.Gml is free software © 2008 Newgrove Consultants Limited, 
//  *  www.newgrove.com; you can redistribute it and/or modify it under the terms 
//  *  of the current GNU Lesser General Public License (LGPL) as published by and 
//  *  available from the Free Software Foundation, Inc., 
//  *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA: http://fsf.org/    
//  *  This program is distributed without any warranty; 
//  *  without even the implied warranty of merchantability or fitness for purpose.  
//  *  See the GNU Lesser General Public License for the full details. 
//  *  
//  *  Author: John Diss 2009
//  * 
//  */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace SharpMap.Entities.Ogc.Gml
{
    public struct Declarations
    {
        public const string SchemaVersion = "http://www.opengis.net/gml/3.2";
    }


    [Serializable]
    public enum CompassPointEnumeration
    {
        [XmlEnum(Name = "N")] N,
        [XmlEnum(Name = "NNE")] NNE,
        [XmlEnum(Name = "NE")] NE,
        [XmlEnum(Name = "ENE")] ENE,
        [XmlEnum(Name = "E")] E,
        [XmlEnum(Name = "ESE")] ESE,
        [XmlEnum(Name = "SE")] SE,
        [XmlEnum(Name = "SSE")] SSE,
        [XmlEnum(Name = "S")] S,
        [XmlEnum(Name = "SSW")] SSW,
        [XmlEnum(Name = "SW")] SW,
        [XmlEnum(Name = "WSW")] WSW,
        [XmlEnum(Name = "W")] W,
        [XmlEnum(Name = "WNW")] WNW,
        [XmlEnum(Name = "NW")] NW,
        [XmlEnum(Name = "NNW")] NNW
    }

    [Serializable]
    public enum SequenceRuleEnumeration
    {
        [XmlEnum(Name = "Linear")] Linear,
        [XmlEnum(Name = "Boustrophedonic")] Boustrophedonic,
        [XmlEnum(Name = "Cantor-diagonal")] Cantor_diagonal,
        [XmlEnum(Name = "Spiral")] Spiral,
        [XmlEnum(Name = "Morton")] Morton,
        [XmlEnum(Name = "Hilbert")] Hilbert
    }

    [Serializable]
    public enum IncrementOrder
    {
        [XmlEnum(Name = "+x+y")] PlusXPlusY,
        [XmlEnum(Name = "+y+x")] PlusYPlusX,
        [XmlEnum(Name = "+x-y")] PlusXMinusY,
        [XmlEnum(Name = "-x-y")] MinusXMinusY
    }


    [Serializable]
    public enum MD_PixelOrientationCode_Type
    {
        [XmlEnum(Name = "center")] center,
        [XmlEnum(Name = "lowerLeft")] lowerLeft,
        [XmlEnum(Name = "lowerRight")] lowerRight,
        [XmlEnum(Name = "upperRight")] upperRight,
        [XmlEnum(Name = "upperLeft")] upperLeft
    }

    [Serializable]
    public enum show
    {
        [XmlEnum(Name = "new")] New,
        [XmlEnum(Name = "replace")] Replace,
        [XmlEnum(Name = "embed")] Embed,
        [XmlEnum(Name = "other")] Other,
        [XmlEnum(Name = "none")] None
    }


    [Serializable]
    public enum KnotTypesType
    {
        [XmlEnum(Name = "uniform")] uniform,
        [XmlEnum(Name = "quasiUniform")] quasiUniform,
        [XmlEnum(Name = "piecewiseBezier")] piecewiseBezier
    }

    [Serializable]
    public enum relativePosition
    {
        [XmlEnum(Name = "Before")] Before,
        [XmlEnum(Name = "After")] After,
        [XmlEnum(Name = "Begins")] Begins,
        [XmlEnum(Name = "Ends")] Ends,
        [XmlEnum(Name = "During")] During,
        [XmlEnum(Name = "Equals")] Equals,
        [XmlEnum(Name = "Contains")] Contains,
        [XmlEnum(Name = "Overlaps")] Overlaps,
        [XmlEnum(Name = "Meets")] Meets,
        [XmlEnum(Name = "OverlappedBy")] OverlappedBy,
        [XmlEnum(Name = "MetBy")] MetBy,
        [XmlEnum(Name = "BegunBy")] BegunBy,
        [XmlEnum(Name = "EndedBy")] EndedBy
    }

    [Serializable]
    public enum MD_ObligationCode_Type
    {
        [XmlEnum(Name = "mandatory")] mandatory,
        [XmlEnum(Name = "optional")] optional,
        [XmlEnum(Name = "conditional")] conditional
    }


    [Serializable]
    public enum SuccessionType
    {
        [XmlEnum(Name = "substitution")] substitution,
        [XmlEnum(Name = "division")] division,
        [XmlEnum(Name = "fusion")] fusion,
        [XmlEnum(Name = "initiation")] initiation
    }


    [Serializable]
    public enum SignType
    {
        [XmlEnum(Name = "-")] Negative,
        [XmlEnum(Name = "+")] Positive
    }


    [Serializable]
    public enum TimeIndeterminateValueType
    {
        [XmlEnum(Name = "after")] after,
        [XmlEnum(Name = "before")] before,
        [XmlEnum(Name = "now")] now,
        [XmlEnum(Name = "unknown")] unknown
    }

    [Serializable]
    public enum actuate
    {
        [XmlEnum(Name = "onLoad")] onLoad,
        [XmlEnum(Name = "onRequest")] onRequest,
        [XmlEnum(Name = "other")] other,
        [XmlEnum(Name = "none")] none
    }


    [Serializable]
    public enum AggregationType
    {
        [XmlEnum(Name = "set")] @set,
        [XmlEnum(Name = "bag")] bag,
        [XmlEnum(Name = "sequence")] sequence,
        [XmlEnum(Name = "array")] array,
        [XmlEnum(Name = "record")] record,
        [XmlEnum(Name = "table")] table
    }


    [Serializable]
    public enum TimeUnitType
    {
        [XmlEnum(Name = "year")] year,
        [XmlEnum(Name = "month")] month,
        [XmlEnum(Name = "day")] day,
        [XmlEnum(Name = "hour")] hour,
        [XmlEnum(Name = "minute")] minute,
        [XmlEnum(Name = "second")] second
    }


    [Serializable]
    public enum MD_TopicCategoryCode_Type
    {
        [XmlEnum(Name = "farming")] farming,
        [XmlEnum(Name = "biota")] biota,
        [XmlEnum(Name = "boundaries")] boundaries,
        [XmlEnum(Name = "climatologyMeteorologyAtmosphere")] climatologyMeteorologyAtmosphere,
        [XmlEnum(Name = "economy")] economy,
        [XmlEnum(Name = "elevation")] elevation,
        [XmlEnum(Name = "environment")] environment,
        [XmlEnum(Name = "geoscientificInformation")] geoscientificInformation,
        [XmlEnum(Name = "health")] health,
        [XmlEnum(Name = "imageryBaseMapsEarthCover")] imageryBaseMapsEarthCover,
        [XmlEnum(Name = "intelligenceMilitary")] intelligenceMilitary,
        [XmlEnum(Name = "inlandWaters")] inlandWaters,
        [XmlEnum(Name = "location")] location,
        [XmlEnum(Name = "oceans")] oceans,
        [XmlEnum(Name = "planningCadastre")] planningCadastre,
        [XmlEnum(Name = "society")] society,
        [XmlEnum(Name = "structure")] structure,
        [XmlEnum(Name = "transportation")] transportation,
        [XmlEnum(Name = "utilitiesCommunication")] utilitiesCommunication
    }


    [Serializable]
    public enum NilReasonType
    {
        [XmlEnum(Name = "inapplicable")] inapplicable,
        [XmlEnum(Name = "missing")] missing,
        [XmlEnum(Name = "template")] template,
        [XmlEnum(Name = "unknown")] unknown,
        [XmlEnum(Name = "withheld")] withheld
    }


    [Serializable]
    public enum Directions
    {
        [XmlEnum(Name = "N")] N,
        [XmlEnum(Name = "E")] E,
        [XmlEnum(Name = "S")] S,
        [XmlEnum(Name = "W")] W,
        [XmlEnum(Name = "+")] Positive,
        [XmlEnum(Name = "-")] Negative
    }


    [Serializable]
    public enum CurveInterpolationType
    {
        [XmlEnum(Name = "linear")] linear,
        [XmlEnum(Name = "geodesic")] geodesic,
        [XmlEnum(Name = "circularArc3Points")] circularArc3Points,
        [XmlEnum(Name = "circularArc2PointWithBulge")] circularArc2PointWithBulge,
        [XmlEnum(Name = "circularArcCenterPointWithRadius")] circularArcCenterPointWithRadius,
        [XmlEnum(Name = "elliptical")] elliptical,
        [XmlEnum(Name = "clothoid")] clothoid,
        [XmlEnum(Name = "conic")] conic,
        [XmlEnum(Name = "polynomialSpline")] polynomialSpline,
        [XmlEnum(Name = "cubicSpline")] cubicSpline,
        [XmlEnum(Name = "rationalSpline")] rationalSpline
    }


    [XmlType(TypeName = "CodeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CodeType
    {
        [XmlIgnore] private string _codeSpace;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public string codeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CodeWithAuthorityType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CodeWithAuthorityType : CodeType
    {
        [XmlIgnore] private string _codeSpace;

        public CodeWithAuthorityType()
        {
            codeSpace = string.Empty;
        }

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public string codeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MeasureType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MeasureType
    {
        [XmlIgnore] private string _uom;

        [XmlIgnore] private double _Value;

        [XmlIgnore] public bool _ValueSpecified;

        [XmlAttribute(AttributeName = "uom")]
        public string uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        [XmlText(typeof (Double))]
        public double Value
        {
            get { return _Value; }
            set
            {
                _Value = value;
                _ValueSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CoordinatesType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CoordinatesType
    {
        [XmlIgnore] private string _cs;
        [XmlIgnore] private string _decimal;
        [XmlIgnore] private string _ts;
        [XmlIgnore] private string _Value;

        public CoordinatesType()
        {
            @decimal = ".";
            cs = ",";
            ts = " ";
        }

        [XmlAttribute(AttributeName = "decimal", DataType = "string")]
        public string @decimal
        {
            get { return _decimal; }
            set { _decimal = value; }
        }

        [XmlAttribute(AttributeName = "cs", DataType = "string")]
        public string cs
        {
            get { return _cs; }
            set { _cs = value; }
        }

        [XmlAttribute(AttributeName = "ts", DataType = "string")]
        public string ts
        {
            get { return _ts; }
            set { _ts = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CodeListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CodeListType
    {
        [XmlIgnore] private string _codeSpace;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public string codeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CodeOrNilReasonListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CodeOrNilReasonListType
    {
        [XmlIgnore] private string _codeSpace;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public string codeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MeasureListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MeasureListType
    {
        [XmlIgnore] private string _uom;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "uom")]
        public string uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MeasureOrNilReasonListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MeasureOrNilReasonListType
    {
        [XmlIgnore] private string _uom;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "uom")]
        public string uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractGMLType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGMLType
    {
        [XmlIgnore] private description _description;
        [XmlIgnore] private descriptionReference _descriptionReference;
        [XmlIgnore] private string _id;
        [XmlIgnore] private identifier _identifier;

        [XmlIgnore] private List<metaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<name> _name;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (metaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<metaDataProperty> metaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<metaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public description description
        {
            get
            {
                if (_description == null) _description = new description();
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (descriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public descriptionReference descriptionReference
        {
            get
            {
                if (_descriptionReference == null) _descriptionReference = new descriptionReference();
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public identifier identifier
        {
            get
            {
                if (_identifier == null) _identifier = new identifier();
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<name> name
        {
            get
            {
                if (_name == null) _name = new List<name>();
                return _name;
            }
            set { _name = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AssociationRoleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AssociationRoleType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;
        [XmlAnyElement] public XmlElement Any;

        public AssociationRoleType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "ReferenceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ReferenceType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public ReferenceType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "InlinePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class InlinePropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        [XmlAnyElement] public XmlElement Any;

        public InlinePropertyType()
        {
            owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractMemberType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractMemberType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public AbstractMemberType()
        {
            owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractMetadataPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractMetadataPropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public AbstractMetadataPropertyType()
        {
            owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "DefinitionBaseType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DefinitionBaseType : AbstractGMLType
    {
        [XmlIgnore] private description _description;
        [XmlIgnore] private descriptionReference _descriptionReference;
        [XmlIgnore] private string _id;
        [XmlIgnore] private identifier _identifier;

        [XmlIgnore] private List<metaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<name> _name;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (metaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<metaDataProperty> metaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<metaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public description description
        {
            get
            {
                if (_description == null) _description = new description();
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (descriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public descriptionReference descriptionReference
        {
            get
            {
                if (_descriptionReference == null) _descriptionReference = new descriptionReference();
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public identifier identifier
        {
            get
            {
                if (_identifier == null) _identifier = new identifier();
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<name> name
        {
            get
            {
                if (_name == null) _name = new List<name>();
                return _name;
            }
            set { _name = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DefinitionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DefinitionType : DefinitionBaseType
    {
        [XmlIgnore] private string _remarks;

        [XmlElement(ElementName = "remarks", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string",
            Namespace = Declarations.SchemaVersion)]
        public string remarks
        {
            get { return _remarks; }
            set { _remarks = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DictionaryType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DictionaryType : DefinitionType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;

        [XmlIgnore] private List<dictionaryEntry> _dictionaryEntry;

        [XmlIgnore] private List<indirectEntry> _indirectEntry;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (dictionaryEntry), ElementName = "dictionaryEntry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<dictionaryEntry> dictionaryEntry
        {
            get
            {
                if (_dictionaryEntry == null) _dictionaryEntry = new List<dictionaryEntry>();
                return _dictionaryEntry;
            }
            set { _dictionaryEntry = value; }
        }

        [XmlElement(Type = typeof (indirectEntry), ElementName = "indirectEntry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<indirectEntry> indirectEntry
        {
            get
            {
                if (_indirectEntry == null) _indirectEntry = new List<indirectEntry>();
                return _indirectEntry;
            }
            set { _indirectEntry = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (dictionaryEntry _c in dictionaryEntry) _c.MakeSchemaCompliant();
            foreach (indirectEntry _c in indirectEntry) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DictionaryEntryType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DictionaryEntryType : AbstractMemberType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Definition _Definition;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public DictionaryEntryType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Definition), ElementName = "Definition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Definition Definition
        {
            get
            {
                if (_Definition == null) _Definition = new Definition();
                return _Definition;
            }
            set { _Definition = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            Definition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UnitOfMeasureType", Namespace = Declarations.SchemaVersion), Serializable]
    public class UnitOfMeasureType
    {
        [XmlIgnore] private string _uom;

        [XmlAttribute(AttributeName = "uom")]
        public string uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "UnitDefinitionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class UnitDefinitionType : DefinitionType
    {
        [XmlIgnore] private catalogSymbol _catalogSymbol;
        [XmlIgnore] private quantityType _quantityType;

        [XmlIgnore] private quantityTypeReference _quantityTypeReference;

        [XmlElement(Type = typeof (quantityType), ElementName = "quantityType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public quantityType quantityType
        {
            get
            {
                if (_quantityType == null) _quantityType = new quantityType();
                return _quantityType;
            }
            set { _quantityType = value; }
        }

        [XmlElement(Type = typeof (quantityTypeReference), ElementName = "quantityTypeReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public quantityTypeReference quantityTypeReference
        {
            get
            {
                if (_quantityTypeReference == null) _quantityTypeReference = new quantityTypeReference();
                return _quantityTypeReference;
            }
            set { _quantityTypeReference = value; }
        }

        [XmlElement(Type = typeof (catalogSymbol), ElementName = "catalogSymbol", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public catalogSymbol catalogSymbol
        {
            get
            {
                if (_catalogSymbol == null) _catalogSymbol = new catalogSymbol();
                return _catalogSymbol;
            }
            set { _catalogSymbol = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BaseUnitType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BaseUnitType : UnitDefinitionType
    {
        [XmlIgnore] private ReferenceType _unitsSystem;

        [XmlElement(Type = typeof (ReferenceType), ElementName = "unitsSystem", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ReferenceType unitsSystem
        {
            get
            {
                if (_unitsSystem == null) _unitsSystem = new ReferenceType();
                return _unitsSystem;
            }
            set { _unitsSystem = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            unitsSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DerivedUnitType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DerivedUnitType : UnitDefinitionType
    {
        [XmlIgnore] private List<derivationUnitTerm> _derivationUnitTerm;

        [XmlIgnore]
        public derivationUnitTerm this[int index]
        {
            get { return derivationUnitTerm[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return derivationUnitTerm.Count; }
        }

        [XmlElement(Type = typeof (derivationUnitTerm), ElementName = "derivationUnitTerm", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<derivationUnitTerm> derivationUnitTerm
        {
            get
            {
                if (_derivationUnitTerm == null) _derivationUnitTerm = new List<derivationUnitTerm>();
                return _derivationUnitTerm;
            }
            set { _derivationUnitTerm = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return derivationUnitTerm.GetEnumerator();
        }

        public void Add(derivationUnitTerm obj)
        {
            derivationUnitTerm.Add(obj);
        }

        public void Clear()
        {
            derivationUnitTerm.Clear();
        }

        public derivationUnitTerm Remove(int index)
        {
            derivationUnitTerm obj = derivationUnitTerm[index];
            derivationUnitTerm.Remove(obj);
            return obj;
        }

        public bool Remove(derivationUnitTerm obj)
        {
            return derivationUnitTerm.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (derivationUnitTerm _c in derivationUnitTerm) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DerivationUnitTermType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DerivationUnitTermType : UnitOfMeasureType
    {
        [XmlIgnore] private string _exponent;

        [XmlAttribute(AttributeName = "exponent", DataType = "integer")]
        public string exponent
        {
            get { return _exponent; }
            set { _exponent = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConventionalUnitType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConventionalUnitType : UnitDefinitionType
    {
        [XmlIgnore] private conversionToPreferredUnit _conversionToPreferredUnit;
        [XmlIgnore] private List<derivationUnitTerm> _derivationUnitTerm;

        [XmlIgnore] private roughConversionToPreferredUnit _roughConversionToPreferredUnit;

        [XmlElement(Type = typeof (conversionToPreferredUnit), ElementName = "conversionToPreferredUnit",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public conversionToPreferredUnit conversionToPreferredUnit
        {
            get
            {
                if (_conversionToPreferredUnit == null) _conversionToPreferredUnit = new conversionToPreferredUnit();
                return _conversionToPreferredUnit;
            }
            set { _conversionToPreferredUnit = value; }
        }

        [XmlElement(Type = typeof (roughConversionToPreferredUnit), ElementName = "roughConversionToPreferredUnit",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public roughConversionToPreferredUnit roughConversionToPreferredUnit
        {
            get
            {
                if (_roughConversionToPreferredUnit == null)
                    _roughConversionToPreferredUnit = new roughConversionToPreferredUnit();
                return _roughConversionToPreferredUnit;
            }
            set { _roughConversionToPreferredUnit = value; }
        }

        [XmlElement(Type = typeof (derivationUnitTerm), ElementName = "derivationUnitTerm", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<derivationUnitTerm> derivationUnitTerm
        {
            get
            {
                if (_derivationUnitTerm == null) _derivationUnitTerm = new List<derivationUnitTerm>();
                return _derivationUnitTerm;
            }
            set { _derivationUnitTerm = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            conversionToPreferredUnit.MakeSchemaCompliant();
            roughConversionToPreferredUnit.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConversionToPreferredUnitType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConversionToPreferredUnitType : UnitOfMeasureType
    {
        [XmlIgnore] private double _factor;

        [XmlIgnore] public bool _factorSpecified;


        [XmlIgnore] private formula _formula;

        public ConversionToPreferredUnitType()
        {
            _factorSpecified = true;
        }

        [XmlElement(ElementName = "factor", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public double factor
        {
            get { return _factor; }
            set
            {
                _factor = value;
                _factorSpecified = true;
            }
        }

        [XmlElement(Type = typeof (formula), ElementName = "formula", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public formula formula
        {
            get
            {
                if (_formula == null) _formula = new formula();
                return _formula;
            }
            set { _formula = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            formula.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FormulaType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FormulaType
    {
        [XmlIgnore] private double _a;

        [XmlIgnore] public bool _aSpecified;


        [XmlIgnore] private double _b;

        [XmlIgnore] public bool _bSpecified;


        [XmlIgnore] private double _c;

        [XmlIgnore] public bool _cSpecified;


        [XmlIgnore] private double _d;

        [XmlIgnore] public bool _dSpecified;


        public FormulaType()
        {
            _bSpecified = true;
            _cSpecified = true;
        }

        [XmlElement(ElementName = "a", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public double a
        {
            get { return _a; }
            set
            {
                _a = value;
                _aSpecified = true;
            }
        }

        [XmlElement(ElementName = "b", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public double b
        {
            get { return _b; }
            set
            {
                _b = value;
                _bSpecified = true;
            }
        }

        [XmlElement(ElementName = "c", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public double c
        {
            get { return _c; }
            set
            {
                _c = value;
                _cSpecified = true;
            }
        }

        [XmlElement(ElementName = "d", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public double d
        {
            get { return _d; }
            set
            {
                _d = value;
                _dSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "LengthType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LengthType : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ScaleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ScaleType : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeType : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridLengthType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridLengthType : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AreaType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AreaType : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VolumeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VolumeType : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SpeedType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SpeedType : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AngleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AngleType : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeometryType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeometryType : AbstractGMLType
    {
        [XmlIgnore] private string _axisLabels;
        [XmlIgnore] private string _srsDimension;
        [XmlIgnore] private string _srsName;
        [XmlIgnore] private string _uomLabels;

        [XmlAttribute(AttributeName = "srsName", DataType = "anyURI")]
        public string srsName
        {
            get { return _srsName; }
            set { _srsName = value; }
        }

        [XmlAttribute(AttributeName = "srsDimension", DataType = "positiveInteger")]
        public string srsDimension
        {
            get { return _srsDimension; }
            set { _srsDimension = value; }
        }

        [XmlAttribute(AttributeName = "axisLabels")]
        public string axisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlAttribute(AttributeName = "uomLabels")]
        public string uomLabels
        {
            get { return _uomLabels; }
            set { _uomLabels = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometryPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class GeometryPropertyType
    {
        [XmlIgnore] private AbstractGeometry _AbstractGeometry;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public GeometryPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _AbstractGeometry; }
            set { _AbstractGeometry = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometryArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class GeometryArrayPropertyType
    {
        [XmlIgnore] private List<AbstractGeometry> _AbstractGeometry;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public GeometryArrayPropertyType()
        {
            owns = false;
        }

        [XmlIgnore]
        public AbstractGeometry this[int index]
        {
            get { return AbstractGeometry[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractGeometry.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractGeometry> AbstractGeometry
        {
            get
            {
                if (_AbstractGeometry == null) _AbstractGeometry = new List<AbstractGeometry>();
                return _AbstractGeometry;
            }
            set { _AbstractGeometry = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractGeometry.GetEnumerator();
        }

        public void Add(AbstractGeometry obj)
        {
            AbstractGeometry.Add(obj);
        }

        public void Clear()
        {
            AbstractGeometry.Clear();
        }

        public AbstractGeometry Remove(int index)
        {
            AbstractGeometry obj = AbstractGeometry[index];
            AbstractGeometry.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractGeometry obj)
        {
            return AbstractGeometry.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractGeometry _c in AbstractGeometry) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectPositionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectPositionType
    {
        [XmlIgnore] private string _axisLabels;
        [XmlIgnore] private string _srsDimension;
        [XmlIgnore] private string _srsName;
        [XmlIgnore] private string _uomLabels;
        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "srsName", DataType = "anyURI")]
        public string srsName
        {
            get { return _srsName; }
            set { _srsName = value; }
        }

        [XmlAttribute(AttributeName = "srsDimension", DataType = "positiveInteger")]
        public string srsDimension
        {
            get { return _srsDimension; }
            set { _srsDimension = value; }
        }

        [XmlAttribute(AttributeName = "axisLabels")]
        public string axisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlAttribute(AttributeName = "uomLabels")]
        public string uomLabels
        {
            get { return _uomLabels; }
            set { _uomLabels = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "DirectPositionListType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectPositionListType
    {
        [XmlIgnore] private string _axisLabels;
        [XmlIgnore] private string _count;
        [XmlIgnore] private string _srsDimension;
        [XmlIgnore] private string _srsName;
        [XmlIgnore] private string _uomLabels;
        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "srsName", DataType = "anyURI")]
        public string srsName
        {
            get { return _srsName; }
            set { _srsName = value; }
        }

        [XmlAttribute(AttributeName = "srsDimension", DataType = "positiveInteger")]
        public string srsDimension
        {
            get { return _srsDimension; }
            set { _srsDimension = value; }
        }

        [XmlAttribute(AttributeName = "axisLabels")]
        public string axisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlAttribute(AttributeName = "uomLabels")]
        public string uomLabels
        {
            get { return _uomLabels; }
            set { _uomLabels = value; }
        }

        [XmlAttribute(AttributeName = "count", DataType = "positiveInteger")]
        public string count
        {
            get { return _count; }
            set { _count = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "VectorType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VectorType : DirectPositionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EnvelopeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EnvelopeType
    {
        [XmlIgnore] private string _axisLabels;
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private DirectPositionType _lowerCorner;
        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private string _srsDimension;
        [XmlIgnore] private string _srsName;
        [XmlIgnore] private string _uomLabels;
        [XmlIgnore] private DirectPositionType _upperCorner;

        [XmlAttribute(AttributeName = "srsName", DataType = "anyURI")]
        public string srsName
        {
            get { return _srsName; }
            set { _srsName = value; }
        }

        [XmlAttribute(AttributeName = "srsDimension", DataType = "positiveInteger")]
        public string srsDimension
        {
            get { return _srsDimension; }
            set { _srsDimension = value; }
        }

        [XmlAttribute(AttributeName = "axisLabels")]
        public string axisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlAttribute(AttributeName = "uomLabels")]
        public string uomLabels
        {
            get { return _uomLabels; }
            set { _uomLabels = value; }
        }

        [XmlElement(Type = typeof (DirectPositionType), ElementName = "lowerCorner", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectPositionType lowerCorner
        {
            get
            {
                if (_lowerCorner == null) _lowerCorner = new DirectPositionType();
                return _lowerCorner;
            }
            set { _lowerCorner = value; }
        }

        [XmlElement(Type = typeof (DirectPositionType), ElementName = "upperCorner", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectPositionType upperCorner
        {
            get
            {
                if (_upperCorner == null) _upperCorner = new DirectPositionType();
                return _upperCorner;
            }
            set { _upperCorner = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public void MakeSchemaCompliant()
        {
            lowerCorner.MakeSchemaCompliant();
            upperCorner.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeometricPrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeometricPrimitiveType : AbstractGeometryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometricPrimitivePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractSurfaceType))]
    [XmlInclude(typeof (AbstractSolidType))]
    [XmlInclude(typeof (AbstractCurveType))]
    [XmlInclude(typeof (PointType))]
    public class GeometricPrimitivePropertyType
    {
        [XmlIgnore] private AbstractGeometricPrimitive _AbstractGeometricPrimitive;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public GeometricPrimitivePropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometricPrimitive), ElementName = "AbstractGeometricPrimitive",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometricPrimitive AbstractGeometricPrimitive
        {
            get { return _AbstractGeometricPrimitive; }
            set { _AbstractGeometricPrimitive = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeometricPrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PointType : AbstractGeometricPrimitiveType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private pos _pos;

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public pos pos
        {
            get
            {
                if (_pos == null) _pos = new pos();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            pos.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PointPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PointPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private Point _Point;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public PointPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Point), ElementName = "Point", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Point Point
        {
            get
            {
                if (_Point == null) _Point = new Point();
                return _Point;
            }
            set { _Point = value; }
        }

        public void MakeSchemaCompliant()
        {
            Point.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PointArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PointArrayPropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private List<Point> _Point;

        public PointArrayPropertyType()
        {
            owns = false;
        }

        [XmlIgnore]
        public Point this[int index]
        {
            get { return Point[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return Point.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Point), ElementName = "Point", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Point> Point
        {
            get
            {
                if (_Point == null) _Point = new List<Point>();
                return _Point;
            }
            set { _Point = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Point.GetEnumerator();
        }

        public void Add(Point obj)
        {
            Point.Add(obj);
        }

        public void Clear()
        {
            Point.Clear();
        }

        public Point Remove(int index)
        {
            Point obj = Point[index];
            Point.Remove(obj);
            return obj;
        }

        public bool Remove(Point obj)
        {
            return Point.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (Point _c in Point) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCurveType : AbstractGeometricPrimitiveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CurvePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (CurveType))]
    [XmlInclude(typeof (CompositeCurveType))]
    [XmlInclude(typeof (OrientableCurveType))]
    [XmlInclude(typeof (LineStringType))]
    public class CurvePropertyType
    {
        [XmlIgnore] private AbstractCurve _AbstractCurve;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CurvePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractCurve), ElementName = "AbstractCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCurve AbstractCurve
        {
            get { return _AbstractCurve; }
            set { _AbstractCurve = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractCurve.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CurveArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (CurveType))]
    [XmlInclude(typeof (CompositeCurveType))]
    [XmlInclude(typeof (OrientableCurveType))]
    [XmlInclude(typeof (LineStringType))]
    public class CurveArrayPropertyType
    {
        [XmlIgnore] private List<AbstractCurve> _AbstractCurve;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public CurveArrayPropertyType()
        {
            owns = false;
        }

        [XmlIgnore]
        public AbstractCurve this[int index]
        {
            get { return AbstractCurve[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractCurve.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractCurve), ElementName = "AbstractCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractCurve> AbstractCurve
        {
            get
            {
                if (_AbstractCurve == null) _AbstractCurve = new List<AbstractCurve>();
                return _AbstractCurve;
            }
            set { _AbstractCurve = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractCurve.GetEnumerator();
        }

        public void Add(AbstractCurve obj)
        {
            AbstractCurve.Add(obj);
        }

        public void Clear()
        {
            AbstractCurve.Clear();
        }

        public AbstractCurve Remove(int index)
        {
            AbstractCurve obj = AbstractCurve[index];
            AbstractCurve.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractCurve obj)
        {
            return AbstractCurve.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractCurve _c in AbstractCurve) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LineStringType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LineStringType : AbstractCurveType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;
        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractSurfaceType : AbstractGeometricPrimitiveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SurfacePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (CompositeSurfaceType))]
    [XmlInclude(typeof (PolygonType))]
    [XmlInclude(typeof (SurfaceType))]
    [XmlInclude(typeof (OrientableSurfaceType))]
    public class SurfacePropertyType
    {
        [XmlIgnore] private AbstractSurface _AbstractSurface;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public SurfacePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractSurface), ElementName = "AbstractSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractSurface AbstractSurface
        {
            get { return _AbstractSurface; }
            set { _AbstractSurface = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractSurface.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SurfaceArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (CompositeSurfaceType))]
    [XmlInclude(typeof (PolygonType))]
    [XmlInclude(typeof (SurfaceType))]
    [XmlInclude(typeof (OrientableSurfaceType))]
    public class SurfaceArrayPropertyType
    {
        [XmlIgnore] private List<AbstractSurface> _AbstractSurface;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public SurfaceArrayPropertyType()
        {
            owns = false;
        }

        [XmlIgnore]
        public AbstractSurface this[int index]
        {
            get { return AbstractSurface[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractSurface.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractSurface), ElementName = "AbstractSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractSurface> AbstractSurface
        {
            get
            {
                if (_AbstractSurface == null) _AbstractSurface = new List<AbstractSurface>();
                return _AbstractSurface;
            }
            set { _AbstractSurface = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractSurface.GetEnumerator();
        }

        public void Add(AbstractSurface obj)
        {
            AbstractSurface.Add(obj);
        }

        public void Clear()
        {
            AbstractSurface.Clear();
        }

        public AbstractSurface Remove(int index)
        {
            AbstractSurface obj = AbstractSurface[index];
            AbstractSurface.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractSurface obj)
        {
            return AbstractSurface.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractSurface _c in AbstractSurface) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PolygonType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PolygonType : AbstractSurfaceType
    {
        [XmlIgnore] private exterior _exterior;

        [XmlIgnore] private List<interior> _interior;

        [XmlElement(Type = typeof (exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public exterior exterior
        {
            get
            {
                if (_exterior == null) _exterior = new exterior();
                return _exterior;
            }
            set { _exterior = value; }
        }

        [XmlElement(Type = typeof (interior), ElementName = "interior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<interior> interior
        {
            get
            {
                if (_interior == null) _interior = new List<interior>();
                return _interior;
            }
            set { _interior = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractRingType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractRingType
    {
        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractRingPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (LinearRingType))]
    [XmlInclude(typeof (RingType))]
    public class AbstractRingPropertyType
    {
        [XmlIgnore] private AbstractRing _AbstractRing;

        [XmlElement(Type = typeof (AbstractRing), ElementName = "AbstractRing", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractRing AbstractRing
        {
            get { return _AbstractRing; }
            set { _AbstractRing = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractRing.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LinearRingType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LinearRingType : AbstractRingType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;
        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LinearRingPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LinearRingPropertyType
    {
        [XmlIgnore] private LinearRing _LinearRing;

        [XmlElement(Type = typeof (LinearRing), ElementName = "LinearRing", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LinearRing LinearRing
        {
            get
            {
                if (_LinearRing == null) _LinearRing = new LinearRing();
                return _LinearRing;
            }
            set { _LinearRing = value; }
        }

        public void MakeSchemaCompliant()
        {
            LinearRing.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CurveType : AbstractCurveType
    {
        [XmlIgnore] private segments _segments;

        [XmlElement(Type = typeof (segments), ElementName = "segments", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public segments segments
        {
            get
            {
                if (_segments == null) _segments = new segments();
                return _segments;
            }
            set { _segments = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            segments.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OrientableCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OrientableCurveType : AbstractCurveType
    {
        [XmlIgnore] private baseCurve _baseCurve;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool _orientationSpecified;

        public OrientableCurveType()
        {
            orientation = SignType.Positive;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                _orientationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (baseCurve), ElementName = "baseCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public baseCurve baseCurve
        {
            get
            {
                if (_baseCurve == null) _baseCurve = new baseCurve();
                return _baseCurve;
            }
            set { _baseCurve = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            baseCurve.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCurveSegmentType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCurveSegmentType
    {
        [XmlIgnore] private string _numDerivativeInterior;
        [XmlIgnore] private string _numDerivativesAtEnd;
        [XmlIgnore] private string _numDerivativesAtStart;

        public AbstractCurveSegmentType()
        {
            numDerivativesAtStart = "0";
            numDerivativesAtEnd = "0";
            numDerivativeInterior = "0";
        }

        [XmlAttribute(AttributeName = "numDerivativesAtStart", DataType = "integer")]
        public string numDerivativesAtStart
        {
            get { return _numDerivativesAtStart; }
            set { _numDerivativesAtStart = value; }
        }

        [XmlAttribute(AttributeName = "numDerivativesAtEnd", DataType = "integer")]
        public string numDerivativesAtEnd
        {
            get { return _numDerivativesAtEnd; }
            set { _numDerivativesAtEnd = value; }
        }

        [XmlAttribute(AttributeName = "numDerivativeInterior", DataType = "integer")]
        public string numDerivativeInterior
        {
            get { return _numDerivativeInterior; }
            set { _numDerivativeInterior = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CurveSegmentArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (LineStringSegmentType))]
    [XmlInclude(typeof (ClothoidType))]
    [XmlInclude(typeof (OffsetCurveType))]
    [XmlInclude(typeof (ArcStringByBulgeType))]
    [XmlInclude(typeof (ArcStringType))]
    [XmlInclude(typeof (CubicSplineType))]
    [XmlInclude(typeof (ArcByCenterPointType))]
    [XmlInclude(typeof (GeodesicStringType))]
    [XmlInclude(typeof (BSplineType))]
    public class CurveSegmentArrayPropertyType
    {
        [XmlIgnore] private List<AbstractCurveSegment> _AbstractCurveSegment;

        [XmlIgnore]
        public AbstractCurveSegment this[int index]
        {
            get { return AbstractCurveSegment[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractCurveSegment.Count; }
        }

        [XmlElement(Type = typeof (AbstractCurveSegment), ElementName = "AbstractCurveSegment", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractCurveSegment> AbstractCurveSegment
        {
            get
            {
                if (_AbstractCurveSegment == null) _AbstractCurveSegment = new List<AbstractCurveSegment>();
                return _AbstractCurveSegment;
            }
            set { _AbstractCurveSegment = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractCurveSegment.GetEnumerator();
        }

        public void Add(AbstractCurveSegment obj)
        {
            AbstractCurveSegment.Add(obj);
        }

        public void Clear()
        {
            AbstractCurveSegment.Clear();
        }

        public AbstractCurveSegment Remove(int index)
        {
            AbstractCurveSegment obj = AbstractCurveSegment[index];
            AbstractCurveSegment.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractCurveSegment obj)
        {
            return AbstractCurveSegment.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractCurveSegment _c in AbstractCurveSegment) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LineStringSegmentType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LineStringSegmentType : AbstractCurveSegmentType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;

        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        public LineStringSegmentType()
        {
            interpolation = CurveInterpolationType.linear;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcStringType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcStringType : AbstractCurveSegmentType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;

        [XmlIgnore] private string _numArc;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;

        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        public ArcStringType()
        {
            interpolation = CurveInterpolationType.circularArc3Points;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public string numArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcType : ArcStringType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private string _numArc;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;

        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        public ArcType()
        {
            numArc = "1";
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public string numArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CircleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CircleType : ArcType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcStringByBulgeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcStringByBulgeType : AbstractCurveSegmentType
    {
        [XmlIgnore] private List<double> _bulge;
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;
        [XmlIgnore] private List<VectorType> _normal;

        [XmlIgnore] private string _numArc;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;

        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        public ArcStringByBulgeType()
        {
            interpolation = CurveInterpolationType.circularArc2PointWithBulge;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public string numArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(Type = typeof (double), ElementName = "bulge", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public List<double> bulge
        {
            get
            {
                if (_bulge == null) _bulge = new List<double>();
                return _bulge;
            }
            set { _bulge = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "normal", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<VectorType> normal
        {
            get
            {
                if (_normal == null) _normal = new List<VectorType>();
                return _normal;
            }
            set { _normal = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
            foreach (VectorType _c in normal) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcByBulgeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcByBulgeType : ArcStringByBulgeType
    {
        [XmlIgnore] private double _bulge;

        [XmlIgnore] public bool _bulgeSpecified;
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private VectorType _normal;
        [XmlIgnore] private string _numArc;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;

        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        public ArcByBulgeType()
        {
            numArc = "1";
            _bulgeSpecified = true;
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public string numArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }


        [XmlElement(ElementName = "bulge", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public double bulge
        {
            get { return _bulge; }
            set
            {
                _bulge = value;
                _bulgeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "normal", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VectorType normal
        {
            get
            {
                if (_normal == null) _normal = new VectorType();
                return _normal;
            }
            set { _normal = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
            normal.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArcByCenterPointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArcByCenterPointType : AbstractCurveSegmentType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private AngleType _endAngle;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;

        [XmlIgnore] private string _numArc;
        [XmlIgnore] private pointProperty _pointProperty;
        [XmlIgnore] private pointRep _pointRep;

        [XmlIgnore] private pos _pos;
        [XmlIgnore] private posList _posList;
        [XmlIgnore] private LengthType _radius;
        [XmlIgnore] private AngleType _startAngle;

        public ArcByCenterPointType()
        {
            interpolation = CurveInterpolationType.circularArcCenterPointWithRadius;
            numArc = "1";
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "numArc", DataType = "integer")]
        public string numArc
        {
            get { return _numArc; }
            set { _numArc = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public pos pos
        {
            get
            {
                if (_pos == null) _pos = new pos();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointProperty pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new pointProperty();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointRep pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new pointRep();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "radius", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType radius
        {
            get
            {
                if (_radius == null) _radius = new LengthType();
                return _radius;
            }
            set { _radius = value; }
        }

        [XmlElement(Type = typeof (AngleType), ElementName = "startAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AngleType startAngle
        {
            get
            {
                if (_startAngle == null) _startAngle = new AngleType();
                return _startAngle;
            }
            set { _startAngle = value; }
        }

        [XmlElement(Type = typeof (AngleType), ElementName = "endAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AngleType endAngle
        {
            get
            {
                if (_endAngle == null) _endAngle = new AngleType();
                return _endAngle;
            }
            set { _endAngle = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            pos.MakeSchemaCompliant();
            pointProperty.MakeSchemaCompliant();
            pointRep.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
            radius.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CircleByCenterPointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CircleByCenterPointType : ArcByCenterPointType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private pointProperty _pointProperty;
        [XmlIgnore] private pointRep _pointRep;
        [XmlIgnore] private pos _pos;
        [XmlIgnore] private posList _posList;
        [XmlIgnore] private LengthType _radius;

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public pos pos
        {
            get
            {
                if (_pos == null) _pos = new pos();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointProperty pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new pointProperty();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointRep pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new pointRep();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "radius", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType radius
        {
            get
            {
                if (_radius == null) _radius = new LengthType();
                return _radius;
            }
            set { _radius = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            pos.MakeSchemaCompliant();
            pointProperty.MakeSchemaCompliant();
            pointRep.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
            radius.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CubicSplineType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CubicSplineType : AbstractCurveSegmentType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private string _degree;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;
        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;
        [XmlIgnore] private VectorType _vectorAtEnd;
        [XmlIgnore] private VectorType _vectorAtStart;

        public CubicSplineType()
        {
            interpolation = CurveInterpolationType.cubicSpline;
            degree = "3";
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "degree", DataType = "integer")]
        public string degree
        {
            get { return _degree; }
            set { _degree = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "vectorAtStart", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VectorType vectorAtStart
        {
            get
            {
                if (_vectorAtStart == null) _vectorAtStart = new VectorType();
                return _vectorAtStart;
            }
            set { _vectorAtStart = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "vectorAtEnd", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VectorType vectorAtEnd
        {
            get
            {
                if (_vectorAtEnd == null) _vectorAtEnd = new VectorType();
                return _vectorAtEnd;
            }
            set { _vectorAtEnd = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
            vectorAtStart.MakeSchemaCompliant();
            vectorAtEnd.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BSplineType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BSplineType : AbstractCurveSegmentType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private string _degree;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;

        [XmlIgnore] private bool _isPolynomial;

        [XmlIgnore] public bool _isPolynomialSpecified;
        [XmlIgnore] private List<KnotPropertyType> _knot;

        [XmlIgnore] private KnotTypesType _knotType;

        [XmlIgnore] public bool _knotTypeSpecified;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;

        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        public BSplineType()
        {
            interpolation = CurveInterpolationType.polynomialSpline;
            degree = string.Empty;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "isPolynomial", DataType = "boolean")]
        public bool isPolynomial
        {
            get { return _isPolynomial; }
            set
            {
                _isPolynomial = value;
                _isPolynomialSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "knotType")]
        public KnotTypesType knotType
        {
            get { return _knotType; }
            set
            {
                _knotType = value;
                _knotTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(ElementName = "degree", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public string degree
        {
            get { return _degree; }
            set { _degree = value; }
        }

        [XmlElement(Type = typeof (KnotPropertyType), ElementName = "knot", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<KnotPropertyType> knot
        {
            get
            {
                if (_knot == null) _knot = new List<KnotPropertyType>();
                return _knot;
            }
            set { _knot = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
            foreach (KnotPropertyType _c in knot) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "KnotType", Namespace = Declarations.SchemaVersion), Serializable]
    public class KnotType
    {
        [XmlIgnore] private string _multiplicity;
        [XmlIgnore] private value _value;

        [XmlIgnore] private double _weight;

        [XmlIgnore] public bool _weightSpecified;


        public KnotType()
        {
            multiplicity = string.Empty;
            _weightSpecified = true;
        }

        [XmlElement(Type = typeof (value), ElementName = "value", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public value @value
        {
            get
            {
                if (_value == null) _value = new value();
                return _value;
            }
            set { _value = value; }
        }

        [XmlElement(ElementName = "multiplicity", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public string multiplicity
        {
            get { return _multiplicity; }
            set { _multiplicity = value; }
        }

        [XmlElement(ElementName = "weight", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = Declarations.SchemaVersion)]
        public double weight
        {
            get { return _weight; }
            set
            {
                _weight = value;
                _weightSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
            @value.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "KnotPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class KnotPropertyType
    {
        [XmlIgnore] private KnotType _Knot;

        [XmlElement(Type = typeof (KnotType), ElementName = "Knot", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public KnotType Knot
        {
            get
            {
                if (_Knot == null) _Knot = new KnotType();
                return _Knot;
            }
            set { _Knot = value; }
        }

        public void MakeSchemaCompliant()
        {
            Knot.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BezierType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BezierType : BSplineType
    {
        [XmlIgnore] private coordinates _coordinates;
        [XmlIgnore] private string _degree;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;

        [XmlIgnore] private bool _isPolynomial;

        [XmlIgnore] public bool _isPolynomialSpecified;
        [XmlIgnore] private List<KnotPropertyType> _knot;

        [XmlIgnore] private string _knotType;
        [XmlIgnore] private List<pointProperty> _pointProperty;
        [XmlIgnore] private List<pointRep> _pointRep;

        [XmlIgnore] private List<pos> _pos;
        [XmlIgnore] private posList _posList;

        public BezierType()
        {
            interpolation = CurveInterpolationType.polynomialSpline;
            isPolynomial = true;
            degree = string.Empty;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "isPolynomial", DataType = "boolean")]
        public bool isPolynomial
        {
            get { return _isPolynomial; }
            set
            {
                _isPolynomial = value;
                _isPolynomialSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "knotType", DataType = "KnotTypesType")]
        public string knotType
        {
            get { return _knotType; }
            set { _knotType = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<pos> pos
        {
            get
            {
                if (_pos == null) _pos = new List<pos>();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointProperty> pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new List<pointProperty>();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        [XmlElement(Type = typeof (pointRep), ElementName = "pointRep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointRep> pointRep
        {
            get
            {
                if (_pointRep == null) _pointRep = new List<pointRep>();
                return _pointRep;
            }
            set { _pointRep = value; }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (coordinates), ElementName = "coordinates", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinates coordinates
        {
            get
            {
                if (_coordinates == null) _coordinates = new coordinates();
                return _coordinates;
            }
            set { _coordinates = value; }
        }

        [XmlElement(ElementName = "degree", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public string degree
        {
            get { return _degree; }
            set { _degree = value; }
        }

        [XmlElement(Type = typeof (KnotPropertyType), ElementName = "knot", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<KnotPropertyType> knot
        {
            get
            {
                if (_knot == null) _knot = new List<KnotPropertyType>();
                return _knot;
            }
            set { _knot = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (pos _c in pos) _c.MakeSchemaCompliant();
            foreach (pointProperty _c in pointProperty) _c.MakeSchemaCompliant();
            foreach (pointRep _c in pointRep) _c.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            coordinates.MakeSchemaCompliant();
            foreach (KnotPropertyType _c in knot) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OffsetCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OffsetCurveType : AbstractCurveSegmentType
    {
        [XmlIgnore] private LengthType _distance;
        [XmlIgnore] private CurvePropertyType _offsetBase;
        [XmlIgnore] private VectorType _refDirection;

        [XmlElement(Type = typeof (CurvePropertyType), ElementName = "offsetBase", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CurvePropertyType offsetBase
        {
            get
            {
                if (_offsetBase == null) _offsetBase = new CurvePropertyType();
                return _offsetBase;
            }
            set { _offsetBase = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "distance", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType distance
        {
            get
            {
                if (_distance == null) _distance = new LengthType();
                return _distance;
            }
            set { _distance = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "refDirection", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VectorType refDirection
        {
            get
            {
                if (_refDirection == null) _refDirection = new VectorType();
                return _refDirection;
            }
            set { _refDirection = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            offsetBase.MakeSchemaCompliant();
            distance.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AffinePlacementType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AffinePlacementType
    {
        [XmlIgnore] private string _inDimension;
        [XmlIgnore] private location _location;
        [XmlIgnore] private string _outDimension;

        [XmlIgnore] private List<VectorType> _refDirection;

        public AffinePlacementType()
        {
            inDimension = string.Empty;
            outDimension = string.Empty;
        }

        [XmlElement(Type = typeof (location), ElementName = "location", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public location location
        {
            get
            {
                if (_location == null) _location = new location();
                return _location;
            }
            set { _location = value; }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "refDirection", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<VectorType> refDirection
        {
            get
            {
                if (_refDirection == null) _refDirection = new List<VectorType>();
                return _refDirection;
            }
            set { _refDirection = value; }
        }

        [XmlElement(ElementName = "inDimension", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public string inDimension
        {
            get { return _inDimension; }
            set { _inDimension = value; }
        }

        [XmlElement(ElementName = "outDimension", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public string outDimension
        {
            get { return _outDimension; }
            set { _outDimension = value; }
        }

        public void MakeSchemaCompliant()
        {
            location.MakeSchemaCompliant();
            foreach (VectorType _c in refDirection) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ClothoidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ClothoidType : AbstractCurveSegmentType
    {
        [XmlIgnore] private double _endParameter;

        [XmlIgnore] public bool _endParameterSpecified;
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;

        [XmlIgnore] private refLocation _refLocation;

        [XmlIgnore] private decimal _scaleFactor;

        [XmlIgnore] public bool _scaleFactorSpecified;


        [XmlIgnore] private double _startParameter;

        [XmlIgnore] public bool _startParameterSpecified;

        public ClothoidType()
        {
            interpolation = CurveInterpolationType.clothoid;
            _scaleFactorSpecified = true;
            _startParameterSpecified = true;
            _endParameterSpecified = true;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (refLocation), ElementName = "refLocation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public refLocation refLocation
        {
            get { return _refLocation; }
            set { _refLocation = value; }
        }

        [XmlElement(ElementName = "scaleFactor", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "decimal", Namespace = Declarations.SchemaVersion)]
        public decimal scaleFactor
        {
            get { return _scaleFactor; }
            set
            {
                _scaleFactor = value;
                _scaleFactorSpecified = true;
            }
        }


        [XmlElement(ElementName = "startParameter", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public double startParameter
        {
            get { return _startParameter; }
            set
            {
                _startParameter = value;
                _startParameterSpecified = true;
            }
        }


        [XmlElement(ElementName = "endParameter", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public double endParameter
        {
            get { return _endParameter; }
            set
            {
                _endParameter = value;
                _endParameterSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            refLocation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "refLocation", Namespace = Declarations.SchemaVersion), Serializable]
    public class refLocation
    {
        [XmlIgnore] private AffinePlacement _AffinePlacement;

        [XmlElement(Type = typeof (AffinePlacement), ElementName = "AffinePlacement", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AffinePlacement AffinePlacement
        {
            get
            {
                if (_AffinePlacement == null) _AffinePlacement = new AffinePlacement();
                return _AffinePlacement;
            }
            set { _AffinePlacement = value; }
        }

        public void MakeSchemaCompliant()
        {
            AffinePlacement.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodesicStringType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodesicStringType : AbstractCurveSegmentType
    {
        [XmlIgnore] private CurveInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;
        [XmlIgnore] private pointProperty _pointProperty;
        [XmlIgnore] private pos _pos;

        [XmlIgnore] private posList _posList;

        public GeodesicStringType()
        {
            interpolation = CurveInterpolationType.geodesic;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public CurveInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public pos pos
        {
            get
            {
                if (_pos == null) _pos = new pos();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointProperty pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new pointProperty();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            posList.MakeSchemaCompliant();
            pos.MakeSchemaCompliant();
            pointProperty.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodesicType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodesicType : GeodesicStringType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SurfaceType : AbstractSurfaceType
    {
        [XmlIgnore] private patches _patches;

        [XmlElement(Type = typeof (patches), ElementName = "patches", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public patches patches
        {
            get
            {
                if (_patches == null) _patches = new patches();
                return _patches;
            }
            set { _patches = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            patches.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OrientableSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OrientableSurfaceType : AbstractSurfaceType
    {
        [XmlIgnore] private baseSurface _baseSurface;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool _orientationSpecified;

        public OrientableSurfaceType()
        {
            orientation = SignType.Positive;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                _orientationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (baseSurface), ElementName = "baseSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public baseSurface baseSurface
        {
            get
            {
                if (_baseSurface == null) _baseSurface = new baseSurface();
                return _baseSurface;
            }
            set { _baseSurface = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            baseSurface.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractSurfacePatchType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractSurfacePatchType
    {
        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "SurfacePatchArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (TriangleType))]
    [XmlInclude(typeof (RectangleType))]
    [XmlInclude(typeof (AbstractParametricCurveSurfaceType))]
    [XmlInclude(typeof (PolygonPatchType))]
    public class SurfacePatchArrayPropertyType
    {
        [XmlIgnore] private List<AbstractSurfacePatch> _AbstractSurfacePatch;

        [XmlIgnore]
        public AbstractSurfacePatch this[int index]
        {
            get { return AbstractSurfacePatch[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractSurfacePatch.Count; }
        }

        [XmlElement(Type = typeof (AbstractSurfacePatch), ElementName = "AbstractSurfacePatch", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractSurfacePatch> AbstractSurfacePatch
        {
            get
            {
                if (_AbstractSurfacePatch == null) _AbstractSurfacePatch = new List<AbstractSurfacePatch>();
                return _AbstractSurfacePatch;
            }
            set { _AbstractSurfacePatch = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractSurfacePatch.GetEnumerator();
        }

        public void Add(AbstractSurfacePatch obj)
        {
            AbstractSurfacePatch.Add(obj);
        }

        public void Clear()
        {
            AbstractSurfacePatch.Clear();
        }

        public AbstractSurfacePatch Remove(int index)
        {
            AbstractSurfacePatch obj = AbstractSurfacePatch[index];
            AbstractSurfacePatch.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractSurfacePatch obj)
        {
            return AbstractSurfacePatch.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractSurfacePatch _c in AbstractSurfacePatch) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PolygonPatchType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PolygonPatchType : AbstractSurfacePatchType
    {
        [XmlIgnore] private exterior _exterior;
        [XmlIgnore] private List<interior> _interior;
        [XmlIgnore] private SurfaceInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;

        public PolygonPatchType()
        {
            interpolation = SurfaceInterpolationType.planar;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public SurfaceInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public exterior exterior
        {
            get
            {
                if (_exterior == null) _exterior = new exterior();
                return _exterior;
            }
            set { _exterior = value; }
        }

        [XmlElement(Type = typeof (interior), ElementName = "interior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<interior> interior
        {
            get
            {
                if (_interior == null) _interior = new List<interior>();
                return _interior;
            }
            set { _interior = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }

    public enum SurfaceInterpolationType
    {
        [XmlEnum("planar")] planar
    }


    [XmlType(TypeName = "TriangleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TriangleType : AbstractSurfacePatchType
    {
        [XmlIgnore] private exterior _exterior;
        [XmlIgnore] private SurfaceInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;

        public TriangleType()
        {
            interpolation = SurfaceInterpolationType.planar;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public SurfaceInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public exterior exterior
        {
            get
            {
                if (_exterior == null) _exterior = new exterior();
                return _exterior;
            }
            set { _exterior = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            exterior.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RectangleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RectangleType : AbstractSurfacePatchType
    {
        [XmlIgnore] private exterior _exterior;
        [XmlIgnore] private SurfaceInterpolationType _interpolation;

        [XmlIgnore] public bool _interpolationSpecified;

        public RectangleType()
        {
            interpolation = SurfaceInterpolationType.planar;
        }

        [XmlAttribute(AttributeName = "interpolation")]
        public SurfaceInterpolationType interpolation
        {
            get { return _interpolation; }
            set
            {
                _interpolation = value;
                _interpolationSpecified = true;
            }
        }

        [XmlElement(Type = typeof (exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public exterior exterior
        {
            get
            {
                if (_exterior == null) _exterior = new exterior();
                return _exterior;
            }
            set { _exterior = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            exterior.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RingType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RingType : AbstractRingType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<curveMember> _curveMember;

        [XmlIgnore]
        public curveMember this[int index]
        {
            get { return curveMember[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return curveMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (curveMember), ElementName = "curveMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<curveMember> curveMember
        {
            get
            {
                if (_curveMember == null) _curveMember = new List<curveMember>();
                return _curveMember;
            }
            set { _curveMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return curveMember.GetEnumerator();
        }

        public void Add(curveMember obj)
        {
            curveMember.Add(obj);
        }

        public void Clear()
        {
            curveMember.Clear();
        }

        public curveMember Remove(int index)
        {
            curveMember obj = curveMember[index];
            curveMember.Remove(obj);
            return obj;
        }

        public bool Remove(curveMember obj)
        {
            return curveMember.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (curveMember _c in curveMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RingPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RingPropertyType
    {
        [XmlIgnore] private Ring _Ring;

        [XmlElement(Type = typeof (Ring), ElementName = "Ring", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Ring Ring
        {
            get
            {
                if (_Ring == null) _Ring = new Ring();
                return _Ring;
            }
            set { _Ring = value; }
        }

        public void MakeSchemaCompliant()
        {
            Ring.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractParametricCurveSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractParametricCurveSurfaceType : AbstractSurfacePatchType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGriddedSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGriddedSurfaceType : AbstractParametricCurveSurfaceType
    {
        [XmlIgnore] private string _columns;
        [XmlIgnore] private string _rows;
        [XmlIgnore] private RowsCollection _rowsCollection;

        [XmlAttribute(AttributeName = "rows", DataType = "integer")]
        public string rows
        {
            get { return _rows; }
            set { _rows = value; }
        }

        [XmlAttribute(AttributeName = "columns", DataType = "integer")]
        public string columns
        {
            get { return _columns; }
            set { _columns = value; }
        }

        [XmlElement(Type = typeof (RowsCollection), ElementName = "rows", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public RowsCollection RowsCollection
        {
            get { return _rowsCollection; }
            set { _rowsCollection = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            _rowsCollection.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "rows", Namespace = Declarations.SchemaVersion), Serializable]
    public class RowsCollection
    {
        [XmlIgnore] private List<Row> _Row;

        [XmlIgnore]
        public Row this[int index]
        {
            get { return Row[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return Row.Count; }
        }

        [XmlElement(Type = typeof (Row), ElementName = "Row", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<Row> Row
        {
            get
            {
                if (_Row == null) _Row = new List<Row>();
                return _Row;
            }
            set { _Row = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return Row.GetEnumerator();
        }

        public void Add(Row obj)
        {
            Row.Add(obj);
        }

        public void Clear()
        {
            Row.Clear();
        }

        public Row Remove(int index)
        {
            Row obj = Row[index];
            Row.Remove(obj);
            return obj;
        }

        public bool Remove(Row obj)
        {
            return Row.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (Row _c in Row) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Row", Namespace = Declarations.SchemaVersion), Serializable]
    public class Row
    {
        [XmlIgnore] private pointProperty _pointProperty;
        [XmlIgnore] private pos _pos;
        [XmlIgnore] private posList _posList;

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public pos pos
        {
            get
            {
                if (_pos == null) _pos = new pos();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointProperty pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new pointProperty();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        public void MakeSchemaCompliant()
        {
            posList.MakeSchemaCompliant();
            pos.MakeSchemaCompliant();
            pointProperty.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConeType : AbstractGriddedSurfaceType
    {
        [XmlIgnore] private CurveInterpolationType _horizontalCurveType;

        [XmlIgnore] public bool _horizontalCurveTypeSpecified;

        [XmlIgnore] private CurveInterpolationType _verticalCurveType;

        [XmlIgnore] public bool _verticalCurveTypeSpecified;

        public ConeType()
        {
            horizontalCurveType = CurveInterpolationType.circularArc3Points;
            verticalCurveType = CurveInterpolationType.linear;
        }

        [XmlAttribute(AttributeName = "horizontalCurveType")]
        public CurveInterpolationType horizontalCurveType
        {
            get { return _horizontalCurveType; }
            set
            {
                _horizontalCurveType = value;
                _horizontalCurveTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "verticalCurveType")]
        public CurveInterpolationType verticalCurveType
        {
            get { return _verticalCurveType; }
            set
            {
                _verticalCurveType = value;
                _verticalCurveTypeSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CylinderType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CylinderType : AbstractGriddedSurfaceType
    {
        [XmlIgnore] private CurveInterpolationType _horizontalCurveType;

        [XmlIgnore] public bool _horizontalCurveTypeSpecified;

        [XmlIgnore] private CurveInterpolationType _verticalCurveType;

        [XmlIgnore] public bool _verticalCurveTypeSpecified;

        public CylinderType()
        {
            horizontalCurveType = CurveInterpolationType.circularArc3Points;
            verticalCurveType = CurveInterpolationType.linear;
        }

        [XmlAttribute(AttributeName = "horizontalCurveType")]
        public CurveInterpolationType horizontalCurveType
        {
            get { return _horizontalCurveType; }
            set
            {
                _horizontalCurveType = value;
                _horizontalCurveTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "verticalCurveType")]
        public CurveInterpolationType verticalCurveType
        {
            get { return _verticalCurveType; }
            set
            {
                _verticalCurveType = value;
                _verticalCurveTypeSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SphereType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SphereType : AbstractGriddedSurfaceType
    {
        [XmlIgnore] private CurveInterpolationType _horizontalCurveType;

        [XmlIgnore] public bool _horizontalCurveTypeSpecified;

        [XmlIgnore] private CurveInterpolationType _verticalCurveType;

        [XmlIgnore] public bool _verticalCurveTypeSpecified;

        public SphereType()
        {
            horizontalCurveType = CurveInterpolationType.circularArc3Points;
            verticalCurveType = CurveInterpolationType.circularArc3Points;
        }

        [XmlAttribute(AttributeName = "horizontalCurveType")]
        public CurveInterpolationType horizontalCurveType
        {
            get { return _horizontalCurveType; }
            set
            {
                _horizontalCurveType = value;
                _horizontalCurveTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "verticalCurveType")]
        public CurveInterpolationType verticalCurveType
        {
            get { return _verticalCurveType; }
            set
            {
                _verticalCurveType = value;
                _verticalCurveTypeSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TinType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TinType : SurfaceType
    {
        [XmlIgnore] private List<LineStringSegmentArrayPropertyType> _breakLines;
        [XmlIgnore] private controlPoint _controlPoint;
        [XmlIgnore] private LengthType _maxLength;
        [XmlIgnore] private List<LineStringSegmentArrayPropertyType> _stopLines;

        [XmlElement(Type = typeof (LineStringSegmentArrayPropertyType), ElementName = "stopLines", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<LineStringSegmentArrayPropertyType> stopLines
        {
            get
            {
                if (_stopLines == null) _stopLines = new List<LineStringSegmentArrayPropertyType>();
                return _stopLines;
            }
            set { _stopLines = value; }
        }

        [XmlElement(Type = typeof (LineStringSegmentArrayPropertyType), ElementName = "breakLines", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<LineStringSegmentArrayPropertyType> breakLines
        {
            get
            {
                if (_breakLines == null) _breakLines = new List<LineStringSegmentArrayPropertyType>();
                return _breakLines;
            }
            set { _breakLines = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "maxLength", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType maxLength
        {
            get
            {
                if (_maxLength == null) _maxLength = new LengthType();
                return _maxLength;
            }
            set { _maxLength = value; }
        }

        [XmlElement(Type = typeof (controlPoint), ElementName = "controlPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public controlPoint controlPoint
        {
            get { return _controlPoint; }
            set { _controlPoint = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            maxLength.MakeSchemaCompliant();
            controlPoint.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "controlPoint", Namespace = Declarations.SchemaVersion), Serializable]
    public class controlPoint
    {
        [XmlIgnore] private pointProperty _pointProperty;
        [XmlIgnore] private pos _pos;
        [XmlIgnore] private posList _posList;

        [XmlElement(Type = typeof (posList), ElementName = "posList", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public posList posList
        {
            get
            {
                if (_posList == null) _posList = new posList();
                return _posList;
            }
            set { _posList = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public pos pos
        {
            get
            {
                if (_pos == null) _pos = new pos();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointProperty pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new pointProperty();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        public void MakeSchemaCompliant()
        {
            posList.MakeSchemaCompliant();
            pos.MakeSchemaCompliant();
            pointProperty.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LineStringSegmentArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LineStringSegmentArrayPropertyType
    {
        [XmlIgnore] private List<LineStringSegment> _LineStringSegment;

        [XmlIgnore]
        public LineStringSegment this[int index]
        {
            get { return LineStringSegment[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return LineStringSegment.Count; }
        }

        [XmlElement(Type = typeof (LineStringSegment), ElementName = "LineStringSegment", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<LineStringSegment> LineStringSegment
        {
            get
            {
                if (_LineStringSegment == null) _LineStringSegment = new List<LineStringSegment>();
                return _LineStringSegment;
            }
            set { _LineStringSegment = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return LineStringSegment.GetEnumerator();
        }

        public void Add(LineStringSegment obj)
        {
            LineStringSegment.Add(obj);
        }

        public void Clear()
        {
            LineStringSegment.Clear();
        }

        public LineStringSegment Remove(int index)
        {
            LineStringSegment obj = LineStringSegment[index];
            LineStringSegment.Remove(obj);
            return obj;
        }

        public bool Remove(LineStringSegment obj)
        {
            return LineStringSegment.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (LineStringSegment _c in LineStringSegment) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractSolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AbstractSolidType : AbstractGeometricPrimitiveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SolidPropertyType
    {
        [XmlIgnore] private AbstractSolid _AbstractSolid;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public SolidPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractSolid), ElementName = "AbstractSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractSolid AbstractSolid
        {
            get
            {
                if (_AbstractSolid == null) _AbstractSolid = new AbstractSolid();
                return _AbstractSolid;
            }
            set { _AbstractSolid = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SolidArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SolidArrayPropertyType
    {
        [XmlIgnore] private List<AbstractSolid> _AbstractSolid;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public SolidArrayPropertyType()
        {
            owns = false;
        }

        [XmlIgnore]
        public AbstractSolid this[int index]
        {
            get { return AbstractSolid[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractSolid.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractSolid), ElementName = "AbstractSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractSolid> AbstractSolid
        {
            get
            {
                if (_AbstractSolid == null) _AbstractSolid = new List<AbstractSolid>();
                return _AbstractSolid;
            }
            set { _AbstractSolid = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractSolid.GetEnumerator();
        }

        public void Add(AbstractSolid obj)
        {
            AbstractSolid.Add(obj);
        }

        public void Clear()
        {
            AbstractSolid.Clear();
        }

        public AbstractSolid Remove(int index)
        {
            AbstractSolid obj = AbstractSolid[index];
            AbstractSolid.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractSolid obj)
        {
            return AbstractSolid.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractSolid _c in AbstractSolid) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SolidType : AbstractSolidType
    {
        [XmlIgnore] private exterior _exterior;

        [XmlIgnore] private List<interior> _interior;

        [XmlElement(Type = typeof (exterior), ElementName = "exterior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public exterior exterior
        {
            get
            {
                if (_exterior == null) _exterior = new exterior();
                return _exterior;
            }
            set { _exterior = value; }
        }

        [XmlElement(Type = typeof (interior), ElementName = "interior", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<interior> interior
        {
            get
            {
                if (_interior == null) _interior = new List<interior>();
                return _interior;
            }
            set { _interior = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ShellType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ShellType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<surfaceMember> _surfaceMember;

        [XmlIgnore]
        public surfaceMember this[int index]
        {
            get { return surfaceMember[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return surfaceMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (surfaceMember), ElementName = "surfaceMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<surfaceMember> surfaceMember
        {
            get
            {
                if (_surfaceMember == null) _surfaceMember = new List<surfaceMember>();
                return _surfaceMember;
            }
            set { _surfaceMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return surfaceMember.GetEnumerator();
        }

        public void Add(surfaceMember obj)
        {
            surfaceMember.Add(obj);
        }

        public void Clear()
        {
            surfaceMember.Clear();
        }

        public surfaceMember Remove(int index)
        {
            surfaceMember obj = surfaceMember[index];
            surfaceMember.Remove(obj);
            return obj;
        }

        public bool Remove(surfaceMember obj)
        {
            return surfaceMember.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (surfaceMember _c in surfaceMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ShellPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ShellPropertyType
    {
        [XmlIgnore] private Shell _Shell;

        [XmlElement(Type = typeof (Shell), ElementName = "Shell", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Shell Shell
        {
            get
            {
                if (_Shell == null) _Shell = new Shell();
                return _Shell;
            }
            set { _Shell = value; }
        }

        public void MakeSchemaCompliant()
        {
            Shell.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeometricAggregateType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeometricAggregateType : AbstractGeometryType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiGeometryType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiGeometryType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<geometryMember> _geometryMember;

        [XmlIgnore] private geometryMembers _geometryMembers;

        [XmlElement(Type = typeof (geometryMember), ElementName = "geometryMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<geometryMember> geometryMember
        {
            get
            {
                if (_geometryMember == null) _geometryMember = new List<geometryMember>();
                return _geometryMember;
            }
            set { _geometryMember = value; }
        }

        [XmlElement(Type = typeof (geometryMembers), ElementName = "geometryMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public geometryMembers geometryMembers
        {
            get
            {
                if (_geometryMembers == null) _geometryMembers = new geometryMembers();
                return _geometryMembers;
            }
            set { _geometryMembers = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiGeometryPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (MultiGeometryType))]
    [XmlInclude(typeof (MultiSurfaceType))]
    [XmlInclude(typeof (MultiSolidType))]
    [XmlInclude(typeof (MultiPointType))]
    [XmlInclude(typeof (MultiCurveType))]
    public class MultiGeometryPropertyType
    {
        [XmlIgnore] private AbstractGeometricAggregate _AbstractGeometricAggregate;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public MultiGeometryPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractGeometricAggregate), ElementName = "AbstractGeometricAggregate",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometricAggregate AbstractGeometricAggregate
        {
            get { return _AbstractGeometricAggregate; }
            set { _AbstractGeometricAggregate = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeometricAggregate.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiPointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiPointType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<pointMember> _pointMember;

        [XmlIgnore] private pointMembers _pointMembers;

        [XmlElement(Type = typeof (pointMember), ElementName = "pointMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<pointMember> pointMember
        {
            get
            {
                if (_pointMember == null) _pointMember = new List<pointMember>();
                return _pointMember;
            }
            set { _pointMember = value; }
        }

        [XmlElement(Type = typeof (pointMembers), ElementName = "pointMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointMembers pointMembers
        {
            get
            {
                if (_pointMembers == null) _pointMembers = new pointMembers();
                return _pointMembers;
            }
            set { _pointMembers = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiPointPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiPointPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MultiPoint _MultiPoint;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public MultiPointPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MultiPoint), ElementName = "MultiPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MultiPoint MultiPoint
        {
            get
            {
                if (_MultiPoint == null) _MultiPoint = new MultiPoint();
                return _MultiPoint;
            }
            set { _MultiPoint = value; }
        }

        public void MakeSchemaCompliant()
        {
            MultiPoint.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiCurveType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<curveMember> _curveMember;

        [XmlIgnore] private curveMembers _curveMembers;

        [XmlElement(Type = typeof (curveMember), ElementName = "curveMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<curveMember> curveMember
        {
            get
            {
                if (_curveMember == null) _curveMember = new List<curveMember>();
                return _curveMember;
            }
            set { _curveMember = value; }
        }

        [XmlElement(Type = typeof (curveMembers), ElementName = "curveMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public curveMembers curveMembers
        {
            get
            {
                if (_curveMembers == null) _curveMembers = new curveMembers();
                return _curveMembers;
            }
            set { _curveMembers = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiCurvePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiCurvePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MultiCurve _MultiCurve;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public MultiCurvePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MultiCurve), ElementName = "MultiCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MultiCurve MultiCurve
        {
            get
            {
                if (_MultiCurve == null) _MultiCurve = new MultiCurve();
                return _MultiCurve;
            }
            set { _MultiCurve = value; }
        }

        public void MakeSchemaCompliant()
        {
            MultiCurve.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiSurfaceType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<surfaceMember> _surfaceMember;

        [XmlIgnore] private surfaceMembers _surfaceMembers;

        [XmlElement(Type = typeof (surfaceMember), ElementName = "surfaceMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<surfaceMember> surfaceMember
        {
            get
            {
                if (_surfaceMember == null) _surfaceMember = new List<surfaceMember>();
                return _surfaceMember;
            }
            set { _surfaceMember = value; }
        }

        [XmlElement(Type = typeof (surfaceMembers), ElementName = "surfaceMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public surfaceMembers surfaceMembers
        {
            get
            {
                if (_surfaceMembers == null) _surfaceMembers = new surfaceMembers();
                return _surfaceMembers;
            }
            set { _surfaceMembers = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiSurfacePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiSurfacePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MultiSurface _MultiSurface;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public MultiSurfacePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MultiSurface), ElementName = "MultiSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MultiSurface MultiSurface
        {
            get
            {
                if (_MultiSurface == null) _MultiSurface = new MultiSurface();
                return _MultiSurface;
            }
            set { _MultiSurface = value; }
        }

        public void MakeSchemaCompliant()
        {
            MultiSurface.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiSolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiSolidType : AbstractGeometricAggregateType
    {
        [XmlIgnore] private List<solidMember> _solidMember;

        [XmlIgnore] private solidMembers _solidMembers;

        [XmlElement(Type = typeof (solidMember), ElementName = "solidMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<solidMember> solidMember
        {
            get
            {
                if (_solidMember == null) _solidMember = new List<solidMember>();
                return _solidMember;
            }
            set { _solidMember = value; }
        }

        [XmlElement(Type = typeof (solidMembers), ElementName = "solidMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public solidMembers solidMembers
        {
            get
            {
                if (_solidMembers == null) _solidMembers = new solidMembers();
                return _solidMembers;
            }
            set { _solidMembers = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiSolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MultiSolidPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MultiSolid _MultiSolid;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public MultiSolidPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (MultiSolid), ElementName = "MultiSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MultiSolid MultiSolid
        {
            get
            {
                if (_MultiSolid == null) _MultiSolid = new MultiSolid();
                return _MultiSolid;
            }
            set { _MultiSolid = value; }
        }

        public void MakeSchemaCompliant()
        {
            MultiSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeObjectType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeObjectType : AbstractGMLType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimePrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimePrimitiveType : AbstractTimeObjectType
    {
        [XmlIgnore] private List<RelatedTimeType> _relatedTime;

        [XmlIgnore]
        public RelatedTimeType this[int index]
        {
            get { return relatedTime[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return relatedTime.Count; }
        }

        [XmlElement(Type = typeof (RelatedTimeType), ElementName = "relatedTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<RelatedTimeType> relatedTime
        {
            get
            {
                if (_relatedTime == null) _relatedTime = new List<RelatedTimeType>();
                return _relatedTime;
            }
            set { _relatedTime = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return relatedTime.GetEnumerator();
        }

        public void Add(RelatedTimeType obj)
        {
            relatedTime.Add(obj);
        }

        public void Clear()
        {
            relatedTime.Clear();
        }

        public RelatedTimeType Remove(int index)
        {
            RelatedTimeType obj = relatedTime[index];
            relatedTime.Remove(obj);
            return obj;
        }

        public bool Remove(RelatedTimeType obj)
        {
            return relatedTime.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimePrimitivePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractTimeTopologyPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeGeometricPrimitiveType))]
    public class TimePrimitivePropertyType
    {
        [XmlIgnore] private AbstractTimePrimitive _AbstractTimePrimitive;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TimePrimitivePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTimePrimitive), ElementName = "AbstractTimePrimitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimePrimitive AbstractTimePrimitive
        {
            get { return _AbstractTimePrimitive; }
            set { _AbstractTimePrimitive = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractTimePrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RelatedTimeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RelatedTimeType : TimePrimitivePropertyType
    {
        [XmlIgnore] private relativePosition _relativePosition;

        [XmlIgnore] public bool _relativePositionSpecified;

        [XmlAttribute(AttributeName = "relativePosition")]
        public relativePosition relativePosition
        {
            get { return _relativePosition; }
            set
            {
                _relativePosition = value;
                _relativePositionSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeComplexType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeComplexType : AbstractTimeObjectType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeGeometricPrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeGeometricPrimitiveType : AbstractTimePrimitiveType
    {
        [XmlIgnore] private string _frame;

        public AbstractTimeGeometricPrimitiveType()
        {
            frame = "#ISO-8601";
        }

        [XmlAttribute(AttributeName = "frame", DataType = "anyURI")]
        public string frame
        {
            get { return _frame; }
            set { _frame = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeInstantType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeInstantType : AbstractTimeGeometricPrimitiveType
    {
        [XmlIgnore] private timePosition _timePosition;

        [XmlElement(Type = typeof (timePosition), ElementName = "timePosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public timePosition timePosition
        {
            get
            {
                if (_timePosition == null) _timePosition = new timePosition();
                return _timePosition;
            }
            set { _timePosition = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            timePosition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeInstantPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeInstantPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeInstant _TimeInstant;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TimeInstantPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeInstant), ElementName = "TimeInstant", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeInstant TimeInstant
        {
            get
            {
                if (_TimeInstant == null) _TimeInstant = new TimeInstant();
                return _TimeInstant;
            }
            set { _TimeInstant = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeInstant.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimePeriodType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimePeriodType : AbstractTimeGeometricPrimitiveType
    {
        [XmlIgnore] private TimeInstantPropertyType _begin;
        [XmlIgnore] private TimePositionType _beginPosition;
        [XmlIgnore] private string _duration;
        [XmlIgnore] private TimeInstantPropertyType _end;
        [XmlIgnore] private TimePositionType _endPosition;
        [XmlIgnore] private timeInterval _timeInterval;

        public TimePeriodType()
        {
            duration = string.Empty;
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "beginPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType beginPosition
        {
            get
            {
                if (_beginPosition == null) _beginPosition = new TimePositionType();
                return _beginPosition;
            }
            set { _beginPosition = value; }
        }

        [XmlElement(Type = typeof (TimeInstantPropertyType), ElementName = "begin", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeInstantPropertyType begin
        {
            get
            {
                if (_begin == null) _begin = new TimeInstantPropertyType();
                return _begin;
            }
            set { _begin = value; }
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "endPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType endPosition
        {
            get
            {
                if (_endPosition == null) _endPosition = new TimePositionType();
                return _endPosition;
            }
            set { _endPosition = value; }
        }

        [XmlElement(Type = typeof (TimeInstantPropertyType), ElementName = "end", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeInstantPropertyType end
        {
            get
            {
                if (_end == null) _end = new TimeInstantPropertyType();
                return _end;
            }
            set { _end = value; }
        }

        [XmlElement(ElementName = "duration", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "duration",
            Namespace = Declarations.SchemaVersion)]
        public string duration
        {
            get { return _duration; }
            set { _duration = value; }
        }

        [XmlElement(Type = typeof (timeInterval), ElementName = "timeInterval", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public timeInterval timeInterval
        {
            get
            {
                if (_timeInterval == null) _timeInterval = new timeInterval();
                return _timeInterval;
            }
            set { _timeInterval = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            beginPosition.MakeSchemaCompliant();
            begin.MakeSchemaCompliant();
            endPosition.MakeSchemaCompliant();
            end.MakeSchemaCompliant();
            timeInterval.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimePeriodPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimePeriodPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimePeriod _TimePeriod;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TimePeriodPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimePeriod), ElementName = "TimePeriod", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePeriod TimePeriod
        {
            get
            {
                if (_TimePeriod == null) _TimePeriod = new TimePeriod();
                return _TimePeriod;
            }
            set { _TimePeriod = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimePeriod.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimePositionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimePositionType
    {
        [XmlIgnore] private string _calendarEraName;
        [XmlIgnore] private string _frame;

        [XmlIgnore] private TimeIndeterminateValueType _indeterminatePosition;

        [XmlIgnore] public bool _indeterminatePositionSpecified;

        [XmlIgnore] private DateTime _Value;

        [XmlIgnore] public bool _ValueSpecified;

        public TimePositionType()
        {
            frame = "#ISO-8601";
        }

        [XmlAttribute(AttributeName = "frame", DataType = "anyURI")]
        public string frame
        {
            get { return _frame; }
            set { _frame = value; }
        }

        [XmlAttribute(AttributeName = "calendarEraName", DataType = "string")]
        public string calendarEraName
        {
            get { return _calendarEraName; }
            set { _calendarEraName = value; }
        }

        [XmlAttribute(AttributeName = "indeterminatePosition")]
        public TimeIndeterminateValueType indeterminatePosition
        {
            get { return _indeterminatePosition; }
            set
            {
                _indeterminatePosition = value;
                _indeterminatePositionSpecified = true;
            }
        }

        [XmlText(DataType = "dateTime")]
        public DateTime Value
        {
            get { return _Value; }
            set
            {
                _Value = value;
                _ValueSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime ValueUtc
        {
            get { return _Value.ToUniversalTime(); }
            set
            {
                _Value = value.ToLocalTime();
                _ValueSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "TimeIntervalLengthType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeIntervalLengthType
    {
        [XmlIgnore] private string _factor;
        [XmlIgnore] private string _radix;
        [XmlIgnore] private TimeUnitType _unit;

        [XmlIgnore] public bool _unitSpecified;
        [XmlIgnore] private decimal _Value;

        [XmlIgnore] public bool _ValueSpecified;

        public TimeIntervalLengthType()
        {
            _unitSpecified = true;
        }

        [XmlAttribute(AttributeName = "unit")]
        public TimeUnitType unit
        {
            get { return _unit; }
            set
            {
                _unit = value;
                _unitSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "radix", DataType = "positiveInteger")]
        public string radix
        {
            get { return _radix; }
            set { _radix = value; }
        }

        [XmlAttribute(AttributeName = "factor", DataType = "integer")]
        public string factor
        {
            get { return _factor; }
            set { _factor = value; }
        }

        [XmlText(typeof (Decimal))]
        public decimal Value
        {
            get { return _Value; }
            set
            {
                _Value = value;
                _ValueSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractFeatureType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractFeatureType : AbstractGMLType
    {
        [XmlIgnore] private boundedBy _boundedBy;

        [XmlIgnore] private location _location;

        [XmlElement(Type = typeof (boundedBy), ElementName = "boundedBy", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public boundedBy boundedBy
        {
            get
            {
                if (_boundedBy == null) _boundedBy = new boundedBy();
                return _boundedBy;
            }
            set { _boundedBy = value; }
        }

        [XmlElement(Type = typeof (location), ElementName = "location", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public location location
        {
            get
            {
                if (_location == null) _location = new location();
                return _location;
            }
            set { _location = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FeaturePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (DynamicFeatureType))]
    [XmlInclude(typeof (ObservationType))]
    [XmlInclude(typeof (AbstractCoverageType))]
    [XmlInclude(typeof (AbstractFeatureCollectionType))]
    [XmlInclude(typeof (BoundedFeatureType))]
    public class FeaturePropertyType
    {
        [XmlIgnore] private AbstractFeature _AbstractFeature;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public FeaturePropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractFeature), ElementName = "AbstractFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractFeature AbstractFeature
        {
            get { return _AbstractFeature; }
            set { _AbstractFeature = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractFeature.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BoundingShapeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BoundingShapeType
    {
        [XmlIgnore] private Envelope _Envelope;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _Null;

        public BoundingShapeType()
        {
            @Null = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Envelope), ElementName = "Envelope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Envelope Envelope
        {
            get
            {
                if (_Envelope == null) _Envelope = new Envelope();
                return _Envelope;
            }
            set { _Envelope = value; }
        }

        [XmlElement(ElementName = "Null", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public string @Null
        {
            get { return _Null; }
            set { _Null = value; }
        }

        public void MakeSchemaCompliant()
        {
            Envelope.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EnvelopeWithTimePeriodType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EnvelopeWithTimePeriodType : EnvelopeType
    {
        [XmlIgnore] private TimePositionType _beginPosition;
        [XmlIgnore] private TimePositionType _endPosition;
        [XmlIgnore] private string _frame;

        public EnvelopeWithTimePeriodType()
        {
            frame = "#ISO-8601";
        }

        [XmlAttribute(AttributeName = "frame", DataType = "anyURI")]
        public string frame
        {
            get { return _frame; }
            set { _frame = value; }
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "beginPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType beginPosition
        {
            get
            {
                if (_beginPosition == null) _beginPosition = new TimePositionType();
                return _beginPosition;
            }
            set { _beginPosition = value; }
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "endPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType endPosition
        {
            get
            {
                if (_endPosition == null) _endPosition = new TimePositionType();
                return _endPosition;
            }
            set { _endPosition = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            beginPosition.MakeSchemaCompliant();
            endPosition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractFeatureMemberType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractFeatureMemberType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public AbstractFeatureMemberType()
        {
            owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "DirectionPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectionPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CompassPointEnumeration _CompassPoint;

        [XmlIgnore] public bool _CompassPointSpecified;
        [XmlIgnore] private DirectionDescriptionType _DirectionDescription;
        [XmlIgnore] private CodeType _DirectionKeyword;
        [XmlIgnore] private StringOrRefType _DirectionString;
        [XmlIgnore] private DirectionVectorType _DirectionVector;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public DirectionPropertyType()
        {
            owns = false;
            type = "simple";
            _CompassPointSpecified = true;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (DirectionVectorType), ElementName = "DirectionVector", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectionVectorType DirectionVector
        {
            get
            {
                if (_DirectionVector == null) _DirectionVector = new DirectionVectorType();
                return _DirectionVector;
            }
            set { _DirectionVector = value; }
        }

        [XmlElement(Type = typeof (DirectionDescriptionType), ElementName = "DirectionDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectionDescriptionType DirectionDescription
        {
            get
            {
                if (_DirectionDescription == null) _DirectionDescription = new DirectionDescriptionType();
                return _DirectionDescription;
            }
            set { _DirectionDescription = value; }
        }


        [XmlElement(ElementName = "CompassPoint", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public CompassPointEnumeration CompassPoint
        {
            get { return _CompassPoint; }
            set
            {
                _CompassPoint = value;
                _CompassPointSpecified = true;
            }
        }

        [XmlElement(Type = typeof (CodeType), ElementName = "DirectionKeyword", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CodeType DirectionKeyword
        {
            get
            {
                if (_DirectionKeyword == null) _DirectionKeyword = new CodeType();
                return _DirectionKeyword;
            }
            set { _DirectionKeyword = value; }
        }

        [XmlElement(Type = typeof (StringOrRefType), ElementName = "DirectionString", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public StringOrRefType DirectionString
        {
            get
            {
                if (_DirectionString == null) _DirectionString = new StringOrRefType();
                return _DirectionString;
            }
            set { _DirectionString = value; }
        }

        public void MakeSchemaCompliant()
        {
            DirectionVector.MakeSchemaCompliant();
            DirectionDescription.MakeSchemaCompliant();
            DirectionKeyword.MakeSchemaCompliant();
            DirectionString.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectionVectorType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectionVectorType
    {
        [XmlIgnore] private AngleType _horizontalAngle;
        [XmlIgnore] private vector _vector;
        [XmlIgnore] private AngleType _verticalAngle;

        [XmlElement(Type = typeof (vector), ElementName = "vector", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public vector vector
        {
            get
            {
                if (_vector == null) _vector = new vector();
                return _vector;
            }
            set { _vector = value; }
        }

        [XmlElement(Type = typeof (AngleType), ElementName = "horizontalAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AngleType horizontalAngle
        {
            get
            {
                if (_horizontalAngle == null) _horizontalAngle = new AngleType();
                return _horizontalAngle;
            }
            set { _horizontalAngle = value; }
        }

        [XmlElement(Type = typeof (AngleType), ElementName = "verticalAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AngleType verticalAngle
        {
            get
            {
                if (_verticalAngle == null) _verticalAngle = new AngleType();
                return _verticalAngle;
            }
            set { _verticalAngle = value; }
        }

        public void MakeSchemaCompliant()
        {
            vector.MakeSchemaCompliant();
            horizontalAngle.MakeSchemaCompliant();
            verticalAngle.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectionDescriptionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectionDescriptionType
    {
        [XmlIgnore] private CompassPointEnumeration _compassPoint;

        [XmlIgnore] public bool _compassPointSpecified;
        [XmlIgnore] private description _description;


        [XmlIgnore] private CodeType _keyword;
        [XmlIgnore] private ReferenceType _reference;

        public DirectionDescriptionType()
        {
            _compassPointSpecified = true;
        }

        [XmlElement(ElementName = "compassPoint", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public CompassPointEnumeration compassPoint
        {
            get { return _compassPoint; }
            set
            {
                _compassPoint = value;
                _compassPointSpecified = true;
            }
        }

        [XmlElement(Type = typeof (CodeType), ElementName = "keyword", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CodeType keyword
        {
            get
            {
                if (_keyword == null) _keyword = new CodeType();
                return _keyword;
            }
            set { _keyword = value; }
        }

        [XmlElement(Type = typeof (description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public description description
        {
            get
            {
                if (_description == null) _description = new description();
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (ReferenceType), ElementName = "reference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ReferenceType reference
        {
            get
            {
                if (_reference == null) _reference = new ReferenceType();
                return _reference;
            }
            set { _reference = value; }
        }

        public void MakeSchemaCompliant()
        {
            keyword.MakeSchemaCompliant();
            description.MakeSchemaCompliant();
            reference.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DynamicFeatureType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DynamicFeatureType : AbstractFeatureType
    {
        [XmlIgnore] private dataSource _dataSource;
        [XmlIgnore] private dataSourceReference _dataSourceReference;
        [XmlIgnore] private history _history;
        [XmlIgnore] private validTime _validTime;

        [XmlElement(Type = typeof (validTime), ElementName = "validTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public validTime validTime
        {
            get
            {
                if (_validTime == null) _validTime = new validTime();
                return _validTime;
            }
            set { _validTime = value; }
        }

        [XmlElement(Type = typeof (history), ElementName = "history", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public history history
        {
            get
            {
                if (_history == null) _history = new history();
                return _history;
            }
            set { _history = value; }
        }

        [XmlElement(Type = typeof (dataSource), ElementName = "dataSource", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public dataSource dataSource
        {
            get
            {
                if (_dataSource == null) _dataSource = new dataSource();
                return _dataSource;
            }
            set { _dataSource = value; }
        }

        [XmlElement(Type = typeof (dataSourceReference), ElementName = "dataSourceReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public dataSourceReference dataSourceReference
        {
            get
            {
                if (_dataSourceReference == null) _dataSourceReference = new dataSourceReference();
                return _dataSourceReference;
            }
            set { _dataSourceReference = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DynamicFeatureCollectionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DynamicFeatureCollectionType : DynamicFeatureType
    {
        [XmlIgnore] private dynamicMembers _dynamicMembers;

        [XmlElement(Type = typeof (dynamicMembers), ElementName = "dynamicMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public dynamicMembers dynamicMembers
        {
            get
            {
                if (_dynamicMembers == null) _dynamicMembers = new dynamicMembers();
                return _dynamicMembers;
            }
            set { _dynamicMembers = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            dynamicMembers.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DynamicFeatureMemberType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DynamicFeatureMemberType : AbstractFeatureMemberType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private List<DynamicFeature> _DynamicFeature;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public DynamicFeatureMemberType()
        {
            type = "simple";
        }

        [XmlIgnore]
        public DynamicFeature this[int index]
        {
            get { return DynamicFeature[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return DynamicFeature.Count; }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (DynamicFeature), ElementName = "DynamicFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<DynamicFeature> DynamicFeature
        {
            get
            {
                if (_DynamicFeature == null) _DynamicFeature = new List<DynamicFeature>();
                return _DynamicFeature;
            }
            set { _DynamicFeature = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return DynamicFeature.GetEnumerator();
        }

        public void Add(DynamicFeature obj)
        {
            DynamicFeature.Add(obj);
        }

        public void Clear()
        {
            DynamicFeature.Clear();
        }

        public DynamicFeature Remove(int index)
        {
            DynamicFeature obj = DynamicFeature[index];
            DynamicFeature.Remove(obj);
            return obj;
        }

        public bool Remove(DynamicFeature obj)
        {
            return DynamicFeature.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeSliceType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeSliceType : AbstractGMLType
    {
        [XmlIgnore] private dataSource _dataSource;
        [XmlIgnore] private validTime _validTime;

        [XmlElement(Type = typeof (validTime), ElementName = "validTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public validTime validTime
        {
            get
            {
                if (_validTime == null) _validTime = new validTime();
                return _validTime;
            }
            set { _validTime = value; }
        }

        [XmlElement(Type = typeof (dataSource), ElementName = "dataSource", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public dataSource dataSource
        {
            get
            {
                if (_dataSource == null) _dataSource = new dataSource();
                return _dataSource;
            }
            set { _dataSource = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            validTime.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "HistoryPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (MovingObjectStatusType))]
    public class HistoryPropertyType
    {
        [XmlIgnore] private List<AbstractTimeSlice> _AbstractTimeSlice;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public HistoryPropertyType()
        {
            owns = false;
        }

        [XmlIgnore]
        public AbstractTimeSlice this[int index]
        {
            get { return AbstractTimeSlice[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractTimeSlice.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTimeSlice), ElementName = "AbstractTimeSlice", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractTimeSlice> AbstractTimeSlice
        {
            get
            {
                if (_AbstractTimeSlice == null) _AbstractTimeSlice = new List<AbstractTimeSlice>();
                return _AbstractTimeSlice;
            }
            set { _AbstractTimeSlice = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractTimeSlice.GetEnumerator();
        }

        public void Add(AbstractTimeSlice obj)
        {
            AbstractTimeSlice.Add(obj);
        }

        public void Clear()
        {
            AbstractTimeSlice.Clear();
        }

        public AbstractTimeSlice Remove(int index)
        {
            AbstractTimeSlice obj = AbstractTimeSlice[index];
            AbstractTimeSlice.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractTimeSlice obj)
        {
            return AbstractTimeSlice.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractTimeSlice _c in AbstractTimeSlice) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometricComplexType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeometricComplexType : AbstractGeometryType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<GeometricPrimitivePropertyType> _element;

        [XmlIgnore]
        public GeometricPrimitivePropertyType this[int index]
        {
            get { return element[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return element.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (GeometricPrimitivePropertyType), ElementName = "element", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<GeometricPrimitivePropertyType> element
        {
            get
            {
                if (_element == null) _element = new List<GeometricPrimitivePropertyType>();
                return _element;
            }
            set { _element = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return element.GetEnumerator();
        }

        public void Add(GeometricPrimitivePropertyType obj)
        {
            element.Add(obj);
        }

        public void Clear()
        {
            element.Clear();
        }

        public GeometricPrimitivePropertyType Remove(int index)
        {
            GeometricPrimitivePropertyType obj = element[index];
            element.Remove(obj);
            return obj;
        }

        public bool Remove(GeometricPrimitivePropertyType obj)
        {
            return element.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (GeometricPrimitivePropertyType _c in element) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeometricComplexPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeometricComplexPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CompositeCurve _CompositeCurve;
        [XmlIgnore] private CompositeSolid _CompositeSolid;
        [XmlIgnore] private CompositeSurface _CompositeSurface;
        [XmlIgnore] private GeometricComplex _GeometricComplex;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public GeometricComplexPropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeometricComplex), ElementName = "GeometricComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeometricComplex GeometricComplex
        {
            get
            {
                if (_GeometricComplex == null) _GeometricComplex = new GeometricComplex();
                return _GeometricComplex;
            }
            set { _GeometricComplex = value; }
        }

        [XmlElement(Type = typeof (CompositeCurve), ElementName = "CompositeCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CompositeCurve CompositeCurve
        {
            get
            {
                if (_CompositeCurve == null) _CompositeCurve = new CompositeCurve();
                return _CompositeCurve;
            }
            set { _CompositeCurve = value; }
        }

        [XmlElement(Type = typeof (CompositeSurface), ElementName = "CompositeSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CompositeSurface CompositeSurface
        {
            get
            {
                if (_CompositeSurface == null) _CompositeSurface = new CompositeSurface();
                return _CompositeSurface;
            }
            set { _CompositeSurface = value; }
        }

        [XmlElement(Type = typeof (CompositeSolid), ElementName = "CompositeSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CompositeSolid CompositeSolid
        {
            get
            {
                if (_CompositeSolid == null) _CompositeSolid = new CompositeSolid();
                return _CompositeSolid;
            }
            set { _CompositeSolid = value; }
        }

        public void MakeSchemaCompliant()
        {
            GeometricComplex.MakeSchemaCompliant();
            CompositeCurve.MakeSchemaCompliant();
            CompositeSurface.MakeSchemaCompliant();
            CompositeSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompositeCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompositeCurveType : AbstractCurveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<curveMember> _curveMember;

        [XmlIgnore]
        public curveMember this[int index]
        {
            get { return curveMember[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return curveMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (curveMember), ElementName = "curveMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<curveMember> curveMember
        {
            get
            {
                if (_curveMember == null) _curveMember = new List<curveMember>();
                return _curveMember;
            }
            set { _curveMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return curveMember.GetEnumerator();
        }

        public void Add(curveMember obj)
        {
            curveMember.Add(obj);
        }

        public void Clear()
        {
            curveMember.Clear();
        }

        public curveMember Remove(int index)
        {
            curveMember obj = curveMember[index];
            curveMember.Remove(obj);
            return obj;
        }

        public bool Remove(curveMember obj)
        {
            return curveMember.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (curveMember _c in curveMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompositeSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompositeSurfaceType : AbstractSurfaceType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<surfaceMember> _surfaceMember;

        [XmlIgnore]
        public surfaceMember this[int index]
        {
            get { return surfaceMember[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return surfaceMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (surfaceMember), ElementName = "surfaceMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<surfaceMember> surfaceMember
        {
            get
            {
                if (_surfaceMember == null) _surfaceMember = new List<surfaceMember>();
                return _surfaceMember;
            }
            set { _surfaceMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return surfaceMember.GetEnumerator();
        }

        public void Add(surfaceMember obj)
        {
            surfaceMember.Add(obj);
        }

        public void Clear()
        {
            surfaceMember.Clear();
        }

        public surfaceMember Remove(int index)
        {
            surfaceMember obj = surfaceMember[index];
            surfaceMember.Remove(obj);
            return obj;
        }

        public bool Remove(surfaceMember obj)
        {
            return surfaceMember.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (surfaceMember _c in surfaceMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompositeSolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompositeSolidType : AbstractSolidType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<solidMember> _solidMember;

        [XmlIgnore]
        public solidMember this[int index]
        {
            get { return solidMember[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return solidMember.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (solidMember), ElementName = "solidMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<solidMember> solidMember
        {
            get
            {
                if (_solidMember == null) _solidMember = new List<solidMember>();
                return _solidMember;
            }
            set { _solidMember = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return solidMember.GetEnumerator();
        }

        public void Add(solidMember obj)
        {
            solidMember.Add(obj);
        }

        public void Clear()
        {
            solidMember.Clear();
        }

        public solidMember Remove(int index)
        {
            solidMember obj = solidMember[index];
            solidMember.Remove(obj);
            return obj;
        }

        public bool Remove(solidMember obj)
        {
            return solidMember.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (solidMember _c in solidMember) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTopologyType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTopologyType : AbstractGMLType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTopoPrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTopoPrimitiveType : AbstractTopologyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "NodeOrEdgePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class NodeOrEdgePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Edge _Edge;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private Node _Node;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public NodeOrEdgePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Node), ElementName = "Node", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Node Node
        {
            get
            {
                if (_Node == null) _Node = new Node();
                return _Node;
            }
            set { _Node = value; }
        }

        [XmlElement(Type = typeof (Edge), ElementName = "Edge", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Edge Edge
        {
            get
            {
                if (_Edge == null) _Edge = new Edge();
                return _Edge;
            }
            set { _Edge = value; }
        }

        public void MakeSchemaCompliant()
        {
            Node.MakeSchemaCompliant();
            Edge.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "NodePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class NodePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private Node _Node;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public NodePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Node), ElementName = "Node", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Node Node
        {
            get
            {
                if (_Node == null) _Node = new Node();
                return _Node;
            }
            set { _Node = value; }
        }

        public void MakeSchemaCompliant()
        {
            Node.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FaceOrTopoSolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FaceOrTopoSolidPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Face _Face;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private TopoSolid _TopoSolid;
        [XmlIgnore] private string _type;

        public FaceOrTopoSolidPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Face), ElementName = "Face", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Face Face
        {
            get
            {
                if (_Face == null) _Face = new Face();
                return _Face;
            }
            set { _Face = value; }
        }

        [XmlElement(Type = typeof (TopoSolid), ElementName = "TopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSolid TopoSolid
        {
            get
            {
                if (_TopoSolid == null) _TopoSolid = new TopoSolid();
                return _TopoSolid;
            }
            set { _TopoSolid = value; }
        }

        public void MakeSchemaCompliant()
        {
            Face.MakeSchemaCompliant();
            TopoSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoSolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoSolidPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private TopoSolid _TopoSolid;
        [XmlIgnore] private string _type;

        public TopoSolidPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoSolid), ElementName = "TopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSolid TopoSolid
        {
            get
            {
                if (_TopoSolid == null) _TopoSolid = new TopoSolid();
                return _TopoSolid;
            }
            set { _TopoSolid = value; }
        }

        public void MakeSchemaCompliant()
        {
            TopoSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "NodeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class NodeType : AbstractTopoPrimitiveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;

        [XmlIgnore] private FaceOrTopoSolidPropertyType _container;

        [XmlIgnore] private List<directedEdge> _directedEdge;

        [XmlIgnore] private pointProperty _pointProperty;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (FaceOrTopoSolidPropertyType), ElementName = "container", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public FaceOrTopoSolidPropertyType container
        {
            get
            {
                if (_container == null) _container = new FaceOrTopoSolidPropertyType();
                return _container;
            }
            set { _container = value; }
        }

        [XmlElement(Type = typeof (directedEdge), ElementName = "directedEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedEdge> directedEdge
        {
            get
            {
                if (_directedEdge == null) _directedEdge = new List<directedEdge>();
                return _directedEdge;
            }
            set { _directedEdge = value; }
        }

        [XmlElement(Type = typeof (pointProperty), ElementName = "pointProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pointProperty pointProperty
        {
            get
            {
                if (_pointProperty == null) _pointProperty = new pointProperty();
                return _pointProperty;
            }
            set { _pointProperty = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedNodePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedNodePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private Node _Node;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool _orientationSpecified;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public DirectedNodePropertyType()
        {
            orientation = SignType.Positive;
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                _orientationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Node), ElementName = "Node", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Node Node
        {
            get
            {
                if (_Node == null) _Node = new Node();
                return _Node;
            }
            set { _Node = value; }
        }

        public void MakeSchemaCompliant()
        {
            Node.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EdgeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EdgeType : AbstractTopoPrimitiveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;

        [XmlIgnore] private TopoSolidPropertyType _container;
        [XmlIgnore] private curveProperty _curveProperty;
        [XmlIgnore] private List<directedFace> _directedFace;

        [XmlIgnore] private List<directedNode> _directedNode;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoSolidPropertyType), ElementName = "container", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSolidPropertyType container
        {
            get
            {
                if (_container == null) _container = new TopoSolidPropertyType();
                return _container;
            }
            set { _container = value; }
        }

        [XmlElement(Type = typeof (directedNode), ElementName = "directedNode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedNode> directedNode
        {
            get
            {
                if (_directedNode == null) _directedNode = new List<directedNode>();
                return _directedNode;
            }
            set { _directedNode = value; }
        }

        [XmlElement(Type = typeof (directedFace), ElementName = "directedFace", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedFace> directedFace
        {
            get
            {
                if (_directedFace == null) _directedFace = new List<directedFace>();
                return _directedFace;
            }
            set { _directedFace = value; }
        }

        [XmlElement(Type = typeof (curveProperty), ElementName = "curveProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public curveProperty curveProperty
        {
            get
            {
                if (_curveProperty == null) _curveProperty = new curveProperty();
                return _curveProperty;
            }
            set { _curveProperty = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (directedNode _c in directedNode) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedEdgePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedEdgePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Edge _Edge;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool _orientationSpecified;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public DirectedEdgePropertyType()
        {
            orientation = SignType.Positive;
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                _orientationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Edge), ElementName = "Edge", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Edge Edge
        {
            get
            {
                if (_Edge == null) _Edge = new Edge();
                return _Edge;
            }
            set { _Edge = value; }
        }

        public void MakeSchemaCompliant()
        {
            Edge.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FaceType : AbstractTopoPrimitiveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<directedEdge> _directedEdge;
        [XmlIgnore] private List<directedTopoSolid> _directedTopoSolid;
        [XmlIgnore] private List<NodePropertyType> _isolated;
        [XmlIgnore] private surfaceProperty _surfaceProperty;

        [XmlIgnore] private bool _universal;

        [XmlIgnore] public bool _universalSpecified;

        public FaceType()
        {
            universal = false;
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "universal", DataType = "boolean")]
        public bool universal
        {
            get { return _universal; }
            set
            {
                _universal = value;
                _universalSpecified = true;
            }
        }

        [XmlElement(Type = typeof (NodePropertyType), ElementName = "isolated", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<NodePropertyType> isolated
        {
            get
            {
                if (_isolated == null) _isolated = new List<NodePropertyType>();
                return _isolated;
            }
            set { _isolated = value; }
        }

        [XmlElement(Type = typeof (directedEdge), ElementName = "directedEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedEdge> directedEdge
        {
            get
            {
                if (_directedEdge == null) _directedEdge = new List<directedEdge>();
                return _directedEdge;
            }
            set { _directedEdge = value; }
        }

        [XmlElement(Type = typeof (directedTopoSolid), ElementName = "directedTopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedTopoSolid> directedTopoSolid
        {
            get
            {
                if (_directedTopoSolid == null) _directedTopoSolid = new List<directedTopoSolid>();
                return _directedTopoSolid;
            }
            set { _directedTopoSolid = value; }
        }

        [XmlElement(Type = typeof (surfaceProperty), ElementName = "surfaceProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public surfaceProperty surfaceProperty
        {
            get
            {
                if (_surfaceProperty == null) _surfaceProperty = new surfaceProperty();
                return _surfaceProperty;
            }
            set { _surfaceProperty = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (directedEdge _c in directedEdge) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedFacePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedFacePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Face _Face;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool _orientationSpecified;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public DirectedFacePropertyType()
        {
            orientation = SignType.Positive;
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                _orientationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (Face), ElementName = "Face", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Face Face
        {
            get
            {
                if (_Face == null) _Face = new Face();
                return _Face;
            }
            set { _Face = value; }
        }

        public void MakeSchemaCompliant()
        {
            Face.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoSolidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoSolidType : AbstractTopoPrimitiveType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<directedFace> _directedFace;
        [XmlIgnore] private List<NodeOrEdgePropertyType> _isolated;
        [XmlIgnore] private solidProperty _solidProperty;

        [XmlIgnore] private bool _universal;

        [XmlIgnore] public bool _universalSpecified;

        public TopoSolidType()
        {
            universal = false;
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "universal", DataType = "boolean")]
        public bool universal
        {
            get { return _universal; }
            set
            {
                _universal = value;
                _universalSpecified = true;
            }
        }

        [XmlElement(Type = typeof (NodeOrEdgePropertyType), ElementName = "isolated", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<NodeOrEdgePropertyType> isolated
        {
            get
            {
                if (_isolated == null) _isolated = new List<NodeOrEdgePropertyType>();
                return _isolated;
            }
            set { _isolated = value; }
        }

        [XmlElement(Type = typeof (directedFace), ElementName = "directedFace", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedFace> directedFace
        {
            get
            {
                if (_directedFace == null) _directedFace = new List<directedFace>();
                return _directedFace;
            }
            set { _directedFace = value; }
        }

        [XmlElement(Type = typeof (solidProperty), ElementName = "solidProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public solidProperty solidProperty
        {
            get
            {
                if (_solidProperty == null) _solidProperty = new solidProperty();
                return _solidProperty;
            }
            set { _solidProperty = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (directedFace _c in directedFace) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedTopoSolidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedTopoSolidPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private SignType _orientation;

        [XmlIgnore] public bool _orientationSpecified;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private TopoSolid _TopoSolid;

        [XmlIgnore] private string _type;

        public DirectedTopoSolidPropertyType()
        {
            orientation = SignType.Positive;
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "orientation")]
        public SignType orientation
        {
            get { return _orientation; }
            set
            {
                _orientation = value;
                _orientationSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoSolid), ElementName = "TopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSolid TopoSolid
        {
            get
            {
                if (_TopoSolid == null) _TopoSolid = new TopoSolid();
                return _TopoSolid;
            }
            set { _TopoSolid = value; }
        }

        public void MakeSchemaCompliant()
        {
            TopoSolid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoPointType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoPointType : AbstractTopologyType
    {
        [XmlIgnore] private directedNode _directedNode;

        [XmlElement(Type = typeof (directedNode), ElementName = "directedNode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public directedNode directedNode
        {
            get
            {
                if (_directedNode == null) _directedNode = new directedNode();
                return _directedNode;
            }
            set { _directedNode = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            directedNode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoPointPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoPointPropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        [XmlIgnore] private TopoPoint _TopoPoint;

        public TopoPointPropertyType()
        {
            owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoPoint), ElementName = "TopoPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoPoint TopoPoint
        {
            get
            {
                if (_TopoPoint == null) _TopoPoint = new TopoPoint();
                return _TopoPoint;
            }
            set { _TopoPoint = value; }
        }

        public void MakeSchemaCompliant()
        {
            TopoPoint.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoCurveType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoCurveType : AbstractTopologyType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<directedEdge> _directedEdge;

        [XmlIgnore]
        public directedEdge this[int index]
        {
            get { return directedEdge[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return directedEdge.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (directedEdge), ElementName = "directedEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedEdge> directedEdge
        {
            get
            {
                if (_directedEdge == null) _directedEdge = new List<directedEdge>();
                return _directedEdge;
            }
            set { _directedEdge = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return directedEdge.GetEnumerator();
        }

        public void Add(directedEdge obj)
        {
            directedEdge.Add(obj);
        }

        public void Clear()
        {
            directedEdge.Clear();
        }

        public directedEdge Remove(int index)
        {
            directedEdge obj = directedEdge[index];
            directedEdge.Remove(obj);
            return obj;
        }

        public bool Remove(directedEdge obj)
        {
            return directedEdge.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (directedEdge _c in directedEdge) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoCurvePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoCurvePropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        [XmlIgnore] private TopoCurve _TopoCurve;

        public TopoCurvePropertyType()
        {
            owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoCurve), ElementName = "TopoCurve", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoCurve TopoCurve
        {
            get
            {
                if (_TopoCurve == null) _TopoCurve = new TopoCurve();
                return _TopoCurve;
            }
            set { _TopoCurve = value; }
        }

        public void MakeSchemaCompliant()
        {
            TopoCurve.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoSurfaceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoSurfaceType : AbstractTopologyType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<directedFace> _directedFace;

        [XmlIgnore]
        public directedFace this[int index]
        {
            get { return directedFace[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return directedFace.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (directedFace), ElementName = "directedFace", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedFace> directedFace
        {
            get
            {
                if (_directedFace == null) _directedFace = new List<directedFace>();
                return _directedFace;
            }
            set { _directedFace = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return directedFace.GetEnumerator();
        }

        public void Add(directedFace obj)
        {
            directedFace.Add(obj);
        }

        public void Clear()
        {
            directedFace.Clear();
        }

        public directedFace Remove(int index)
        {
            directedFace obj = directedFace[index];
            directedFace.Remove(obj);
            return obj;
        }

        public bool Remove(directedFace obj)
        {
            return directedFace.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (directedFace _c in directedFace) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoSurfacePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoSurfacePropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        [XmlIgnore] private TopoSurface _TopoSurface;

        public TopoSurfacePropertyType()
        {
            owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoSurface), ElementName = "TopoSurface", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoSurface TopoSurface
        {
            get
            {
                if (_TopoSurface == null) _TopoSurface = new TopoSurface();
                return _TopoSurface;
            }
            set { _TopoSurface = value; }
        }

        public void MakeSchemaCompliant()
        {
            TopoSurface.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoVolumeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoVolumeType : AbstractTopologyType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<directedTopoSolid> _directedTopoSolid;

        [XmlIgnore]
        public directedTopoSolid this[int index]
        {
            get { return directedTopoSolid[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return directedTopoSolid.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (directedTopoSolid), ElementName = "directedTopoSolid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<directedTopoSolid> directedTopoSolid
        {
            get
            {
                if (_directedTopoSolid == null) _directedTopoSolid = new List<directedTopoSolid>();
                return _directedTopoSolid;
            }
            set { _directedTopoSolid = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return directedTopoSolid.GetEnumerator();
        }

        public void Add(directedTopoSolid obj)
        {
            directedTopoSolid.Add(obj);
        }

        public void Clear()
        {
            directedTopoSolid.Clear();
        }

        public directedTopoSolid Remove(int index)
        {
            directedTopoSolid obj = directedTopoSolid[index];
            directedTopoSolid.Remove(obj);
            return obj;
        }

        public bool Remove(directedTopoSolid obj)
        {
            return directedTopoSolid.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (directedTopoSolid _c in directedTopoSolid) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoVolumePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoVolumePropertyType
    {
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        [XmlIgnore] private TopoVolume _TopoVolume;

        public TopoVolumePropertyType()
        {
            owns = false;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TopoVolume), ElementName = "TopoVolume", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoVolume TopoVolume
        {
            get
            {
                if (_TopoVolume == null) _TopoVolume = new TopoVolume();
                return _TopoVolume;
            }
            set { _TopoVolume = value; }
        }

        public void MakeSchemaCompliant()
        {
            TopoVolume.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoComplexType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoComplexType : AbstractTopologyType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private bool _isMaximal;

        [XmlIgnore] public bool _isMaximalSpecified;
        [XmlIgnore] private maximalComplex _maximalComplex;
        [XmlIgnore] private List<subComplex> _subComplex;
        [XmlIgnore] private List<superComplex> _superComplex;
        [XmlIgnore] private List<topoPrimitiveMember> _topoPrimitiveMember;
        [XmlIgnore] private topoPrimitiveMembers _topoPrimitiveMembers;

        public TopoComplexType()
        {
            isMaximal = false;
        }

        [XmlAttribute(AttributeName = "isMaximal", DataType = "boolean")]
        public bool isMaximal
        {
            get { return _isMaximal; }
            set
            {
                _isMaximal = value;
                _isMaximalSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (maximalComplex), ElementName = "maximalComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public maximalComplex maximalComplex
        {
            get
            {
                if (_maximalComplex == null) _maximalComplex = new maximalComplex();
                return _maximalComplex;
            }
            set { _maximalComplex = value; }
        }

        [XmlElement(Type = typeof (superComplex), ElementName = "superComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<superComplex> superComplex
        {
            get
            {
                if (_superComplex == null) _superComplex = new List<superComplex>();
                return _superComplex;
            }
            set { _superComplex = value; }
        }

        [XmlElement(Type = typeof (subComplex), ElementName = "subComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<subComplex> subComplex
        {
            get
            {
                if (_subComplex == null) _subComplex = new List<subComplex>();
                return _subComplex;
            }
            set { _subComplex = value; }
        }

        [XmlElement(Type = typeof (topoPrimitiveMember), ElementName = "topoPrimitiveMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<topoPrimitiveMember> topoPrimitiveMember
        {
            get
            {
                if (_topoPrimitiveMember == null) _topoPrimitiveMember = new List<topoPrimitiveMember>();
                return _topoPrimitiveMember;
            }
            set { _topoPrimitiveMember = value; }
        }

        [XmlElement(Type = typeof (topoPrimitiveMembers), ElementName = "topoPrimitiveMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public topoPrimitiveMembers topoPrimitiveMembers
        {
            get
            {
                if (_topoPrimitiveMembers == null) _topoPrimitiveMembers = new topoPrimitiveMembers();
                return _topoPrimitiveMembers;
            }
            set { _topoPrimitiveMembers = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            maximalComplex.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoPrimitiveMemberType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (NodeType))]
    [XmlInclude(typeof (TopoSolidType))]
    [XmlInclude(typeof (EdgeType))]
    [XmlInclude(typeof (FaceType))]
    public class TopoPrimitiveMemberType
    {
        [XmlIgnore] private AbstractTopoPrimitive _AbstractTopoPrimitive;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TopoPrimitiveMemberType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTopoPrimitive), ElementName = "AbstractTopoPrimitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTopoPrimitive AbstractTopoPrimitive
        {
            get { return _AbstractTopoPrimitive; }
            set { _AbstractTopoPrimitive = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractTopoPrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoPrimitiveArrayAssociationType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (NodeType))]
    [XmlInclude(typeof (TopoSolidType))]
    [XmlInclude(typeof (EdgeType))]
    [XmlInclude(typeof (FaceType))]
    public class TopoPrimitiveArrayAssociationType
    {
        [XmlIgnore] private List<AbstractTopoPrimitive> _AbstractTopoPrimitive;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public TopoPrimitiveArrayAssociationType()
        {
            owns = false;
        }

        [XmlIgnore]
        public AbstractTopoPrimitive this[int index]
        {
            get { return AbstractTopoPrimitive[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractTopoPrimitive.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTopoPrimitive), ElementName = "AbstractTopoPrimitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractTopoPrimitive> AbstractTopoPrimitive
        {
            get
            {
                if (_AbstractTopoPrimitive == null) _AbstractTopoPrimitive = new List<AbstractTopoPrimitive>();
                return _AbstractTopoPrimitive;
            }
            set { _AbstractTopoPrimitive = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractTopoPrimitive.GetEnumerator();
        }

        public void Add(AbstractTopoPrimitive obj)
        {
            AbstractTopoPrimitive.Add(obj);
        }

        public void Clear()
        {
            AbstractTopoPrimitive.Clear();
        }

        public AbstractTopoPrimitive Remove(int index)
        {
            AbstractTopoPrimitive obj = AbstractTopoPrimitive[index];
            AbstractTopoPrimitive.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractTopoPrimitive obj)
        {
            return AbstractTopoPrimitive.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractTopoPrimitive _c in AbstractTopoPrimitive) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TopoComplexPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TopoComplexPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private TopoComplex _TopoComplex;
        [XmlIgnore] private string _type;

        public TopoComplexPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TopoComplex), ElementName = "TopoComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TopoComplex TopoComplex
        {
            get
            {
                if (_TopoComplex == null) _TopoComplex = new TopoComplex();
                return _TopoComplex;
            }
            set { _TopoComplex = value; }
        }

        public void MakeSchemaCompliant()
        {
            TopoComplex.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ValuePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeComplexType))]
    [XmlInclude(typeof (AbstractTimePrimitiveType))]
    public class ValuePropertyType
    {
        [XmlIgnore] private AbstractGeometry _AbstractGeometry;
        [XmlIgnore] private AbstractTimeObject _AbstractTimeObject;
        [XmlIgnore] private object _AbstractValue;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _Null;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public ValuePropertyType()
        {
            type = "simple";
            owns = false;
            @Null = string.Empty;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(ElementName = "AbstractValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public object AbstractValue
        {
            get { return _AbstractValue; }
            set { _AbstractValue = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _AbstractGeometry; }
            set { _AbstractGeometry = value; }
        }

        [XmlElement(Type = typeof (AbstractTimeObject), ElementName = "AbstractTimeObject", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimeObject AbstractTimeObject
        {
            get { return _AbstractTimeObject; }
            set { _AbstractTimeObject = value; }
        }

        [XmlElement(ElementName = "Null", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public string @Null
        {
            get { return _Null; }
            set { _Null = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
            AbstractTimeObject.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ValueArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeComplexType))]
    [XmlInclude(typeof (AbstractTimePrimitiveType))]
    public class ValueArrayPropertyType
    {
        [XmlIgnore] private AbstractGeometry _AbstractGeometry;
        [XmlIgnore] private AbstractTimeObject _AbstractTimeObject;
        [XmlIgnore] private object _AbstractValue;
        [XmlIgnore] private string _Null;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public ValueArrayPropertyType()
        {
            owns = false;
            @Null = string.Empty;
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(ElementName = "AbstractValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public object AbstractValue
        {
            get { return _AbstractValue; }
            set { _AbstractValue = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _AbstractGeometry; }
            set { _AbstractGeometry = value; }
        }

        [XmlElement(Type = typeof (AbstractTimeObject), ElementName = "AbstractTimeObject", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimeObject AbstractTimeObject
        {
            get { return _AbstractTimeObject; }
            set { _AbstractTimeObject = value; }
        }

        [XmlElement(ElementName = "Null", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public string @Null
        {
            get { return _Null; }
            set { _Null = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
            AbstractTimeObject.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompositeValueType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompositeValueType : AbstractGMLType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;

        [XmlIgnore] private List<valueComponent> _valueComponent;

        [XmlIgnore] private valueComponents _valueComponents;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (valueComponent), ElementName = "valueComponent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<valueComponent> valueComponent
        {
            get
            {
                if (_valueComponent == null) _valueComponent = new List<valueComponent>();
                return _valueComponent;
            }
            set { _valueComponent = value; }
        }

        [XmlElement(Type = typeof (valueComponents), ElementName = "valueComponents", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public valueComponents valueComponents
        {
            get
            {
                if (_valueComponents == null) _valueComponents = new valueComponents();
                return _valueComponents;
            }
            set { _valueComponents = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ValueArrayType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ValueArrayType : CompositeValueType
    {
        [XmlIgnore] private string _codeSpace;

        [XmlIgnore] private string _uom;

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public string codeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlAttribute(AttributeName = "uom")]
        public string uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CategoryExtentType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CategoryExtentType
    {
        [XmlIgnore] private CategoryExtentTypeEnum _Value;

        [XmlIgnore] public bool _ValueSpecified;

        [XmlText(typeof (CategoryExtentTypeEnum))]
        public CategoryExtentTypeEnum Value
        {
            get { return _Value; }
            set
            {
                _Value = value;
                _ValueSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }

    public enum CategoryExtentTypeEnum
    {
    }


    [XmlType(TypeName = "QuantityExtentType", Namespace = Declarations.SchemaVersion), Serializable]
    public class QuantityExtentType
    {
        [XmlIgnore] private QuantityExtentTypeEnum _Value;

        [XmlIgnore] public bool _ValueSpecified;

        [XmlText(typeof (QuantityExtentTypeEnum))]
        public QuantityExtentTypeEnum Value
        {
            get { return _Value; }
            set
            {
                _Value = value;
                _ValueSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }

    public enum QuantityExtentTypeEnum
    {
    }


    [XmlType(TypeName = "BooleanPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BooleanPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Boolean _Boolean;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public BooleanPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Boolean), ElementName = "Boolean", IsNullable = true, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Boolean Boolean
        {
            get
            {
                if (_Boolean == null) _Boolean = new Boolean();
                return _Boolean;
            }
            set { _Boolean = value; }
        }

        public void MakeSchemaCompliant()
        {
            Boolean.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CategoryPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CategoryPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Category _Category;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CategoryPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Category), ElementName = "Category", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Category Category
        {
            get
            {
                if (_Category == null) _Category = new Category();
                return _Category;
            }
            set { _Category = value; }
        }

        public void MakeSchemaCompliant()
        {
            Category.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "QuantityPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class QuantityPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private Quantity _Quantity;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public QuantityPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Quantity), ElementName = "Quantity", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Quantity Quantity
        {
            get
            {
                if (_Quantity == null) _Quantity = new Quantity();
                return _Quantity;
            }
            set { _Quantity = value; }
        }

        public void MakeSchemaCompliant()
        {
            Quantity.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CountPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CountPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Count _Count;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CountPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Count), ElementName = "Count", IsNullable = true, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Count Count
        {
            get
            {
                if (_Count == null) _Count = new Count();
                return _Count;
            }
            set { _Count = value; }
        }

        public void MakeSchemaCompliant()
        {
            Count.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridType : AbstractGeometryType
    {
        [XmlIgnore] private string _axisLabels;
        [XmlIgnore] private List<string> _axisName;
        [XmlIgnore] private string _dimension;

        [XmlIgnore] private GridLimitsType _limits;

        public GridType()
        {
            dimension = string.Empty;
        }

        [XmlAttribute(AttributeName = "dimension", DataType = "positiveInteger")]
        public string dimension
        {
            get { return _dimension; }
            set { _dimension = value; }
        }

        [XmlElement(Type = typeof (GridLimitsType), ElementName = "limits", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GridLimitsType limits
        {
            get
            {
                if (_limits == null) _limits = new GridLimitsType();
                return _limits;
            }
            set { _limits = value; }
        }

        [XmlElement(ElementName = "axisLabels", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public string axisLabels
        {
            get { return _axisLabels; }
            set { _axisLabels = value; }
        }

        [XmlElement(Type = typeof (string), ElementName = "axisName", IsNullable = false, Form = XmlSchemaForm.Qualified
            , DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<string> axisName
        {
            get
            {
                if (_axisName == null) _axisName = new List<string>();
                return _axisName;
            }
            set { _axisName = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            limits.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridLimitsType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridLimitsType
    {
        [XmlIgnore] private GridEnvelopeType _GridEnvelope;

        [XmlElement(Type = typeof (GridEnvelopeType), ElementName = "GridEnvelope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GridEnvelopeType GridEnvelope
        {
            get
            {
                if (_GridEnvelope == null) _GridEnvelope = new GridEnvelopeType();
                return _GridEnvelope;
            }
            set { _GridEnvelope = value; }
        }

        public void MakeSchemaCompliant()
        {
            GridEnvelope.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridEnvelopeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridEnvelopeType
    {
        [XmlIgnore] private string _high;
        [XmlIgnore] private string _low;

        [XmlElement(ElementName = "low", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public string low
        {
            get { return _low; }
            set { _low = value; }
        }

        [XmlElement(ElementName = "high", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public string high
        {
            get { return _high; }
            set { _high = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "RectifiedGridType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RectifiedGridType : GridType
    {
        [XmlIgnore] private List<VectorType> _offsetVector;
        [XmlIgnore] private DateTime _origin;

        [XmlIgnore] public bool _originSpecified;

        public RectifiedGridType()
        {
            origin = DateTime.Now;
        }


        [XmlElement(ElementName = "origin", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = Declarations.SchemaVersion)]
        public DateTime origin
        {
            get { return _origin; }
            set
            {
                _origin = value;
                _originSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime originUtc
        {
            get { return _origin.ToUniversalTime(); }
            set
            {
                _origin = value.ToLocalTime();
                _originSpecified = true;
            }
        }

        [XmlElement(Type = typeof (VectorType), ElementName = "offsetVector", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<VectorType> offsetVector
        {
            get
            {
                if (_offsetVector == null) _offsetVector = new List<VectorType>();
                return _offsetVector;
            }
            set { _offsetVector = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (VectorType _c in offsetVector) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCoverageType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCoverageType : AbstractFeatureType
    {
        [XmlIgnore] private domainSet _domainSet;

        [XmlIgnore] private rangeSet _rangeSet;

        [XmlElement(Type = typeof (domainSet), ElementName = "domainSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public domainSet domainSet
        {
            get
            {
                if (_domainSet == null) _domainSet = new domainSet();
                return _domainSet;
            }
            set { _domainSet = value; }
        }

        [XmlElement(Type = typeof (rangeSet), ElementName = "rangeSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public rangeSet rangeSet
        {
            get
            {
                if (_rangeSet == null) _rangeSet = new rangeSet();
                return _rangeSet;
            }
            set { _rangeSet = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            domainSet.MakeSchemaCompliant();
            rangeSet.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DiscreteCoverageType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DiscreteCoverageType : AbstractCoverageType
    {
        [XmlIgnore] private coverageFunction _coverageFunction;

        [XmlElement(Type = typeof (coverageFunction), ElementName = "coverageFunction", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coverageFunction coverageFunction
        {
            get
            {
                if (_coverageFunction == null) _coverageFunction = new coverageFunction();
                return _coverageFunction;
            }
            set { _coverageFunction = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractContinuousCoverageType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractContinuousCoverageType : AbstractCoverageType
    {
        [XmlIgnore] private coverageFunction _coverageFunction;

        [XmlElement(Type = typeof (coverageFunction), ElementName = "coverageFunction", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coverageFunction coverageFunction
        {
            get
            {
                if (_coverageFunction == null) _coverageFunction = new coverageFunction();
                return _coverageFunction;
            }
            set { _coverageFunction = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DomainSetType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeComplexType))]
    [XmlInclude(typeof (AbstractTimePrimitiveType))]
    public class DomainSetType
    {
        [XmlIgnore] private AbstractGeometry _AbstractGeometry;
        [XmlIgnore] private AbstractTimeObject _AbstractTimeObject;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public DomainSetType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _AbstractGeometry; }
            set { _AbstractGeometry = value; }
        }

        [XmlElement(Type = typeof (AbstractTimeObject), ElementName = "AbstractTimeObject", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimeObject AbstractTimeObject
        {
            get { return _AbstractTimeObject; }
            set { _AbstractTimeObject = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
            AbstractTimeObject.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RangeSetType", Namespace = Declarations.SchemaVersion), Serializable]
    public class RangeSetType
    {
        [XmlIgnore] private List<object> _AbstractScalarValueList;
        [XmlIgnore] private DataBlock _DataBlock;
        [XmlIgnore] private File _File;
        [XmlIgnore] private List<ValueArray> _ValueArray;

        [XmlElement(Type = typeof (ValueArray), ElementName = "ValueArray", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<ValueArray> ValueArray
        {
            get
            {
                if (_ValueArray == null) _ValueArray = new List<ValueArray>();
                return _ValueArray;
            }
            set { _ValueArray = value; }
        }

        [XmlElement(Type = typeof (object), ElementName = "AbstractScalarValueList", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<object> AbstractScalarValueList
        {
            get
            {
                if (_AbstractScalarValueList == null) _AbstractScalarValueList = new List<object>();
                return _AbstractScalarValueList;
            }
            set { _AbstractScalarValueList = value; }
        }

        [XmlElement(Type = typeof (DataBlock), ElementName = "DataBlock", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DataBlock DataBlock
        {
            get
            {
                if (_DataBlock == null) _DataBlock = new DataBlock();
                return _DataBlock;
            }
            set { _DataBlock = value; }
        }

        [XmlElement(Type = typeof (File), ElementName = "File", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public File File
        {
            get
            {
                if (_File == null) _File = new File();
                return _File;
            }
            set { _File = value; }
        }

        public void MakeSchemaCompliant()
        {
            foreach (ValueArray _c in ValueArray) _c.MakeSchemaCompliant();
            DataBlock.MakeSchemaCompliant();
            File.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DataBlockType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DataBlockType
    {
        [XmlIgnore] private string _doubleOrNilReasonTupleList;
        [XmlIgnore] private rangeParameters _rangeParameters;

        [XmlIgnore] private tupleList _tupleList;

        [XmlElement(Type = typeof (rangeParameters), ElementName = "rangeParameters", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public rangeParameters rangeParameters
        {
            get
            {
                if (_rangeParameters == null) _rangeParameters = new rangeParameters();
                return _rangeParameters;
            }
            set { _rangeParameters = value; }
        }

        [XmlElement(Type = typeof (tupleList), ElementName = "tupleList", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public tupleList tupleList
        {
            get
            {
                if (_tupleList == null) _tupleList = new tupleList();
                return _tupleList;
            }
            set { _tupleList = value; }
        }

        [XmlElement(ElementName = "doubleOrNilReasonTupleList", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public string doubleOrNilReasonTupleList
        {
            get { return _doubleOrNilReasonTupleList; }
            set { _doubleOrNilReasonTupleList = value; }
        }

        public void MakeSchemaCompliant()
        {
            rangeParameters.MakeSchemaCompliant();
            tupleList.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FileType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FileType
    {
        [XmlIgnore] private string _compression;
        [XmlIgnore] private string _fileName;
        [XmlIgnore] private string _fileReference;
        [XmlIgnore] private CodeType _fileStructure;
        [XmlIgnore] private string _mimeType;
        [XmlIgnore] private rangeParameters _rangeParameters;

        public FileType()
        {
            fileName = string.Empty;
            fileReference = string.Empty;
        }

        [XmlElement(Type = typeof (rangeParameters), ElementName = "rangeParameters", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public rangeParameters rangeParameters
        {
            get
            {
                if (_rangeParameters == null) _rangeParameters = new rangeParameters();
                return _rangeParameters;
            }
            set { _rangeParameters = value; }
        }

        [XmlElement(ElementName = "fileName", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public string fileName
        {
            get { return _fileName; }
            set { _fileName = value; }
        }

        [XmlElement(ElementName = "fileReference", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "anyURI", Namespace = Declarations.SchemaVersion)]
        public string fileReference
        {
            get { return _fileReference; }
            set { _fileReference = value; }
        }

        [XmlElement(Type = typeof (CodeType), ElementName = "fileStructure", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CodeType fileStructure
        {
            get
            {
                if (_fileStructure == null) _fileStructure = new CodeType();
                return _fileStructure;
            }
            set { _fileStructure = value; }
        }

        [XmlElement(ElementName = "mimeType", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public string mimeType
        {
            get { return _mimeType; }
            set { _mimeType = value; }
        }

        [XmlElement(ElementName = "compression", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI"
            , Namespace = Declarations.SchemaVersion)]
        public string compression
        {
            get { return _compression; }
            set { _compression = value; }
        }

        public void MakeSchemaCompliant()
        {
            rangeParameters.MakeSchemaCompliant();
            fileStructure.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoverageFunctionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CoverageFunctionType
    {
        [XmlIgnore] private CoverageMappingRule _CoverageMappingRule;
        [XmlIgnore] private GridFunction _GridFunction;
        [XmlIgnore] private MappingRule _MappingRule;

        [XmlElement(Type = typeof (MappingRule), ElementName = "MappingRule", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MappingRule MappingRule
        {
            get
            {
                if (_MappingRule == null) _MappingRule = new MappingRule();
                return _MappingRule;
            }
            set { _MappingRule = value; }
        }

        [XmlElement(Type = typeof (CoverageMappingRule), ElementName = "CoverageMappingRule", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoverageMappingRule CoverageMappingRule
        {
            get
            {
                if (_CoverageMappingRule == null) _CoverageMappingRule = new CoverageMappingRule();
                return _CoverageMappingRule;
            }
            set { _CoverageMappingRule = value; }
        }

        [XmlElement(Type = typeof (GridFunction), ElementName = "GridFunction", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GridFunction GridFunction
        {
            get
            {
                if (_GridFunction == null) _GridFunction = new GridFunction();
                return _GridFunction;
            }
            set { _GridFunction = value; }
        }

        public void MakeSchemaCompliant()
        {
            MappingRule.MakeSchemaCompliant();
            CoverageMappingRule.MakeSchemaCompliant();
            GridFunction.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MappingRuleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MappingRuleType
    {
        [XmlIgnore] private string _ruleDefinition;

        [XmlIgnore] private ReferenceType _ruleReference;

        public MappingRuleType()
        {
            ruleDefinition = string.Empty;
        }

        [XmlElement(ElementName = "ruleDefinition", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public string ruleDefinition
        {
            get { return _ruleDefinition; }
            set { _ruleDefinition = value; }
        }

        [XmlElement(Type = typeof (ReferenceType), ElementName = "ruleReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ReferenceType ruleReference
        {
            get
            {
                if (_ruleReference == null) _ruleReference = new ReferenceType();
                return _ruleReference;
            }
            set { _ruleReference = value; }
        }

        public void MakeSchemaCompliant()
        {
            ruleReference.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GridFunctionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GridFunctionType
    {
        [XmlIgnore] private SequenceRuleType _sequenceRule;

        [XmlIgnore] private string _startPoint;

        [XmlElement(Type = typeof (SequenceRuleType), ElementName = "sequenceRule", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SequenceRuleType sequenceRule
        {
            get
            {
                if (_sequenceRule == null) _sequenceRule = new SequenceRuleType();
                return _sequenceRule;
            }
            set { _sequenceRule = value; }
        }

        [XmlElement(ElementName = "startPoint", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public string startPoint
        {
            get { return _startPoint; }
            set { _startPoint = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "SequenceRuleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SequenceRuleType
    {
        [XmlIgnore] private string _axisOrder;
        [XmlIgnore] private IncrementOrder _order;

        [XmlIgnore] public bool _orderSpecified;
        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "order")]
        public IncrementOrder order
        {
            get { return _order; }
            set
            {
                _order = value;
                _orderSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "axisOrder")]
        public string axisOrder
        {
            get { return _axisOrder; }
            set { _axisOrder = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "ObservationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ObservationType : AbstractFeatureType
    {
        [XmlIgnore] private resultOf _resultOf;
        [XmlIgnore] private target _target;
        [XmlIgnore] private @using _using;
        [XmlIgnore] private validTime _validTime;

        [XmlElement(Type = typeof (validTime), ElementName = "validTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public validTime validTime
        {
            get
            {
                if (_validTime == null) _validTime = new validTime();
                return _validTime;
            }
            set { _validTime = value; }
        }

        [XmlElement(Type = typeof (@using), ElementName = "using", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public @using @using
        {
            get
            {
                if (_using == null) _using = new @using();
                return _using;
            }
            set { _using = value; }
        }

        [XmlElement(Type = typeof (target), ElementName = "target", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public target target
        {
            get
            {
                if (_target == null) _target = new target();
                return _target;
            }
            set { _target = value; }
        }

        [XmlElement(Type = typeof (resultOf), ElementName = "resultOf", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public resultOf resultOf
        {
            get
            {
                if (_resultOf == null) _resultOf = new resultOf();
                return _resultOf;
            }
            set { _resultOf = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            validTime.MakeSchemaCompliant();
            resultOf.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ProcedurePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (DynamicFeatureType))]
    [XmlInclude(typeof (ObservationType))]
    [XmlInclude(typeof (AbstractCoverageType))]
    [XmlInclude(typeof (AbstractFeatureCollectionType))]
    [XmlInclude(typeof (BoundedFeatureType))]
    public class ProcedurePropertyType
    {
        [XmlIgnore] private AbstractFeature _AbstractFeature;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public ProcedurePropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractFeature), ElementName = "AbstractFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractFeature AbstractFeature
        {
            get { return _AbstractFeature; }
            set { _AbstractFeature = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractFeature.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TargetPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (DynamicFeatureType))]
    [XmlInclude(typeof (ObservationType))]
    [XmlInclude(typeof (AbstractCoverageType))]
    [XmlInclude(typeof (AbstractFeatureCollectionType))]
    [XmlInclude(typeof (BoundedFeatureType))]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class TargetPropertyType
    {
        [XmlIgnore] private AbstractFeature _AbstractFeature;
        [XmlIgnore] private AbstractGeometry _AbstractGeometry;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public TargetPropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractFeature), ElementName = "AbstractFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractFeature AbstractFeature
        {
            get { return _AbstractFeature; }
            set { _AbstractFeature = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _AbstractGeometry; }
            set { _AbstractGeometry = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractFeature.MakeSchemaCompliant();
            AbstractGeometry.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ResultType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ResultType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;
        [XmlAnyElement] public XmlElement Any;

        public ResultType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "DirectedObservationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedObservationType : ObservationType
    {
        [XmlIgnore] private direction _direction;

        [XmlElement(Type = typeof (direction), ElementName = "direction", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public direction direction
        {
            get
            {
                if (_direction == null) _direction = new direction();
                return _direction;
            }
            set { _direction = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            direction.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DirectedObservationAtDistanceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DirectedObservationAtDistanceType : DirectedObservationType
    {
        [XmlIgnore] private MeasureType _distance;

        [XmlElement(Type = typeof (MeasureType), ElementName = "distance", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType distance
        {
            get
            {
                if (_distance == null) _distance = new MeasureType();
                return _distance;
            }
            set { _distance = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            distance.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractTimeTopologyPrimitiveType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractTimeTopologyPrimitiveType : AbstractTimePrimitiveType
    {
        [XmlIgnore] private ReferenceType _complex;

        [XmlElement(Type = typeof (ReferenceType), ElementName = "complex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ReferenceType complex
        {
            get
            {
                if (_complex == null) _complex = new ReferenceType();
                return _complex;
            }
            set { _complex = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeTopologyPrimitivePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (TimeNodeType))]
    [XmlInclude(typeof (TimeEdgeType))]
    public class TimeTopologyPrimitivePropertyType
    {
        [XmlIgnore] private AbstractTimeTopologyPrimitive _AbstractTimeTopologyPrimitive;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TimeTopologyPrimitivePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (AbstractTimeTopologyPrimitive), ElementName = "AbstractTimeTopologyPrimitive",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimeTopologyPrimitive AbstractTimeTopologyPrimitive
        {
            get { return _AbstractTimeTopologyPrimitive; }
            set { _AbstractTimeTopologyPrimitive = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractTimeTopologyPrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeTopologyComplexType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class TimeTopologyComplexType : AbstractTimeComplexType
    {
        [XmlIgnore] private List<TimeTopologyPrimitivePropertyType> _primitive;

        [XmlIgnore]
        public TimeTopologyPrimitivePropertyType this[int index]
        {
            get { return primitive[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return primitive.Count; }
        }

        [XmlElement(Type = typeof (TimeTopologyPrimitivePropertyType), ElementName = "primitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeTopologyPrimitivePropertyType> primitive
        {
            get
            {
                if (_primitive == null) _primitive = new List<TimeTopologyPrimitivePropertyType>();
                return _primitive;
            }
            set { _primitive = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return primitive.GetEnumerator();
        }

        public void Add(TimeTopologyPrimitivePropertyType obj)
        {
            primitive.Add(obj);
        }

        public void Clear()
        {
            primitive.Clear();
        }

        public TimeTopologyPrimitivePropertyType Remove(int index)
        {
            TimeTopologyPrimitivePropertyType obj = primitive[index];
            primitive.Remove(obj);
            return obj;
        }

        public bool Remove(TimeTopologyPrimitivePropertyType obj)
        {
            return primitive.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (TimeTopologyPrimitivePropertyType _c in primitive) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeTopologyComplexPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeTopologyComplexPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeTopologyComplex _TimeTopologyComplex;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TimeTopologyComplexPropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeTopologyComplex), ElementName = "TimeTopologyComplex", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeTopologyComplex TimeTopologyComplex
        {
            get { return _TimeTopologyComplex; }
            set { _TimeTopologyComplex = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeTopologyComplex.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeNodeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeNodeType : AbstractTimeTopologyPrimitiveType
    {
        [XmlIgnore] private List<TimeEdgePropertyType> _nextEdge;
        [XmlIgnore] private position _position;
        [XmlIgnore] private List<TimeEdgePropertyType> _previousEdge;

        [XmlElement(Type = typeof (TimeEdgePropertyType), ElementName = "previousEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeEdgePropertyType> previousEdge
        {
            get
            {
                if (_previousEdge == null) _previousEdge = new List<TimeEdgePropertyType>();
                return _previousEdge;
            }
            set { _previousEdge = value; }
        }

        [XmlElement(Type = typeof (TimeEdgePropertyType), ElementName = "nextEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeEdgePropertyType> nextEdge
        {
            get
            {
                if (_nextEdge == null) _nextEdge = new List<TimeEdgePropertyType>();
                return _nextEdge;
            }
            set { _nextEdge = value; }
        }

        [XmlElement(Type = typeof (position), ElementName = "position", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public position position
        {
            get
            {
                if (_position == null) _position = new position();
                return _position;
            }
            set { _position = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeNodePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeNodePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeNode _TimeNode;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TimeNodePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeNode), ElementName = "TimeNode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNode TimeNode
        {
            get
            {
                if (_TimeNode == null) _TimeNode = new TimeNode();
                return _TimeNode;
            }
            set { _TimeNode = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeNode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeEdgeType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeEdgeType : AbstractTimeTopologyPrimitiveType
    {
        [XmlIgnore] private TimeNodePropertyType _end;
        [XmlIgnore] private TimePeriodPropertyType _extent;
        [XmlIgnore] private TimeNodePropertyType _start;

        [XmlElement(Type = typeof (TimeNodePropertyType), ElementName = "start", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNodePropertyType start
        {
            get
            {
                if (_start == null) _start = new TimeNodePropertyType();
                return _start;
            }
            set { _start = value; }
        }

        [XmlElement(Type = typeof (TimeNodePropertyType), ElementName = "end", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNodePropertyType end
        {
            get
            {
                if (_end == null) _end = new TimeNodePropertyType();
                return _end;
            }
            set { _end = value; }
        }

        [XmlElement(Type = typeof (TimePeriodPropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePeriodPropertyType extent
        {
            get
            {
                if (_extent == null) _extent = new TimePeriodPropertyType();
                return _extent;
            }
            set { _extent = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            start.MakeSchemaCompliant();
            end.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeEdgePropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeEdgePropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeEdge _TimeEdge;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TimeEdgePropertyType()
        {
            type = "simple";
            owns = false;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeEdge), ElementName = "TimeEdge", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeEdge TimeEdge
        {
            get
            {
                if (_TimeEdge == null) _TimeEdge = new TimeEdge();
                return _TimeEdge;
            }
            set { _TimeEdge = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeEdge.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeReferenceSystemType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeReferenceSystemType : DefinitionType
    {
        [XmlIgnore] private domainOfValidity _domainOfValidity;

        [XmlElement(Type = typeof (domainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public domainOfValidity domainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new domainOfValidity();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            domainOfValidity.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCoordinateSystemType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCoordinateSystemType : TimeReferenceSystemType
    {
        [XmlIgnore] private TimeIntervalLengthType _interval;
        [XmlIgnore] private DateTime _origin;
        [XmlIgnore] private TimePositionType _originPosition;

        [XmlIgnore] public bool _originSpecified;

        public TimeCoordinateSystemType()
        {
            origin = DateTime.Now;
        }

        [XmlElement(Type = typeof (TimePositionType), ElementName = "originPosition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePositionType originPosition
        {
            get
            {
                if (_originPosition == null) _originPosition = new TimePositionType();
                return _originPosition;
            }
            set { _originPosition = value; }
        }


        [XmlElement(ElementName = "origin", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = Declarations.SchemaVersion)]
        public DateTime origin
        {
            get { return _origin; }
            set
            {
                _origin = value;
                _originSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime originUtc
        {
            get { return _origin.ToUniversalTime(); }
            set
            {
                _origin = value.ToLocalTime();
                _originSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeIntervalLengthType), ElementName = "interval", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeIntervalLengthType interval
        {
            get
            {
                if (_interval == null) _interval = new TimeIntervalLengthType();
                return _interval;
            }
            set { _interval = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            originPosition.MakeSchemaCompliant();
            interval.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCalendarType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCalendarType : TimeReferenceSystemType
    {
        [XmlIgnore] private List<TimeCalendarEraPropertyType> _referenceFrame;

        [XmlIgnore]
        public TimeCalendarEraPropertyType this[int index]
        {
            get { return referenceFrame[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return referenceFrame.Count; }
        }

        [XmlElement(Type = typeof (TimeCalendarEraPropertyType), ElementName = "referenceFrame", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeCalendarEraPropertyType> referenceFrame
        {
            get
            {
                if (_referenceFrame == null) _referenceFrame = new List<TimeCalendarEraPropertyType>();
                return _referenceFrame;
            }
            set { _referenceFrame = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return referenceFrame.GetEnumerator();
        }

        public void Add(TimeCalendarEraPropertyType obj)
        {
            referenceFrame.Add(obj);
        }

        public void Clear()
        {
            referenceFrame.Clear();
        }

        public TimeCalendarEraPropertyType Remove(int index)
        {
            TimeCalendarEraPropertyType obj = referenceFrame[index];
            referenceFrame.Remove(obj);
            return obj;
        }

        public bool Remove(TimeCalendarEraPropertyType obj)
        {
            return referenceFrame.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (TimeCalendarEraPropertyType _c in referenceFrame) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCalendarEraType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCalendarEraType : DefinitionType
    {
        [XmlIgnore] private TimePeriodPropertyType _epochOfUse;
        [XmlIgnore] private decimal _julianReference;

        [XmlIgnore] public bool _julianReferenceSpecified;
        [XmlIgnore] private DateTime _referenceDate;

        [XmlIgnore] public bool _referenceDateSpecified;
        [XmlIgnore] private StringOrRefType _referenceEvent;

        public TimeCalendarEraType()
        {
            referenceDate = DateTime.Now;
            _julianReferenceSpecified = true;
        }

        [XmlElement(Type = typeof (StringOrRefType), ElementName = "referenceEvent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public StringOrRefType referenceEvent
        {
            get
            {
                if (_referenceEvent == null) _referenceEvent = new StringOrRefType();
                return _referenceEvent;
            }
            set { _referenceEvent = value; }
        }


        [XmlElement(ElementName = "referenceDate", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "date"
            , Namespace = Declarations.SchemaVersion)]
        public DateTime referenceDate
        {
            get { return _referenceDate; }
            set
            {
                _referenceDate = value;
                _referenceDateSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime referenceDateUtc
        {
            get { return _referenceDate.ToUniversalTime(); }
            set
            {
                _referenceDate = value.ToLocalTime();
                _referenceDateSpecified = true;
            }
        }


        [XmlElement(ElementName = "julianReference", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "decimal", Namespace = Declarations.SchemaVersion)]
        public decimal julianReference
        {
            get { return _julianReference; }
            set
            {
                _julianReference = value;
                _julianReferenceSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimePeriodPropertyType), ElementName = "epochOfUse", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePeriodPropertyType epochOfUse
        {
            get
            {
                if (_epochOfUse == null) _epochOfUse = new TimePeriodPropertyType();
                return _epochOfUse;
            }
            set { _epochOfUse = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            referenceEvent.MakeSchemaCompliant();
            epochOfUse.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCalendarPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCalendarPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeCalendar _TimeCalendar;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public TimeCalendarPropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeCalendar), ElementName = "TimeCalendar", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeCalendar TimeCalendar
        {
            get
            {
                if (_TimeCalendar == null) _TimeCalendar = new TimeCalendar();
                return _TimeCalendar;
            }
            set { _TimeCalendar = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeCalendar.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCalendarEraPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCalendarEraPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeCalendarEra _TimeCalendarEra;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public TimeCalendarEraPropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeCalendarEra), ElementName = "TimeCalendarEra", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeCalendarEra TimeCalendarEra
        {
            get
            {
                if (_TimeCalendarEra == null) _TimeCalendarEra = new TimeCalendarEra();
                return _TimeCalendarEra;
            }
            set { _TimeCalendarEra = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeCalendarEra.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeClockType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeClockType : TimeReferenceSystemType
    {
        [XmlIgnore] private List<TimeCalendarPropertyType> _dateBasis;
        [XmlIgnore] private StringOrRefType _referenceEvent;

        [XmlIgnore] private DateTime _referenceTime;

        [XmlIgnore] public bool _referenceTimeSpecified;


        [XmlIgnore] private DateTime _utcReference;

        [XmlIgnore] public bool _utcReferenceSpecified;

        public TimeClockType()
        {
            referenceTime = DateTime.Now;
            utcReference = DateTime.Now;
        }

        [XmlElement(Type = typeof (StringOrRefType), ElementName = "referenceEvent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public StringOrRefType referenceEvent
        {
            get
            {
                if (_referenceEvent == null) _referenceEvent = new StringOrRefType();
                return _referenceEvent;
            }
            set { _referenceEvent = value; }
        }

        [XmlElement(ElementName = "referenceTime", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "time"
            , Namespace = Declarations.SchemaVersion)]
        public DateTime referenceTime
        {
            get { return _referenceTime; }
            set
            {
                _referenceTime = value;
                _referenceTimeSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime referenceTimeUtc
        {
            get { return _referenceTime.ToUniversalTime(); }
            set
            {
                _referenceTime = value.ToLocalTime();
                _referenceTimeSpecified = true;
            }
        }


        [XmlElement(ElementName = "utcReference", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "time",
            Namespace = Declarations.SchemaVersion)]
        public DateTime utcReference
        {
            get { return _utcReference; }
            set
            {
                _utcReference = value;
                _utcReferenceSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime utcReferenceUtc
        {
            get { return _utcReference.ToUniversalTime(); }
            set
            {
                _utcReference = value.ToLocalTime();
                _utcReferenceSpecified = true;
            }
        }

        [XmlElement(Type = typeof (TimeCalendarPropertyType), ElementName = "dateBasis", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeCalendarPropertyType> dateBasis
        {
            get
            {
                if (_dateBasis == null) _dateBasis = new List<TimeCalendarPropertyType>();
                return _dateBasis;
            }
            set { _dateBasis = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            referenceEvent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeClockPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeClockPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeClock _TimeClock;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public TimeClockPropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeClock), ElementName = "TimeClock", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeClock TimeClock
        {
            get
            {
                if (_TimeClock == null) _TimeClock = new TimeClock();
                return _TimeClock;
            }
            set { _TimeClock = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeClock.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeOrdinalReferenceSystemType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeOrdinalReferenceSystemType : TimeReferenceSystemType
    {
        [XmlIgnore] private List<TimeOrdinalEraPropertyType> _component;

        [XmlIgnore]
        public TimeOrdinalEraPropertyType this[int index]
        {
            get { return component[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return component.Count; }
        }

        [XmlElement(Type = typeof (TimeOrdinalEraPropertyType), ElementName = "component", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<TimeOrdinalEraPropertyType> component
        {
            get
            {
                if (_component == null) _component = new List<TimeOrdinalEraPropertyType>();
                return _component;
            }
            set { _component = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return component.GetEnumerator();
        }

        public void Add(TimeOrdinalEraPropertyType obj)
        {
            component.Add(obj);
        }

        public void Clear()
        {
            component.Clear();
        }

        public TimeOrdinalEraPropertyType Remove(int index)
        {
            TimeOrdinalEraPropertyType obj = component[index];
            component.Remove(obj);
            return obj;
        }

        public bool Remove(TimeOrdinalEraPropertyType obj)
        {
            return component.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (TimeOrdinalEraPropertyType _c in component) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeOrdinalEraType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeOrdinalEraType : DefinitionType
    {
        [XmlIgnore] private TimeNodePropertyType _end;
        [XmlIgnore] private TimePeriodPropertyType _extent;
        [XmlIgnore] private group _group;
        [XmlIgnore] private List<member> _member;
        [XmlIgnore] private List<RelatedTimeType> _relatedTime;

        [XmlIgnore] private TimeNodePropertyType _start;

        [XmlElement(Type = typeof (RelatedTimeType), ElementName = "relatedTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<RelatedTimeType> relatedTime
        {
            get
            {
                if (_relatedTime == null) _relatedTime = new List<RelatedTimeType>();
                return _relatedTime;
            }
            set { _relatedTime = value; }
        }

        [XmlElement(Type = typeof (TimeNodePropertyType), ElementName = "start", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNodePropertyType start
        {
            get
            {
                if (_start == null) _start = new TimeNodePropertyType();
                return _start;
            }
            set { _start = value; }
        }

        [XmlElement(Type = typeof (TimeNodePropertyType), ElementName = "end", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeNodePropertyType end
        {
            get
            {
                if (_end == null) _end = new TimeNodePropertyType();
                return _end;
            }
            set { _end = value; }
        }

        [XmlElement(Type = typeof (TimePeriodPropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimePeriodPropertyType extent
        {
            get
            {
                if (_extent == null) _extent = new TimePeriodPropertyType();
                return _extent;
            }
            set { _extent = value; }
        }

        [XmlElement(Type = typeof (member), ElementName = "member", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<member> member
        {
            get
            {
                if (_member == null) _member = new List<member>();
                return _member;
            }
            set { _member = value; }
        }

        [XmlElement(Type = typeof (group), ElementName = "group", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public group group
        {
            get
            {
                if (_group == null) _group = new group();
                return _group;
            }
            set { _group = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeOrdinalEraPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeOrdinalEraPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeOrdinalEra _TimeOrdinalEra;
        [XmlIgnore] private string _title;

        [XmlIgnore] private string _type;

        public TimeOrdinalEraPropertyType()
        {
            owns = false;
            type = "simple";
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeOrdinalEra), ElementName = "TimeOrdinalEra", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TimeOrdinalEra TimeOrdinalEra
        {
            get
            {
                if (_TimeOrdinalEra == null) _TimeOrdinalEra = new TimeOrdinalEra();
                return _TimeOrdinalEra;
            }
            set { _TimeOrdinalEra = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeOrdinalEra.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractGeneralTransformationType))]
    [XmlInclude(typeof (PassThroughOperationType))]
    [XmlInclude(typeof (ConcatenatedOperationType))]
    [XmlInclude(typeof (AbstractGeneralConversionType))]
    public class OperationPropertyType
    {
        [XmlIgnore] private AbstractOperation _AbstractOperation;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public OperationPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractOperation), ElementName = "AbstractOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractOperation AbstractOperation
        {
            get { return _AbstractOperation; }
            set { _AbstractOperation = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TemporalCS _TemporalCS;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TemporalCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TemporalCS), ElementName = "TemporalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TemporalCS TemporalCS
        {
            get
            {
                if (_TemporalCS == null) _TemporalCS = new TemporalCS();
                return _TemporalCS;
            }
            set { _TemporalCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            TemporalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ObliqueCartesianCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ObliqueCartesianCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ObliqueCartesianCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ObliqueCartesianCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private ObliqueCartesianCS _ObliqueCartesianCS;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public ObliqueCartesianCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ObliqueCartesianCS), ElementName = "ObliqueCartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ObliqueCartesianCS ObliqueCartesianCS
        {
            get
            {
                if (_ObliqueCartesianCS == null) _ObliqueCartesianCS = new ObliqueCartesianCS();
                return _ObliqueCartesianCS;
            }
            set { _ObliqueCartesianCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            ObliqueCartesianCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeographicCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeographicCRSType : AbstractCRSType
    {
        [XmlIgnore] private usesEllipsoidalCS _usesEllipsoidalCS;

        [XmlIgnore] private usesGeodeticDatum _usesGeodeticDatum;

        [XmlElement(Type = typeof (usesEllipsoidalCS), ElementName = "usesEllipsoidalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public usesEllipsoidalCS usesEllipsoidalCS
        {
            get
            {
                if (_usesEllipsoidalCS == null) _usesEllipsoidalCS = new usesEllipsoidalCS();
                return _usesEllipsoidalCS;
            }
            set { _usesEllipsoidalCS = value; }
        }

        [XmlElement(Type = typeof (usesGeodeticDatum), ElementName = "usesGeodeticDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public usesGeodeticDatum usesGeodeticDatum
        {
            get
            {
                if (_usesGeodeticDatum == null) _usesGeodeticDatum = new usesGeodeticDatum();
                return _usesGeodeticDatum;
            }
            set { _usesGeodeticDatum = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            usesEllipsoidalCS.MakeSchemaCompliant();
            usesGeodeticDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeographicCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeographicCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private GeographicCRS _GeographicCRS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public GeographicCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeographicCRS), ElementName = "GeographicCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeographicCRS GeographicCRS
        {
            get
            {
                if (_GeographicCRS == null) _GeographicCRS = new GeographicCRS();
                return _GeographicCRS;
            }
            set { _GeographicCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            GeographicCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeocentricCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeocentricCRSType : AbstractCRSType
    {
        [XmlIgnore] private usesCartesianCS _usesCartesianCS;
        [XmlIgnore] private usesGeodeticDatum _usesGeodeticDatum;

        [XmlIgnore] private usesSphericalCS _usesSphericalCS;

        [XmlElement(Type = typeof (usesCartesianCS), ElementName = "usesCartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public usesCartesianCS usesCartesianCS
        {
            get
            {
                if (_usesCartesianCS == null) _usesCartesianCS = new usesCartesianCS();
                return _usesCartesianCS;
            }
            set { _usesCartesianCS = value; }
        }

        [XmlElement(Type = typeof (usesSphericalCS), ElementName = "usesSphericalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public usesSphericalCS usesSphericalCS
        {
            get
            {
                if (_usesSphericalCS == null) _usesSphericalCS = new usesSphericalCS();
                return _usesSphericalCS;
            }
            set { _usesSphericalCS = value; }
        }

        [XmlElement(Type = typeof (usesGeodeticDatum), ElementName = "usesGeodeticDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public usesGeodeticDatum usesGeodeticDatum
        {
            get
            {
                if (_usesGeodeticDatum == null) _usesGeodeticDatum = new usesGeodeticDatum();
                return _usesGeodeticDatum;
            }
            set { _usesGeodeticDatum = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            usesCartesianCS.MakeSchemaCompliant();
            usesSphericalCS.MakeSchemaCompliant();
            usesGeodeticDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeocentricCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeocentricCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private GeocentricCRS _GeocentricCRS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public GeocentricCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeocentricCRS), ElementName = "GeocentricCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeocentricCRS GeocentricCRS
        {
            get
            {
                if (_GeocentricCRS == null) _GeocentricCRS = new GeocentricCRS();
                return _GeocentricCRS;
            }
            set { _GeocentricCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            GeocentricCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DMSAngleType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DMSAngleType
    {
        [XmlIgnore] private decimal _decimalMinutes;

        [XmlIgnore] public bool _decimalMinutesSpecified;
        [XmlIgnore] private degrees _degrees;


        [XmlIgnore] private string _minutes;

        [XmlIgnore] private decimal _seconds;

        [XmlIgnore] public bool _secondsSpecified;


        public DMSAngleType()
        {
            _decimalMinutesSpecified = true;
            minutes = string.Empty;
        }

        [XmlElement(Type = typeof (degrees), ElementName = "degrees", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public degrees degrees
        {
            get
            {
                if (_degrees == null) _degrees = new degrees();
                return _degrees;
            }
            set { _degrees = value; }
        }

        [XmlElement(ElementName = "decimalMinutes", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "decimal", Namespace = Declarations.SchemaVersion)]
        public decimal decimalMinutes
        {
            get { return _decimalMinutes; }
            set
            {
                _decimalMinutes = value;
                _decimalMinutesSpecified = true;
            }
        }

        [XmlElement(ElementName = "minutes", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public string minutes
        {
            get { return _minutes; }
            set { _minutes = value; }
        }

        [XmlElement(ElementName = "seconds", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "decimal",
            Namespace = Declarations.SchemaVersion)]
        public decimal seconds
        {
            get { return _seconds; }
            set
            {
                _seconds = value;
                _secondsSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
            degrees.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DegreesType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DegreesType
    {
        [XmlIgnore] private direction _direction;

        [XmlIgnore] public bool _directionSpecified;

        [XmlIgnore] private decimal _Value;

        [XmlIgnore] public bool _ValueSpecified;

        [XmlAttribute(AttributeName = "direction")]
        public direction direction
        {
            get { return _direction; }
            set
            {
                _direction = value;
                _directionSpecified = true;
            }
        }

        [XmlText(typeof (Decimal))]
        public decimal Value
        {
            get { return _Value; }
            set
            {
                _Value = value;
                _ValueSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AngleChoiceType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AngleChoiceType
    {
        [XmlIgnore] private angle _angle;

        [XmlIgnore] private dmsAngle _dmsAngle;

        [XmlElement(Type = typeof (angle), ElementName = "angle", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public angle angle
        {
            get
            {
                if (_angle == null) _angle = new angle();
                return _angle;
            }
            set { _angle = value; }
        }

        [XmlElement(Type = typeof (dmsAngle), ElementName = "dmsAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public dmsAngle dmsAngle
        {
            get
            {
                if (_dmsAngle == null) _dmsAngle = new dmsAngle();
                return _dmsAngle;
            }
            set { _dmsAngle = value; }
        }

        public void MakeSchemaCompliant()
        {
            angle.MakeSchemaCompliant();
            dmsAngle.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArrayAssociationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArrayAssociationType
    {
        [XmlIgnore] private List<string> _AbstractObject;
        [XmlIgnore] private bool _owns;

        [XmlIgnore] public bool _ownsSpecified;

        public ArrayAssociationType()
        {
            owns = false;
        }

        [XmlIgnore]
        public string this[int index]
        {
            get { return AbstractObject[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractObject.Count; }
        }

        [XmlAttribute(AttributeName = "owns", DataType = "boolean")]
        public bool owns
        {
            get { return _owns; }
            set
            {
                _owns = value;
                _ownsSpecified = true;
            }
        }

        [XmlElement(Type = typeof (string), ElementName = "AbstractObject", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<string> AbstractObject
        {
            get
            {
                if (_AbstractObject == null) _AbstractObject = new List<string>();
                return _AbstractObject;
            }
            set { _AbstractObject = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractObject.GetEnumerator();
        }

        public void Add(string obj)
        {
            AbstractObject.Add(obj);
        }

        public void Clear()
        {
            AbstractObject.Clear();
        }

        public string Remove(int index)
        {
            string obj = AbstractObject[index];
            AbstractObject.Remove(obj);
            return obj;
        }

        public bool Remove(string obj)
        {
            return AbstractObject.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "StringOrRefType", Namespace = Declarations.SchemaVersion), Serializable]
    public class StringOrRefType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _Value;

        public StringOrRefType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "BagType", Namespace = Declarations.SchemaVersion), Serializable]
    public class BagType : AbstractGMLType
    {
        [XmlIgnore] private List<member> _member;

        [XmlIgnore] private members _members;

        [XmlElement(Type = typeof (member), ElementName = "member", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<member> member
        {
            get
            {
                if (_member == null) _member = new List<member>();
                return _member;
            }
            set { _member = value; }
        }

        [XmlElement(Type = typeof (members), ElementName = "members", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public members members
        {
            get
            {
                if (_members == null) _members = new members();
                return _members;
            }
            set { _members = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ArrayType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ArrayType : AbstractGMLType
    {
        [XmlIgnore] private members _members;

        [XmlElement(Type = typeof (members), ElementName = "members", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public members members
        {
            get
            {
                if (_members == null) _members = new members();
                return _members;
            }
            set { _members = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MetaDataPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GenericMetaDataType))]
    public class MetaDataPropertyType
    {
        [XmlIgnore] private string _about;
        [XmlIgnore] private AbstractMetaData _AbstractMetaData;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public MetaDataPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlAttribute(AttributeName = "about", DataType = "anyURI")]
        public string about
        {
            get { return _about; }
            set { _about = value; }
        }

        [XmlElement(Type = typeof (AbstractMetaData), ElementName = "AbstractMetaData", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractMetaData AbstractMetaData
        {
            get { return _AbstractMetaData; }
            set { _AbstractMetaData = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractMetaData.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractMetaDataType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractMetaDataType
    {
        [XmlIgnore] private string _id;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "GenericMetaDataType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GenericMetaDataType : AbstractMetaDataType
    {
        [XmlIgnore] private string _Value;
        [XmlAnyElement] public XmlElement[] Any;

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LocationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class LocationPropertyType
    {
        [XmlIgnore] private AbstractGeometry _AbstractGeometry;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private LocationKeyWord _LocationKeyWord;
        [XmlIgnore] private LocationString _LocationString;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _Null;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public LocationPropertyType()
        {
            type = "simple";
            @Null = string.Empty;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _AbstractGeometry; }
            set { _AbstractGeometry = value; }
        }

        [XmlElement(Type = typeof (LocationKeyWord), ElementName = "LocationKeyWord", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LocationKeyWord LocationKeyWord
        {
            get
            {
                if (_LocationKeyWord == null) _LocationKeyWord = new LocationKeyWord();
                return _LocationKeyWord;
            }
            set { _LocationKeyWord = value; }
        }

        [XmlElement(Type = typeof (LocationString), ElementName = "LocationString", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LocationString LocationString
        {
            get
            {
                if (_LocationString == null) _LocationString = new LocationString();
                return _LocationString;
            }
            set { _LocationString = value; }
        }

        [XmlElement(ElementName = "Null", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public string @Null
        {
            get { return _Null; }
            set { _Null = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
            LocationKeyWord.MakeSchemaCompliant();
            LocationString.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PriorityLocationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PriorityLocationPropertyType : LocationPropertyType
    {
        [XmlIgnore] private string _priority;

        [XmlAttribute(AttributeName = "priority", DataType = "string")]
        public string priority
        {
            get { return _priority; }
            set { _priority = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FeatureArrayPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (DynamicFeatureType))]
    [XmlInclude(typeof (ObservationType))]
    [XmlInclude(typeof (AbstractCoverageType))]
    [XmlInclude(typeof (AbstractFeatureCollectionType))]
    [XmlInclude(typeof (BoundedFeatureType))]
    public class FeatureArrayPropertyType
    {
        [XmlIgnore] private List<AbstractFeature> _AbstractFeature;

        [XmlIgnore]
        public AbstractFeature this[int index]
        {
            get { return AbstractFeature[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return AbstractFeature.Count; }
        }

        [XmlElement(Type = typeof (AbstractFeature), ElementName = "AbstractFeature", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<AbstractFeature> AbstractFeature
        {
            get
            {
                if (_AbstractFeature == null) _AbstractFeature = new List<AbstractFeature>();
                return _AbstractFeature;
            }
            set { _AbstractFeature = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return AbstractFeature.GetEnumerator();
        }

        public void Add(AbstractFeature obj)
        {
            AbstractFeature.Add(obj);
        }

        public void Clear()
        {
            AbstractFeature.Clear();
        }

        public AbstractFeature Remove(int index)
        {
            AbstractFeature obj = AbstractFeature[index];
            AbstractFeature.Remove(obj);
            return obj;
        }

        public bool Remove(AbstractFeature obj)
        {
            return AbstractFeature.Remove(obj);
        }

        public void MakeSchemaCompliant()
        {
            foreach (AbstractFeature _c in AbstractFeature) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "BoundedFeatureType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class BoundedFeatureType : AbstractFeatureType
    {
        [XmlIgnore] private boundedBy _boundedBy;
        [XmlIgnore] private description _description;
        [XmlIgnore] private descriptionReference _descriptionReference;
        [XmlIgnore] private identifier _identifier;
        [XmlIgnore] private location _location;
        [XmlIgnore] private List<metaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<name> _name;

        [XmlElement(Type = typeof (metaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<metaDataProperty> metaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<metaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public description description
        {
            get
            {
                if (_description == null) _description = new description();
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (descriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public descriptionReference descriptionReference
        {
            get
            {
                if (_descriptionReference == null) _descriptionReference = new descriptionReference();
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public identifier identifier
        {
            get
            {
                if (_identifier == null) _identifier = new identifier();
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<name> name
        {
            get
            {
                if (_name == null) _name = new List<name>();
                return _name;
            }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (boundedBy), ElementName = "boundedBy", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public boundedBy boundedBy
        {
            get
            {
                if (_boundedBy == null) _boundedBy = new boundedBy();
                return _boundedBy;
            }
            set { _boundedBy = value; }
        }

        [XmlElement(Type = typeof (location), ElementName = "location", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public location location
        {
            get
            {
                if (_location == null) _location = new location();
                return _location;
            }
            set { _location = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            boundedBy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractFeatureCollectionType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractFeatureCollectionType : AbstractFeatureType
    {
        [XmlIgnore] private List<featureMember> _featureMember;

        [XmlIgnore] private featureMembers _featureMembers;

        [XmlElement(Type = typeof (featureMember), ElementName = "featureMember", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<featureMember> featureMember
        {
            get
            {
                if (_featureMember == null) _featureMember = new List<featureMember>();
                return _featureMember;
            }
            set { _featureMember = value; }
        }

        [XmlElement(Type = typeof (featureMembers), ElementName = "featureMembers", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public featureMembers featureMembers
        {
            get
            {
                if (_featureMembers == null) _featureMembers = new featureMembers();
                return _featureMembers;
            }
            set { _featureMembers = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "FeatureCollectionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class FeatureCollectionType : AbstractFeatureCollectionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "IndirectEntryType", Namespace = Declarations.SchemaVersion), Serializable]
    public class IndirectEntryType
    {
        [XmlIgnore] private DefinitionProxy _DefinitionProxy;

        [XmlElement(Type = typeof (DefinitionProxy), ElementName = "DefinitionProxy", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DefinitionProxy DefinitionProxy
        {
            get
            {
                if (_DefinitionProxy == null) _DefinitionProxy = new DefinitionProxy();
                return _DefinitionProxy;
            }
            set { _DefinitionProxy = value; }
        }

        public void MakeSchemaCompliant()
        {
            DefinitionProxy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DefinitionProxyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DefinitionProxyType : DefinitionType
    {
        [XmlIgnore] private definitionRef _definitionRef;

        [XmlElement(Type = typeof (definitionRef), ElementName = "definitionRef", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public definitionRef definitionRef
        {
            get
            {
                if (_definitionRef == null) _definitionRef = new definitionRef();
                return _definitionRef;
            }
            set { _definitionRef = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            definitionRef.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MovingObjectStatusType", Namespace = Declarations.SchemaVersion), Serializable]
    public class MovingObjectStatusType : AbstractTimeSliceType
    {
        [XmlIgnore] private MeasureType _acceleration;
        [XmlIgnore] private DirectionPropertyType _bearing;
        [XmlIgnore] private MeasureType _elevation;
        [XmlIgnore] private location _location;
        [XmlIgnore] private locationName _locationName;
        [XmlIgnore] private locationReference _locationReference;
        [XmlIgnore] private pos _pos;
        [XmlIgnore] private position _position;
        [XmlIgnore] private MeasureType _speed;
        [XmlIgnore] private status _status;
        [XmlIgnore] private statusReference _statusReference;

        [XmlElement(Type = typeof (position), ElementName = "position", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public position position
        {
            get
            {
                if (_position == null) _position = new position();
                return _position;
            }
            set { _position = value; }
        }

        [XmlElement(Type = typeof (pos), ElementName = "pos", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public pos pos
        {
            get
            {
                if (_pos == null) _pos = new pos();
                return _pos;
            }
            set { _pos = value; }
        }

        [XmlElement(Type = typeof (locationName), ElementName = "locationName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public locationName locationName
        {
            get
            {
                if (_locationName == null) _locationName = new locationName();
                return _locationName;
            }
            set { _locationName = value; }
        }

        [XmlElement(Type = typeof (locationReference), ElementName = "locationReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public locationReference locationReference
        {
            get
            {
                if (_locationReference == null) _locationReference = new locationReference();
                return _locationReference;
            }
            set { _locationReference = value; }
        }

        [XmlElement(Type = typeof (location), ElementName = "location", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public location location
        {
            get
            {
                if (_location == null) _location = new location();
                return _location;
            }
            set { _location = value; }
        }

        [XmlElement(Type = typeof (MeasureType), ElementName = "speed", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType speed
        {
            get
            {
                if (_speed == null) _speed = new MeasureType();
                return _speed;
            }
            set { _speed = value; }
        }

        [XmlElement(Type = typeof (DirectionPropertyType), ElementName = "bearing", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DirectionPropertyType bearing
        {
            get
            {
                if (_bearing == null) _bearing = new DirectionPropertyType();
                return _bearing;
            }
            set { _bearing = value; }
        }

        [XmlElement(Type = typeof (MeasureType), ElementName = "acceleration", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType acceleration
        {
            get
            {
                if (_acceleration == null) _acceleration = new MeasureType();
                return _acceleration;
            }
            set { _acceleration = value; }
        }

        [XmlElement(Type = typeof (MeasureType), ElementName = "elevation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType elevation
        {
            get
            {
                if (_elevation == null) _elevation = new MeasureType();
                return _elevation;
            }
            set { _elevation = value; }
        }

        [XmlElement(Type = typeof (status), ElementName = "status", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public status status
        {
            get
            {
                if (_status == null) _status = new status();
                return _status;
            }
            set { _status = value; }
        }

        [XmlElement(Type = typeof (statusReference), ElementName = "statusReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public statusReference statusReference
        {
            get
            {
                if (_statusReference == null) _statusReference = new statusReference();
                return _statusReference;
            }
            set { _statusReference = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            position.MakeSchemaCompliant();
            pos.MakeSchemaCompliant();
            locationName.MakeSchemaCompliant();
            locationReference.MakeSchemaCompliant();
            location.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractObject_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public abstract class AbstractObject_Type
    {
        [XmlIgnore] private string _id;

        [XmlIgnore] private string _uuid;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlAttribute(AttributeName = "uuid", DataType = "string")]
        public string uuid
        {
            get { return _uuid; }
            set { _uuid = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "ObjectReference_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class ObjectReference_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public ObjectReference_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CodeListValue_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class CodeListValue_Type
    {
        [XmlIgnore] private string _codeList;

        [XmlIgnore] private string _codeListValue;

        [XmlIgnore] private string _codeSpace;

        [XmlIgnore] private string _Value;

        public CodeListValue_Type()
        {
            codeList = string.Empty;
            codeListValue = string.Empty;
        }

        [XmlAttribute(AttributeName = "codeList", DataType = "anyURI")]
        public string codeList
        {
            get { return _codeList; }
            set { _codeList = value; }
        }

        [XmlAttribute(AttributeName = "codeListValue", DataType = "anyURI")]
        public string codeListValue
        {
            get { return _codeListValue; }
            set { _codeListValue = value; }
        }

        [XmlAttribute(AttributeName = "codeSpace", DataType = "anyURI")]
        public string codeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "TypeName_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class TypeName_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _aName;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "aName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public CharacterString_PropertyType aName
        {
            get { return _aName; }
            set { _aName = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            aName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TypeName_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class TypeName_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private TypeName _TypeName;
        [XmlIgnore] private string _uuidref;

        public TypeName_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (TypeName), ElementName = "TypeName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public TypeName TypeName
        {
            get { return _TypeName; }
            set { _TypeName = value; }
        }

        public void MakeSchemaCompliant()
        {
            TypeName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MemberName_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MemberName_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _aName;

        [XmlIgnore] private TypeName_PropertyType _attributeType;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "aName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public CharacterString_PropertyType aName
        {
            get { return _aName; }
            set { _aName = value; }
        }

        [XmlElement(Type = typeof (TypeName_PropertyType), ElementName = "attributeType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public TypeName_PropertyType attributeType
        {
            get { return _attributeType; }
            set { _attributeType = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            aName.MakeSchemaCompliant();
            attributeType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MemberName_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MemberName_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MemberName _MemberName;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MemberName_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MemberName), ElementName = "MemberName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public MemberName MemberName
        {
            get { return _MemberName; }
            set { _MemberName = value; }
        }

        public void MakeSchemaCompliant()
        {
            MemberName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Multiplicity_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Multiplicity_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<MultiplicityRange_PropertyType> _range;

        [XmlIgnore]
        public MultiplicityRange_PropertyType this[int index]
        {
            get { return range[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return range.Count; }
        }

        [XmlElement(Type = typeof (MultiplicityRange_PropertyType), ElementName = "range", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public List<MultiplicityRange_PropertyType> range
        {
            get
            {
                if (_range == null) _range = new List<MultiplicityRange_PropertyType>();
                return _range;
            }
            set { _range = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return range.GetEnumerator();
        }

        public void Add(MultiplicityRange_PropertyType obj)
        {
            range.Add(obj);
        }

        public void Clear()
        {
            range.Clear();
        }

        public MultiplicityRange_PropertyType Remove(int index)
        {
            MultiplicityRange_PropertyType obj = range[index];
            range.Remove(obj);
            return obj;
        }

        public bool Remove(MultiplicityRange_PropertyType obj)
        {
            return range.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (MultiplicityRange_PropertyType _c in range) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Multiplicity_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Multiplicity_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private Multiplicity _Multiplicity;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public Multiplicity_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Multiplicity), ElementName = "Multiplicity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public Multiplicity Multiplicity
        {
            get { return _Multiplicity; }
            set { _Multiplicity = value; }
        }

        public void MakeSchemaCompliant()
        {
            Multiplicity.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiplicityRange_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MultiplicityRange_Type : AbstractObject_Type
    {
        [XmlIgnore] private Integer_PropertyType _lower;

        [XmlIgnore] private UnlimitedInteger_PropertyType _upper;

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "lower", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public Integer_PropertyType lower
        {
            get { return _lower; }
            set { _lower = value; }
        }

        [XmlElement(Type = typeof (UnlimitedInteger_PropertyType), ElementName = "upper", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public UnlimitedInteger_PropertyType upper
        {
            get { return _upper; }
            set { _upper = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            lower.MakeSchemaCompliant();
            upper.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MultiplicityRange_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class MultiplicityRange_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MultiplicityRange _MultiplicityRange;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MultiplicityRange_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MultiplicityRange), ElementName = "MultiplicityRange", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public MultiplicityRange MultiplicityRange
        {
            get { return _MultiplicityRange; }
            set { _MultiplicityRange = value; }
        }

        public void MakeSchemaCompliant()
        {
            MultiplicityRange.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Measure_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Measure_PropertyType
    {
        [XmlIgnore] private Measure _Measure;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Measure), ElementName = "Measure", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = "http://www.isotc211.org/2005/gco")]
        public Measure Measure
        {
            get { return _Measure; }
            set { _Measure = value; }
        }

        public void MakeSchemaCompliant()
        {
            Measure.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Length_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Length_PropertyType
    {
        [XmlIgnore] private Length _Length;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Length), ElementName = "Length", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Length Length
        {
            get { return _Length; }
            set { _Length = value; }
        }

        public void MakeSchemaCompliant()
        {
            Length.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Angle_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Angle_PropertyType
    {
        [XmlIgnore] private Angle _Angle;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Angle), ElementName = "Angle", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Angle Angle
        {
            get { return _Angle; }
            set { _Angle = value; }
        }

        public void MakeSchemaCompliant()
        {
            Angle.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Scale_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Scale_PropertyType
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private Scale _Scale;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Scale), ElementName = "Scale", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Scale Scale
        {
            get { return _Scale; }
            set { _Scale = value; }
        }

        public void MakeSchemaCompliant()
        {
            Scale.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Distance_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Distance_PropertyType
    {
        [XmlIgnore] private Distance _Distance;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Distance), ElementName = "Distance", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public Distance Distance
        {
            get { return _Distance; }
            set { _Distance = value; }
        }

        public void MakeSchemaCompliant()
        {
            Distance.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CharacterString_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class CharacterString_PropertyType
    {
        [XmlIgnore] private string _CharacterString;
        [XmlIgnore] private string _nilReason;

        public CharacterString_PropertyType()
        {
            CharacterString = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "CharacterString", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = "http://www.isotc211.org/2005/gco")]
        public string CharacterString
        {
            get { return _CharacterString; }
            set { _CharacterString = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Boolean_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Boolean_PropertyType
    {
        [XmlIgnore] private bool _Boolean;

        [XmlIgnore] public bool _BooleanSpecified;
        [XmlIgnore] private string _nilReason;


        public Boolean_PropertyType()
        {
            _BooleanSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Boolean", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "boolean",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public bool Boolean
        {
            get { return _Boolean; }
            set
            {
                _Boolean = value;
                _BooleanSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "GenericName_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class GenericName_PropertyType
    {
        [XmlIgnore] private AbstractGenericName _AbstractGenericName;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractGenericName), ElementName = "AbstractGenericName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public AbstractGenericName AbstractGenericName
        {
            get { return _AbstractGenericName; }
            set { _AbstractGenericName = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGenericName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LocalName_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class LocalName_PropertyType
    {
        [XmlIgnore] private LocalName _LocalName;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LocalName), ElementName = "LocalName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public LocalName LocalName
        {
            get { return _LocalName; }
            set { _LocalName = value; }
        }

        public void MakeSchemaCompliant()
        {
            LocalName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ScopedName_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class ScopedName_PropertyType
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private ScopedName _ScopedName;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (ScopedName), ElementName = "ScopedName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public ScopedName ScopedName
        {
            get { return _ScopedName; }
            set { _ScopedName = value; }
        }

        public void MakeSchemaCompliant()
        {
            ScopedName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomAngle_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomAngle_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UnitDefinition _UnitDefinition;
        [XmlIgnore] private string _uuidref;

        public UomAngle_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                if (_UnitDefinition == null) _UnitDefinition = new UnitDefinition();
                return _UnitDefinition;
            }
            set { _UnitDefinition = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomLength_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomLength_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UnitDefinition _UnitDefinition;
        [XmlIgnore] private string _uuidref;

        public UomLength_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                if (_UnitDefinition == null) _UnitDefinition = new UnitDefinition();
                return _UnitDefinition;
            }
            set { _UnitDefinition = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomScale_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomScale_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UnitDefinition _UnitDefinition;
        [XmlIgnore] private string _uuidref;

        public UomScale_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                if (_UnitDefinition == null) _UnitDefinition = new UnitDefinition();
                return _UnitDefinition;
            }
            set { _UnitDefinition = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UnitOfMeasure_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UnitOfMeasure_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UnitDefinition _UnitDefinition;
        [XmlIgnore] private string _uuidref;

        public UnitOfMeasure_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                if (_UnitDefinition == null) _UnitDefinition = new UnitDefinition();
                return _UnitDefinition;
            }
            set { _UnitDefinition = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomArea_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomArea_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UnitDefinition _UnitDefinition;
        [XmlIgnore] private string _uuidref;

        public UomArea_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                if (_UnitDefinition == null) _UnitDefinition = new UnitDefinition();
                return _UnitDefinition;
            }
            set { _UnitDefinition = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomVelocity_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomVelocity_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UnitDefinition _UnitDefinition;
        [XmlIgnore] private string _uuidref;

        public UomVelocity_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                if (_UnitDefinition == null) _UnitDefinition = new UnitDefinition();
                return _UnitDefinition;
            }
            set { _UnitDefinition = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomTime_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomTime_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UnitDefinition _UnitDefinition;
        [XmlIgnore] private string _uuidref;

        public UomTime_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                if (_UnitDefinition == null) _UnitDefinition = new UnitDefinition();
                return _UnitDefinition;
            }
            set { _UnitDefinition = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UomVolume_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UomVolume_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UnitDefinition _UnitDefinition;
        [XmlIgnore] private string _uuidref;

        public UomVolume_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnitDefinition), ElementName = "UnitDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UnitDefinition UnitDefinition
        {
            get
            {
                if (_UnitDefinition == null) _UnitDefinition = new UnitDefinition();
                return _UnitDefinition;
            }
            set { _UnitDefinition = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnitDefinition.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DateTime_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class DateTime_PropertyType
    {
        [XmlIgnore] private DateTime _DateTime;

        [XmlIgnore] public bool _DateTimeSpecified;
        [XmlIgnore] private string _nilReason;

        public DateTime_PropertyType()
        {
            DateTime = DateTime.Now;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }


        [XmlElement(ElementName = "DateTime", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public DateTime @DateTime
        {
            get { return _DateTime; }
            set
            {
                _DateTime = value;
                _DateTimeSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime @DateTimeUtc
        {
            get { return _DateTime.ToUniversalTime(); }
            set
            {
                _DateTime = value.ToLocalTime();
                _DateTimeSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Date_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Date_PropertyType
    {
        [XmlIgnore] private DateTime _Date;

        [XmlIgnore] public bool _DateSpecified;


        [XmlIgnore] private DateTime _DateTime;

        [XmlIgnore] public bool _DateTimeSpecified;
        [XmlIgnore] private string _nilReason;

        public Date_PropertyType()
        {
            Date = DateTime.Now;
            DateTime = DateTime.Now;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Date", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "date",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public DateTime Date
        {
            get { return _Date; }
            set
            {
                _Date = value;
                _DateSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime DateUtc
        {
            get { return _Date.ToUniversalTime(); }
            set
            {
                _Date = value.ToLocalTime();
                _DateSpecified = true;
            }
        }


        [XmlElement(ElementName = "DateTime", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public DateTime @DateTime
        {
            get { return _DateTime; }
            set
            {
                _DateTime = value;
                _DateTimeSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime @DateTimeUtc
        {
            get { return _DateTime.ToUniversalTime(); }
            set
            {
                _DateTime = value.ToLocalTime();
                _DateTimeSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Number_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Number_PropertyType
    {
        [XmlIgnore] private decimal _Decimal;

        [XmlIgnore] public bool _DecimalSpecified;
        [XmlIgnore] private string _Integer;
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private double _Real;

        [XmlIgnore] public bool _RealSpecified;

        public Number_PropertyType()
        {
            _RealSpecified = true;
            _DecimalSpecified = true;
            Integer = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }


        [XmlElement(ElementName = "Real", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public double Real
        {
            get { return _Real; }
            set
            {
                _Real = value;
                _RealSpecified = true;
            }
        }


        [XmlElement(ElementName = "Decimal", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "decimal",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public decimal @Decimal
        {
            get { return _Decimal; }
            set
            {
                _Decimal = value;
                _DecimalSpecified = true;
            }
        }

        [XmlElement(ElementName = "Integer", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "integer",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public string Integer
        {
            get { return _Integer; }
            set { _Integer = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Decimal_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Decimal_PropertyType
    {
        [XmlIgnore] private decimal _Decimal;

        [XmlIgnore] public bool _DecimalSpecified;
        [XmlIgnore] private string _nilReason;


        public Decimal_PropertyType()
        {
            _DecimalSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Decimal", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "decimal",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public decimal @Decimal
        {
            get { return _Decimal; }
            set
            {
                _Decimal = value;
                _DecimalSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Real_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Real_PropertyType
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private double _Real;

        [XmlIgnore] public bool _RealSpecified;


        public Real_PropertyType()
        {
            _RealSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Real", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "double",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public double Real
        {
            get { return _Real; }
            set
            {
                _Real = value;
                _RealSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Integer_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Integer_PropertyType
    {
        [XmlIgnore] private string _Integer;
        [XmlIgnore] private string _nilReason;

        public Integer_PropertyType()
        {
            Integer = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Integer", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "integer",
            Namespace = "http://www.isotc211.org/2005/gco")]
        public string Integer
        {
            get { return _Integer; }
            set { _Integer = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "UnlimitedInteger_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UnlimitedInteger_Type
    {
        [XmlIgnore] private bool _isInfinite;

        [XmlIgnore] public bool _isInfiniteSpecified;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "isInfinite", DataType = "boolean")]
        public bool isInfinite
        {
            get { return _isInfinite; }
            set
            {
                _isInfinite = value;
                _isInfiniteSpecified = true;
            }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "UnlimitedInteger_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class UnlimitedInteger_PropertyType
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private UnlimitedInteger _UnlimitedInteger;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (UnlimitedInteger), ElementName = "UnlimitedInteger", IsNullable = true,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public UnlimitedInteger UnlimitedInteger
        {
            get { return _UnlimitedInteger; }
            set { _UnlimitedInteger = value; }
        }

        public void MakeSchemaCompliant()
        {
            UnlimitedInteger.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Record_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Record_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _Record;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public Record_PropertyType()
        {
            type = "simple";
            Record = string.Empty;
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "Record", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public string Record
        {
            get { return _Record; }
            set { _Record = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "RecordType_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class RecordType_Type
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _Value;

        public RecordType_Type()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "RecordType_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class RecordType_PropertyType
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private RecordType _RecordType;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (RecordType), ElementName = "RecordType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
        public RecordType RecordType
        {
            get { return _RecordType; }
            set { _RecordType = value; }
        }

        public void MakeSchemaCompliant()
        {
            RecordType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Binary_Type", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Binary_Type
    {
        [XmlIgnore] private string _src;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "src", DataType = "anyURI")]
        public string src
        {
            get { return _src; }
            set { _src = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "Binary_PropertyType", Namespace = "http://www.isotc211.org/2005/gco"), Serializable]
    public class Binary_PropertyType
    {
        [XmlIgnore] private Binary _Binary;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Binary), ElementName = "Binary", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gco")]
        public Binary Binary
        {
            get { return _Binary; }
            set { _Binary = value; }
        }

        public void MakeSchemaCompliant()
        {
            Binary.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GM_Point_PropertyType", Namespace = "http://www.isotc211.org/2005/gss"), Serializable]
    public class GM_Point_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private Point _Point;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public GM_Point_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Point), ElementName = "Point", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public Point Point
        {
            get
            {
                if (_Point == null) _Point = new Point();
                return _Point;
            }
            set { _Point = value; }
        }

        public void MakeSchemaCompliant()
        {
            Point.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GM_Object_PropertyType", Namespace = "http://www.isotc211.org/2005/gss"), Serializable]
    [XmlInclude(typeof (GeometricComplexType))]
    [XmlInclude(typeof (GridType))]
    [XmlInclude(typeof (AbstractGeometricAggregateType))]
    [XmlInclude(typeof (AbstractGeometricPrimitiveType))]
    public class GM_Object_PropertyType
    {
        [XmlIgnore] private AbstractGeometry _AbstractGeometry;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public GM_Object_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractGeometry), ElementName = "AbstractGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeometry AbstractGeometry
        {
            get { return _AbstractGeometry; }
            set { _AbstractGeometry = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeometry.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TM_Primitive_PropertyType", Namespace = "http://www.isotc211.org/2005/gts"), Serializable]
    [XmlInclude(typeof (AbstractTimeTopologyPrimitiveType))]
    [XmlInclude(typeof (AbstractTimeGeometricPrimitiveType))]
    public class TM_Primitive_PropertyType
    {
        [XmlIgnore] private AbstractTimePrimitive _AbstractTimePrimitive;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public TM_Primitive_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractTimePrimitive), ElementName = "AbstractTimePrimitive", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractTimePrimitive AbstractTimePrimitive
        {
            get { return _AbstractTimePrimitive; }
            set { _AbstractTimePrimitive = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractTimePrimitive.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TM_PeriodDuration_PropertyType", Namespace = "http://www.isotc211.org/2005/gts"), Serializable]
    public class TM_PeriodDuration_PropertyType
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private string _TM_PeriodDuration;

        public TM_PeriodDuration_PropertyType()
        {
            TM_PeriodDuration = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "TM_PeriodDuration", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "duration", Namespace = "http://www.isotc211.org/2005/gts")]
        public string TM_PeriodDuration
        {
            get { return _TM_PeriodDuration; }
            set { _TM_PeriodDuration = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "SC_CRS_PropertyType", Namespace = "http://www.isotc211.org/2005/gsr"), Serializable]
    [XmlInclude(typeof (GeographicCRSType))]
    [XmlInclude(typeof (GeocentricCRSType))]
    [XmlInclude(typeof (TemporalCRSType))]
    [XmlInclude(typeof (AbstractGeneralDerivedCRSType))]
    [XmlInclude(typeof (ImageCRSType))]
    [XmlInclude(typeof (GeodeticCRSType))]
    [XmlInclude(typeof (CompoundCRSType))]
    [XmlInclude(typeof (VerticalCRSType))]
    [XmlInclude(typeof (EngineeringCRSType))]
    public class SC_CRS_PropertyType
    {
        [XmlIgnore] private AbstractCRS _AbstractCRS;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public SC_CRS_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractCRS), ElementName = "AbstractCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCRS AbstractCRS
        {
            get { return _AbstractCRS; }
            set { _AbstractCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_TemporalExtent_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_TemporalExtent_Type : AbstractObject_Type
    {
        [XmlIgnore] private TM_Primitive_PropertyType _extent;

        [XmlElement(Type = typeof (TM_Primitive_PropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public TM_Primitive_PropertyType extent
        {
            get { return _extent; }
            set { _extent = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            extent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_TemporalExtent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_TemporalExtent_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EX_TemporalExtent _EX_TemporalExtent;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public EX_TemporalExtent_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_TemporalExtent), ElementName = "EX_TemporalExtent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_TemporalExtent EX_TemporalExtent
        {
            get { return _EX_TemporalExtent; }
            set { _EX_TemporalExtent = value; }
        }

        public void MakeSchemaCompliant()
        {
            EX_TemporalExtent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_VerticalExtent_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_VerticalExtent_Type : AbstractObject_Type
    {
        [XmlIgnore] private Real_PropertyType _maximumValue;
        [XmlIgnore] private Real_PropertyType _minimumValue;
        [XmlIgnore] private SC_CRS_PropertyType _verticalCRS;

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "minimumValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType minimumValue
        {
            get { return _minimumValue; }
            set { _minimumValue = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "maximumValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType maximumValue
        {
            get { return _maximumValue; }
            set { _maximumValue = value; }
        }

        [XmlElement(Type = typeof (SC_CRS_PropertyType), ElementName = "verticalCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public SC_CRS_PropertyType verticalCRS
        {
            get { return _verticalCRS; }
            set { _verticalCRS = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            minimumValue.MakeSchemaCompliant();
            maximumValue.MakeSchemaCompliant();
            verticalCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_VerticalExtent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_VerticalExtent_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EX_VerticalExtent _EX_VerticalExtent;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public EX_VerticalExtent_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_VerticalExtent), ElementName = "EX_VerticalExtent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_VerticalExtent EX_VerticalExtent
        {
            get { return _EX_VerticalExtent; }
            set { _EX_VerticalExtent = value; }
        }

        public void MakeSchemaCompliant()
        {
            EX_VerticalExtent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_BoundingPolygon_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_BoundingPolygon_Type : AbstractEX_GeographicExtent_Type
    {
        [XmlIgnore] private List<GM_Object_PropertyType> _polygon;

        [XmlIgnore]
        public GM_Object_PropertyType this[int index]
        {
            get { return polygon[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return polygon.Count; }
        }

        [XmlElement(Type = typeof (GM_Object_PropertyType), ElementName = "polygon", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<GM_Object_PropertyType> polygon
        {
            get
            {
                if (_polygon == null) _polygon = new List<GM_Object_PropertyType>();
                return _polygon;
            }
            set { _polygon = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return polygon.GetEnumerator();
        }

        public void Add(GM_Object_PropertyType obj)
        {
            polygon.Add(obj);
        }

        public void Clear()
        {
            polygon.Clear();
        }

        public GM_Object_PropertyType Remove(int index)
        {
            GM_Object_PropertyType obj = polygon[index];
            polygon.Remove(obj);
            return obj;
        }

        public bool Remove(GM_Object_PropertyType obj)
        {
            return polygon.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (GM_Object_PropertyType _c in polygon) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_BoundingPolygon_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class EX_BoundingPolygon_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EX_BoundingPolygon _EX_BoundingPolygon;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public EX_BoundingPolygon_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_BoundingPolygon), ElementName = "EX_BoundingPolygon", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_BoundingPolygon EX_BoundingPolygon
        {
            get { return _EX_BoundingPolygon; }
            set { _EX_BoundingPolygon = value; }
        }

        public void MakeSchemaCompliant()
        {
            EX_BoundingPolygon.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_Extent_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_Extent_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _description;

        [XmlIgnore] private List<EX_GeographicExtent_PropertyType> _geographicElement;

        [XmlIgnore] private List<EX_TemporalExtent_PropertyType> _temporalElement;

        [XmlIgnore] private List<EX_VerticalExtent_PropertyType> _verticalElement;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (EX_GeographicExtent_PropertyType), ElementName = "geographicElement",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_GeographicExtent_PropertyType> geographicElement
        {
            get
            {
                if (_geographicElement == null) _geographicElement = new List<EX_GeographicExtent_PropertyType>();
                return _geographicElement;
            }
            set { _geographicElement = value; }
        }

        [XmlElement(Type = typeof (EX_TemporalExtent_PropertyType), ElementName = "temporalElement", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_TemporalExtent_PropertyType> temporalElement
        {
            get
            {
                if (_temporalElement == null) _temporalElement = new List<EX_TemporalExtent_PropertyType>();
                return _temporalElement;
            }
            set { _temporalElement = value; }
        }

        [XmlElement(Type = typeof (EX_VerticalExtent_PropertyType), ElementName = "verticalElement", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_VerticalExtent_PropertyType> verticalElement
        {
            get
            {
                if (_verticalElement == null) _verticalElement = new List<EX_VerticalExtent_PropertyType>();
                return _verticalElement;
            }
            set { _verticalElement = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_Extent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_Extent_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EX_Extent _EX_Extent;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public EX_Extent_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_Extent), ElementName = "EX_Extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_Extent EX_Extent
        {
            get { return _EX_Extent; }
            set { _EX_Extent = value; }
        }

        public void MakeSchemaCompliant()
        {
            EX_Extent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractEX_GeographicExtent_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractEX_GeographicExtent_Type : AbstractObject_Type
    {
        [XmlIgnore] private Boolean_PropertyType _extentTypeCode;

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "extentTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType extentTypeCode
        {
            get { return _extentTypeCode; }
            set { _extentTypeCode = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_GeographicExtent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (EX_GeographicBoundingBox_Type))]
    [XmlInclude(typeof (EX_BoundingPolygon_Type))]
    [XmlInclude(typeof (EX_GeographicDescription_Type))]
    public class EX_GeographicExtent_PropertyType
    {
        [XmlIgnore] private AbstractEX_GeographicExtent _AbstractEX_GeographicExtent;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public EX_GeographicExtent_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractEX_GeographicExtent), ElementName = "AbstractEX_GeographicExtent",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractEX_GeographicExtent AbstractEX_GeographicExtent
        {
            get { return _AbstractEX_GeographicExtent; }
            set { _AbstractEX_GeographicExtent = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractEX_GeographicExtent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_GeographicBoundingBox_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_GeographicBoundingBox_Type : AbstractEX_GeographicExtent_Type
    {
        [XmlIgnore] private Decimal_PropertyType _eastBoundLongitude;
        [XmlIgnore] private Decimal_PropertyType _northBoundLatitude;
        [XmlIgnore] private Decimal_PropertyType _southBoundLatitude;
        [XmlIgnore] private Decimal_PropertyType _westBoundLongitude;

        [XmlElement(Type = typeof (Decimal_PropertyType), ElementName = "westBoundLongitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Decimal_PropertyType westBoundLongitude
        {
            get { return _westBoundLongitude; }
            set { _westBoundLongitude = value; }
        }

        [XmlElement(Type = typeof (Decimal_PropertyType), ElementName = "eastBoundLongitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Decimal_PropertyType eastBoundLongitude
        {
            get { return _eastBoundLongitude; }
            set { _eastBoundLongitude = value; }
        }

        [XmlElement(Type = typeof (Decimal_PropertyType), ElementName = "southBoundLatitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Decimal_PropertyType southBoundLatitude
        {
            get { return _southBoundLatitude; }
            set { _southBoundLatitude = value; }
        }

        [XmlElement(Type = typeof (Decimal_PropertyType), ElementName = "northBoundLatitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Decimal_PropertyType northBoundLatitude
        {
            get { return _northBoundLatitude; }
            set { _northBoundLatitude = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            westBoundLongitude.MakeSchemaCompliant();
            eastBoundLongitude.MakeSchemaCompliant();
            southBoundLatitude.MakeSchemaCompliant();
            northBoundLatitude.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_GeographicBoundingBox_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class EX_GeographicBoundingBox_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EX_GeographicBoundingBox _EX_GeographicBoundingBox;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public EX_GeographicBoundingBox_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_GeographicBoundingBox), ElementName = "EX_GeographicBoundingBox",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_GeographicBoundingBox EX_GeographicBoundingBox
        {
            get { return _EX_GeographicBoundingBox; }
            set { _EX_GeographicBoundingBox = value; }
        }

        public void MakeSchemaCompliant()
        {
            EX_GeographicBoundingBox.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_SpatialTemporalExtent_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_SpatialTemporalExtent_Type : EX_TemporalExtent_Type
    {
        [XmlIgnore] private List<EX_GeographicExtent_PropertyType> _spatialExtent;

        [XmlIgnore]
        public EX_GeographicExtent_PropertyType this[int index]
        {
            get { return spatialExtent[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return spatialExtent.Count; }
        }

        [XmlElement(Type = typeof (EX_GeographicExtent_PropertyType), ElementName = "spatialExtent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_GeographicExtent_PropertyType> spatialExtent
        {
            get
            {
                if (_spatialExtent == null) _spatialExtent = new List<EX_GeographicExtent_PropertyType>();
                return _spatialExtent;
            }
            set { _spatialExtent = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return spatialExtent.GetEnumerator();
        }

        public void Add(EX_GeographicExtent_PropertyType obj)
        {
            spatialExtent.Add(obj);
        }

        public void Clear()
        {
            spatialExtent.Clear();
        }

        public EX_GeographicExtent_PropertyType Remove(int index)
        {
            EX_GeographicExtent_PropertyType obj = spatialExtent[index];
            spatialExtent.Remove(obj);
            return obj;
        }

        public bool Remove(EX_GeographicExtent_PropertyType obj)
        {
            return spatialExtent.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (EX_GeographicExtent_PropertyType _c in spatialExtent) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_SpatialTemporalExtent_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class EX_SpatialTemporalExtent_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EX_SpatialTemporalExtent _EX_SpatialTemporalExtent;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public EX_SpatialTemporalExtent_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_SpatialTemporalExtent), ElementName = "EX_SpatialTemporalExtent",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_SpatialTemporalExtent EX_SpatialTemporalExtent
        {
            get { return _EX_SpatialTemporalExtent; }
            set { _EX_SpatialTemporalExtent = value; }
        }

        public void MakeSchemaCompliant()
        {
            EX_SpatialTemporalExtent.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_GeographicDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class EX_GeographicDescription_Type : AbstractEX_GeographicExtent_Type
    {
        [XmlIgnore] private MD_Identifier_PropertyType _geographicIdentifier;

        [XmlElement(Type = typeof (MD_Identifier_PropertyType), ElementName = "geographicIdentifier", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Identifier_PropertyType geographicIdentifier
        {
            get { return _geographicIdentifier; }
            set { _geographicIdentifier = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            geographicIdentifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EX_GeographicDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class EX_GeographicDescription_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EX_GeographicDescription _EX_GeographicDescription;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public EX_GeographicDescription_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (EX_GeographicDescription), ElementName = "EX_GeographicDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_GeographicDescription EX_GeographicDescription
        {
            get { return _EX_GeographicDescription; }
            set { _EX_GeographicDescription = value; }
        }

        public void MakeSchemaCompliant()
        {
            EX_GeographicDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RS_Identifier_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class RS_Identifier_Type : MD_Identifier_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _codeSpace;

        [XmlIgnore] private CharacterString_PropertyType _version;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "codeSpace", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType codeSpace
        {
            get { return _codeSpace; }
            set { _codeSpace = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "version", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType version
        {
            get { return _version; }
            set { _version = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RS_Identifier_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class RS_Identifier_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private RS_Identifier _RS_Identifier;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public RS_Identifier_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (RS_Identifier), ElementName = "RS_Identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RS_Identifier RS_Identifier
        {
            get { return _RS_Identifier; }
            set { _RS_Identifier = value; }
        }

        public void MakeSchemaCompliant()
        {
            RS_Identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ReferenceSystem_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_ReferenceSystem_Type : AbstractObject_Type
    {
        [XmlIgnore] private RS_Identifier_PropertyType _referenceSystemIdentifier;

        [XmlElement(Type = typeof (RS_Identifier_PropertyType), ElementName = "referenceSystemIdentifier",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RS_Identifier_PropertyType referenceSystemIdentifier
        {
            get { return _referenceSystemIdentifier; }
            set { _referenceSystemIdentifier = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ReferenceSystem_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class MD_ReferenceSystem_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_ReferenceSystem _MD_ReferenceSystem;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_ReferenceSystem_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ReferenceSystem), ElementName = "MD_ReferenceSystem", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ReferenceSystem MD_ReferenceSystem
        {
            get { return _MD_ReferenceSystem; }
            set { _MD_ReferenceSystem = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ReferenceSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Identifier_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Identifier_Type : AbstractObject_Type
    {
        [XmlIgnore] private CI_Citation_PropertyType _authority;

        [XmlIgnore] private CharacterString_PropertyType _code;

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "authority", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation_PropertyType authority
        {
            get { return _authority; }
            set { _authority = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "code", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType code
        {
            get { return _code; }
            set { _code = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            code.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Identifier_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Identifier_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Identifier _MD_Identifier;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Identifier_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Identifier), ElementName = "MD_Identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Identifier MD_Identifier
        {
            get { return _MD_Identifier; }
            set { _MD_Identifier = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractRS_ReferenceSystem_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public abstract class AbstractRS_ReferenceSystem_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<EX_Extent_PropertyType> _domainOfValidity;
        [XmlIgnore] private RS_Identifier_PropertyType _name;

        [XmlElement(Type = typeof (RS_Identifier_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RS_Identifier_PropertyType name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (EX_Extent_PropertyType), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_Extent_PropertyType> domainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new List<EX_Extent_PropertyType>();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            name.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "RS_ReferenceSystem_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class RS_ReferenceSystem_PropertyType
    {
        [XmlIgnore] private AbstractRS_ReferenceSystem _AbstractRS_ReferenceSystem;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public RS_ReferenceSystem_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractRS_ReferenceSystem), ElementName = "AbstractRS_ReferenceSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractRS_ReferenceSystem AbstractRS_ReferenceSystem
        {
            get { return _AbstractRS_ReferenceSystem; }
            set { _AbstractRS_ReferenceSystem = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractRS_ReferenceSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_ResponsibleParty_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_ResponsibleParty_Type : AbstractObject_Type
    {
        [XmlIgnore] private CI_Contact_PropertyType _contactInfo;
        [XmlIgnore] private CharacterString_PropertyType _individualName;

        [XmlIgnore] private CharacterString_PropertyType _organisationName;

        [XmlIgnore] private CharacterString_PropertyType _positionName;
        [XmlIgnore] private CI_RoleCode_PropertyType _role;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "individualName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType individualName
        {
            get { return _individualName; }
            set { _individualName = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "organisationName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType organisationName
        {
            get { return _organisationName; }
            set { _organisationName = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "positionName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType positionName
        {
            get { return _positionName; }
            set { _positionName = value; }
        }

        [XmlElement(Type = typeof (CI_Contact_PropertyType), ElementName = "contactInfo", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Contact_PropertyType contactInfo
        {
            get { return _contactInfo; }
            set { _contactInfo = value; }
        }

        [XmlElement(Type = typeof (CI_RoleCode_PropertyType), ElementName = "role", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_RoleCode_PropertyType role
        {
            get { return _role; }
            set { _role = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            role.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_ResponsibleParty_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class CI_ResponsibleParty_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_ResponsibleParty _CI_ResponsibleParty;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public CI_ResponsibleParty_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty), ElementName = "CI_ResponsibleParty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_ResponsibleParty CI_ResponsibleParty
        {
            get { return _CI_ResponsibleParty; }
            set { _CI_ResponsibleParty = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_ResponsibleParty.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Citation_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Citation_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<CharacterString_PropertyType> _alternateTitle;
        [XmlIgnore] private List<CI_ResponsibleParty_PropertyType> _citedResponsibleParty;
        [XmlIgnore] private CharacterString_PropertyType _collectiveTitle;
        [XmlIgnore] private List<CI_Date_PropertyType> _date;
        [XmlIgnore] private CharacterString_PropertyType _edition;
        [XmlIgnore] private Date_PropertyType _editionDate;
        [XmlIgnore] private List<MD_Identifier_PropertyType> _identifier;
        [XmlIgnore] private CharacterString_PropertyType _ISBN;
        [XmlIgnore] private CharacterString_PropertyType _ISSN;
        [XmlIgnore] private CharacterString_PropertyType _otherCitationDetails;
        [XmlIgnore] private List<CI_PresentationFormCode_PropertyType> _presentationForm;
        [XmlIgnore] private CI_Series_PropertyType _series;
        [XmlIgnore] private CharacterString_PropertyType _title;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "title", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "alternateTitle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> alternateTitle
        {
            get
            {
                if (_alternateTitle == null) _alternateTitle = new List<CharacterString_PropertyType>();
                return _alternateTitle;
            }
            set { _alternateTitle = value; }
        }

        [XmlElement(Type = typeof (CI_Date_PropertyType), ElementName = "date", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_Date_PropertyType> date
        {
            get
            {
                if (_date == null) _date = new List<CI_Date_PropertyType>();
                return _date;
            }
            set { _date = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "edition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType edition
        {
            get { return _edition; }
            set { _edition = value; }
        }

        [XmlElement(Type = typeof (Date_PropertyType), ElementName = "editionDate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Date_PropertyType editionDate
        {
            get { return _editionDate; }
            set { _editionDate = value; }
        }

        [XmlElement(Type = typeof (MD_Identifier_PropertyType), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Identifier_PropertyType> identifier
        {
            get
            {
                if (_identifier == null) _identifier = new List<MD_Identifier_PropertyType>();
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "citedResponsibleParty",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_ResponsibleParty_PropertyType> citedResponsibleParty
        {
            get
            {
                if (_citedResponsibleParty == null)
                    _citedResponsibleParty = new List<CI_ResponsibleParty_PropertyType>();
                return _citedResponsibleParty;
            }
            set { _citedResponsibleParty = value; }
        }

        [XmlElement(Type = typeof (CI_PresentationFormCode_PropertyType), ElementName = "presentationForm",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_PresentationFormCode_PropertyType> presentationForm
        {
            get
            {
                if (_presentationForm == null) _presentationForm = new List<CI_PresentationFormCode_PropertyType>();
                return _presentationForm;
            }
            set { _presentationForm = value; }
        }

        [XmlElement(Type = typeof (CI_Series_PropertyType), ElementName = "series", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Series_PropertyType series
        {
            get { return _series; }
            set { _series = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "otherCitationDetails",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType otherCitationDetails
        {
            get { return _otherCitationDetails; }
            set { _otherCitationDetails = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "collectiveTitle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType collectiveTitle
        {
            get { return _collectiveTitle; }
            set { _collectiveTitle = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "ISBN", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType ISBN
        {
            get { return _ISBN; }
            set { _ISBN = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "ISSN", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType ISSN
        {
            get { return _ISSN; }
            set { _ISSN = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            title.MakeSchemaCompliant();
            foreach (CI_Date_PropertyType _c in date) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Citation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Citation_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_Citation _CI_Citation;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public CI_Citation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_Citation), ElementName = "CI_Citation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation CI_Citation
        {
            get { return _CI_Citation; }
            set { _CI_Citation = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_Citation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Address_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Address_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _administrativeArea;
        [XmlIgnore] private CharacterString_PropertyType _city;
        [XmlIgnore] private CharacterString_PropertyType _country;
        [XmlIgnore] private List<CharacterString_PropertyType> _deliveryPoint;
        [XmlIgnore] private List<CharacterString_PropertyType> _electronicMailAddress;
        [XmlIgnore] private CharacterString_PropertyType _postalCode;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "deliveryPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> deliveryPoint
        {
            get
            {
                if (_deliveryPoint == null) _deliveryPoint = new List<CharacterString_PropertyType>();
                return _deliveryPoint;
            }
            set { _deliveryPoint = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "city", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType city
        {
            get { return _city; }
            set { _city = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "administrativeArea", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType administrativeArea
        {
            get { return _administrativeArea; }
            set { _administrativeArea = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "postalCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType postalCode
        {
            get { return _postalCode; }
            set { _postalCode = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "country", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType country
        {
            get { return _country; }
            set { _country = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "electronicMailAddress",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> electronicMailAddress
        {
            get
            {
                if (_electronicMailAddress == null) _electronicMailAddress = new List<CharacterString_PropertyType>();
                return _electronicMailAddress;
            }
            set { _electronicMailAddress = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Address_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Address_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_Address _CI_Address;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public CI_Address_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_Address), ElementName = "CI_Address", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Address CI_Address
        {
            get { return _CI_Address; }
            set { _CI_Address = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_Address.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_OnlineResource_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_OnlineResource_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _applicationProfile;
        [XmlIgnore] private CharacterString_PropertyType _description;
        [XmlIgnore] private CI_OnLineFunctionCode_PropertyType _function;
        [XmlIgnore] private URL_PropertyType _linkage;
        [XmlIgnore] private CharacterString_PropertyType _name;

        [XmlIgnore] private CharacterString_PropertyType _protocol;

        [XmlElement(Type = typeof (URL_PropertyType), ElementName = "linkage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public URL_PropertyType linkage
        {
            get { return _linkage; }
            set { _linkage = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "protocol", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType protocol
        {
            get { return _protocol; }
            set { _protocol = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "applicationProfile", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType applicationProfile
        {
            get { return _applicationProfile; }
            set { _applicationProfile = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (CI_OnLineFunctionCode_PropertyType), ElementName = "function", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_OnLineFunctionCode_PropertyType function
        {
            get { return _function; }
            set { _function = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            linkage.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_OnlineResource_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_OnlineResource_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_OnlineResource _CI_OnlineResource;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public CI_OnlineResource_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_OnlineResource), ElementName = "CI_OnlineResource", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_OnlineResource CI_OnlineResource
        {
            get { return _CI_OnlineResource; }
            set { _CI_OnlineResource = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_OnlineResource.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Contact_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Contact_Type : AbstractObject_Type
    {
        [XmlIgnore] private CI_Address_PropertyType _address;
        [XmlIgnore] private CharacterString_PropertyType _contactInstructions;
        [XmlIgnore] private CharacterString_PropertyType _hoursOfService;
        [XmlIgnore] private CI_OnlineResource_PropertyType _onlineResource;
        [XmlIgnore] private CI_Telephone_PropertyType _phone;

        [XmlElement(Type = typeof (CI_Telephone_PropertyType), ElementName = "phone", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Telephone_PropertyType phone
        {
            get { return _phone; }
            set { _phone = value; }
        }

        [XmlElement(Type = typeof (CI_Address_PropertyType), ElementName = "address", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Address_PropertyType address
        {
            get { return _address; }
            set { _address = value; }
        }

        [XmlElement(Type = typeof (CI_OnlineResource_PropertyType), ElementName = "onlineResource", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_OnlineResource_PropertyType onlineResource
        {
            get { return _onlineResource; }
            set { _onlineResource = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "hoursOfService", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType hoursOfService
        {
            get { return _hoursOfService; }
            set { _hoursOfService = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "contactInstructions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType contactInstructions
        {
            get { return _contactInstructions; }
            set { _contactInstructions = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Contact_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Contact_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_Contact _CI_Contact;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public CI_Contact_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_Contact), ElementName = "CI_Contact", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Contact CI_Contact
        {
            get { return _CI_Contact; }
            set { _CI_Contact = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_Contact.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Telephone_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Telephone_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<CharacterString_PropertyType> _facsimile;
        [XmlIgnore] private List<CharacterString_PropertyType> _voice;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "voice", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> voice
        {
            get
            {
                if (_voice == null) _voice = new List<CharacterString_PropertyType>();
                return _voice;
            }
            set { _voice = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "facsimile", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> facsimile
        {
            get
            {
                if (_facsimile == null) _facsimile = new List<CharacterString_PropertyType>();
                return _facsimile;
            }
            set { _facsimile = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Telephone_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Telephone_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_Telephone _CI_Telephone;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public CI_Telephone_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_Telephone), ElementName = "CI_Telephone", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Telephone CI_Telephone
        {
            get { return _CI_Telephone; }
            set { _CI_Telephone = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_Telephone.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Date_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Date_Type : AbstractObject_Type
    {
        [XmlIgnore] private Date_PropertyType _date;

        [XmlIgnore] private CI_DateTypeCode_PropertyType _dateType;

        [XmlElement(Type = typeof (Date_PropertyType), ElementName = "date", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Date_PropertyType date
        {
            get { return _date; }
            set { _date = value; }
        }

        [XmlElement(Type = typeof (CI_DateTypeCode_PropertyType), ElementName = "dateType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_DateTypeCode_PropertyType dateType
        {
            get { return _dateType; }
            set { _dateType = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            date.MakeSchemaCompliant();
            dateType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Date_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Date_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_Date _CI_Date;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public CI_Date_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_Date), ElementName = "CI_Date", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Date CI_Date
        {
            get { return _CI_Date; }
            set { _CI_Date = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_Date.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Series_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Series_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _issueIdentification;
        [XmlIgnore] private CharacterString_PropertyType _name;
        [XmlIgnore] private CharacterString_PropertyType _page;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "issueIdentification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType issueIdentification
        {
            get { return _issueIdentification; }
            set { _issueIdentification = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "page", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType page
        {
            get { return _page; }
            set { _page = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_Series_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_Series_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_Series _CI_Series;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public CI_Series_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_Series), ElementName = "CI_Series", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Series CI_Series
        {
            get { return _CI_Series; }
            set { _CI_Series = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_Series.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "URL_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class URL_PropertyType
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private string _URL;

        public URL_PropertyType()
        {
            URL = string.Empty;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "URL", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public string URL
        {
            get { return _URL; }
            set { _URL = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "CI_RoleCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_RoleCode_PropertyType
    {
        [XmlIgnore] private CI_RoleCode _CI_RoleCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_RoleCode), ElementName = "CI_RoleCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_RoleCode CI_RoleCode
        {
            get { return _CI_RoleCode; }
            set { _CI_RoleCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_RoleCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_PresentationFormCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class CI_PresentationFormCode_PropertyType
    {
        [XmlIgnore] private CI_PresentationFormCode _CI_PresentationFormCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_PresentationFormCode), ElementName = "CI_PresentationFormCode", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_PresentationFormCode CI_PresentationFormCode
        {
            get { return _CI_PresentationFormCode; }
            set { _CI_PresentationFormCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_PresentationFormCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_OnLineFunctionCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class CI_OnLineFunctionCode_PropertyType
    {
        [XmlIgnore] private CI_OnLineFunctionCode _CI_OnLineFunctionCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_OnLineFunctionCode), ElementName = "CI_OnLineFunctionCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_OnLineFunctionCode CI_OnLineFunctionCode
        {
            get { return _CI_OnLineFunctionCode; }
            set { _CI_OnLineFunctionCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_OnLineFunctionCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CI_DateTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class CI_DateTypeCode_PropertyType
    {
        [XmlIgnore] private CI_DateTypeCode _CI_DateTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (CI_DateTypeCode), ElementName = "CI_DateTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_DateTypeCode CI_DateTypeCode
        {
            get { return _CI_DateTypeCode; }
            set { _CI_DateTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_DateTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_GridSpatialRepresentation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_GridSpatialRepresentation_Type : AbstractMD_SpatialRepresentation_Type
    {
        [XmlIgnore] private List<MD_Dimension_PropertyType> _axisDimensionProperties;
        [XmlIgnore] private MD_CellGeometryCode_PropertyType _cellGeometry;
        [XmlIgnore] private Integer_PropertyType _numberOfDimensions;
        [XmlIgnore] private Boolean_PropertyType _transformationParameterAvailability;

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "numberOfDimensions", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType numberOfDimensions
        {
            get { return _numberOfDimensions; }
            set { _numberOfDimensions = value; }
        }

        [XmlElement(Type = typeof (MD_Dimension_PropertyType), ElementName = "axisDimensionProperties",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Dimension_PropertyType> axisDimensionProperties
        {
            get
            {
                if (_axisDimensionProperties == null) _axisDimensionProperties = new List<MD_Dimension_PropertyType>();
                return _axisDimensionProperties;
            }
            set { _axisDimensionProperties = value; }
        }

        [XmlElement(Type = typeof (MD_CellGeometryCode_PropertyType), ElementName = "cellGeometry", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_CellGeometryCode_PropertyType cellGeometry
        {
            get { return _cellGeometry; }
            set { _cellGeometry = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "transformationParameterAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType transformationParameterAvailability
        {
            get { return _transformationParameterAvailability; }
            set { _transformationParameterAvailability = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            numberOfDimensions.MakeSchemaCompliant();
            cellGeometry.MakeSchemaCompliant();
            transformationParameterAvailability.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_GridSpatialRepresentation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_GridSpatialRepresentation_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_GridSpatialRepresentation _MD_GridSpatialRepresentation;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_GridSpatialRepresentation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_GridSpatialRepresentation), ElementName = "MD_GridSpatialRepresentation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_GridSpatialRepresentation MD_GridSpatialRepresentation
        {
            get { return _MD_GridSpatialRepresentation; }
            set { _MD_GridSpatialRepresentation = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_GridSpatialRepresentation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_VectorSpatialRepresentation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_VectorSpatialRepresentation_Type : AbstractMD_SpatialRepresentation_Type
    {
        [XmlIgnore] private List<MD_GeometricObjects_PropertyType> _geometricObjects;
        [XmlIgnore] private MD_TopologyLevelCode_PropertyType _topologyLevel;

        [XmlElement(Type = typeof (MD_TopologyLevelCode_PropertyType), ElementName = "topologyLevel", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_TopologyLevelCode_PropertyType topologyLevel
        {
            get { return _topologyLevel; }
            set { _topologyLevel = value; }
        }

        [XmlElement(Type = typeof (MD_GeometricObjects_PropertyType), ElementName = "geometricObjects",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_GeometricObjects_PropertyType> geometricObjects
        {
            get
            {
                if (_geometricObjects == null) _geometricObjects = new List<MD_GeometricObjects_PropertyType>();
                return _geometricObjects;
            }
            set { _geometricObjects = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_VectorSpatialRepresentation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_VectorSpatialRepresentation_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_VectorSpatialRepresentation _MD_VectorSpatialRepresentation;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_VectorSpatialRepresentation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_VectorSpatialRepresentation), ElementName = "MD_VectorSpatialRepresentation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_VectorSpatialRepresentation MD_VectorSpatialRepresentation
        {
            get { return _MD_VectorSpatialRepresentation; }
            set { _MD_VectorSpatialRepresentation = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_VectorSpatialRepresentation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractMD_SpatialRepresentation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractMD_SpatialRepresentation_Type : AbstractObject_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_SpatialRepresentation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (MD_GridSpatialRepresentation_Type))]
    [XmlInclude(typeof (MD_VectorSpatialRepresentation_Type))]
    public class MD_SpatialRepresentation_PropertyType
    {
        [XmlIgnore] private AbstractMD_SpatialRepresentation _AbstractMD_SpatialRepresentation;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_SpatialRepresentation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractMD_SpatialRepresentation), ElementName = "AbstractMD_SpatialRepresentation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractMD_SpatialRepresentation AbstractMD_SpatialRepresentation
        {
            get { return _AbstractMD_SpatialRepresentation; }
            set { _AbstractMD_SpatialRepresentation = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractMD_SpatialRepresentation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Georeferenceable_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Georeferenceable_Type : MD_GridSpatialRepresentation_Type
    {
        [XmlIgnore] private Boolean_PropertyType _controlPointAvailability;
        [XmlIgnore] private Record_PropertyType _georeferencedParameters;

        [XmlIgnore] private Boolean_PropertyType _orientationParameterAvailability;

        [XmlIgnore] private CharacterString_PropertyType _orientationParameterDescription;
        [XmlIgnore] private List<CI_Citation_PropertyType> _parameterCitation;

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "controlPointAvailability", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType controlPointAvailability
        {
            get { return _controlPointAvailability; }
            set { _controlPointAvailability = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "orientationParameterAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType orientationParameterAvailability
        {
            get { return _orientationParameterAvailability; }
            set { _orientationParameterAvailability = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "orientationParameterDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType orientationParameterDescription
        {
            get { return _orientationParameterDescription; }
            set { _orientationParameterDescription = value; }
        }

        [XmlElement(Type = typeof (Record_PropertyType), ElementName = "georeferencedParameters", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Record_PropertyType georeferencedParameters
        {
            get { return _georeferencedParameters; }
            set { _georeferencedParameters = value; }
        }

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "parameterCitation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_Citation_PropertyType> parameterCitation
        {
            get
            {
                if (_parameterCitation == null) _parameterCitation = new List<CI_Citation_PropertyType>();
                return _parameterCitation;
            }
            set { _parameterCitation = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            controlPointAvailability.MakeSchemaCompliant();
            orientationParameterAvailability.MakeSchemaCompliant();
            georeferencedParameters.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Georeferenceable_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_Georeferenceable_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Georeferenceable _MD_Georeferenceable;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Georeferenceable_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Georeferenceable), ElementName = "MD_Georeferenceable", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Georeferenceable MD_Georeferenceable
        {
            get { return _MD_Georeferenceable; }
            set { _MD_Georeferenceable = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Georeferenceable.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Dimension_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Dimension_Type : AbstractObject_Type
    {
        [XmlIgnore] private MD_DimensionNameTypeCode_PropertyType _dimensionName;

        [XmlIgnore] private Integer_PropertyType _dimensionSize;

        [XmlIgnore] private Measure_PropertyType _resolution;

        [XmlElement(Type = typeof (MD_DimensionNameTypeCode_PropertyType), ElementName = "dimensionName",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_DimensionNameTypeCode_PropertyType dimensionName
        {
            get { return _dimensionName; }
            set { _dimensionName = value; }
        }

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "dimensionSize", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType dimensionSize
        {
            get { return _dimensionSize; }
            set { _dimensionSize = value; }
        }

        [XmlElement(Type = typeof (Measure_PropertyType), ElementName = "resolution", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Measure_PropertyType resolution
        {
            get { return _resolution; }
            set { _resolution = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            dimensionName.MakeSchemaCompliant();
            dimensionSize.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Dimension_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Dimension_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Dimension _MD_Dimension;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Dimension_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Dimension), ElementName = "MD_Dimension", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Dimension MD_Dimension
        {
            get { return _MD_Dimension; }
            set { _MD_Dimension = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Dimension.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Georectified_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Georectified_Type : MD_GridSpatialRepresentation_Type
    {
        [XmlIgnore] private GM_Point_PropertyType _centerPoint;
        [XmlIgnore] private Boolean_PropertyType _checkPointAvailability;

        [XmlIgnore] private CharacterString_PropertyType _checkPointDescription;

        [XmlIgnore] private List<GM_Point_PropertyType> _cornerPoints;
        [XmlIgnore] private MD_PixelOrientationCode_PropertyType _pointInPixel;
        [XmlIgnore] private CharacterString_PropertyType _transformationDimensionDescription;
        [XmlIgnore] private List<CharacterString_PropertyType> _transformationDimensionMapping;

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "checkPointAvailability", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType checkPointAvailability
        {
            get { return _checkPointAvailability; }
            set { _checkPointAvailability = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "checkPointDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType checkPointDescription
        {
            get { return _checkPointDescription; }
            set { _checkPointDescription = value; }
        }

        [XmlElement(Type = typeof (GM_Point_PropertyType), ElementName = "cornerPoints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<GM_Point_PropertyType> cornerPoints
        {
            get
            {
                if (_cornerPoints == null) _cornerPoints = new List<GM_Point_PropertyType>();
                return _cornerPoints;
            }
            set { _cornerPoints = value; }
        }

        [XmlElement(Type = typeof (GM_Point_PropertyType), ElementName = "centerPoint", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public GM_Point_PropertyType centerPoint
        {
            get { return _centerPoint; }
            set { _centerPoint = value; }
        }

        [XmlElement(Type = typeof (MD_PixelOrientationCode_PropertyType), ElementName = "pointInPixel",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_PixelOrientationCode_PropertyType pointInPixel
        {
            get { return _pointInPixel; }
            set { _pointInPixel = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "transformationDimensionDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType transformationDimensionDescription
        {
            get { return _transformationDimensionDescription; }
            set { _transformationDimensionDescription = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "transformationDimensionMapping",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> transformationDimensionMapping
        {
            get
            {
                if (_transformationDimensionMapping == null)
                    _transformationDimensionMapping = new List<CharacterString_PropertyType>();
                return _transformationDimensionMapping;
            }
            set { _transformationDimensionMapping = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            checkPointAvailability.MakeSchemaCompliant();
            pointInPixel.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Georectified_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Georectified_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Georectified _MD_Georectified;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Georectified_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Georectified), ElementName = "MD_Georectified", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Georectified MD_Georectified
        {
            get { return _MD_Georectified; }
            set { _MD_Georectified = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Georectified.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_GeometricObjects_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_GeometricObjects_Type : AbstractObject_Type
    {
        [XmlIgnore] private Integer_PropertyType _geometricObjectCount;
        [XmlIgnore] private MD_GeometricObjectTypeCode_PropertyType _geometricObjectType;

        [XmlElement(Type = typeof (MD_GeometricObjectTypeCode_PropertyType), ElementName = "geometricObjectType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_GeometricObjectTypeCode_PropertyType geometricObjectType
        {
            get { return _geometricObjectType; }
            set { _geometricObjectType = value; }
        }

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "geometricObjectCount", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType geometricObjectCount
        {
            get { return _geometricObjectCount; }
            set { _geometricObjectCount = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            geometricObjectType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_GeometricObjects_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_GeometricObjects_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_GeometricObjects _MD_GeometricObjects;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_GeometricObjects_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_GeometricObjects), ElementName = "MD_GeometricObjects", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_GeometricObjects MD_GeometricObjects
        {
            get { return _MD_GeometricObjects; }
            set { _MD_GeometricObjects = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_GeometricObjects.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_PixelOrientationCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_PixelOrientationCode_PropertyType
    {
        [XmlIgnore] private MD_PixelOrientationCode_Type _MD_PixelOrientationCode;

        [XmlIgnore] public bool _MD_PixelOrientationCodeSpecified;
        [XmlIgnore] private string _nilReason;


        public MD_PixelOrientationCode_PropertyType()
        {
            _MD_PixelOrientationCodeSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "MD_PixelOrientationCode", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_PixelOrientationCode_Type MD_PixelOrientationCode
        {
            get { return _MD_PixelOrientationCode; }
            set
            {
                _MD_PixelOrientationCode = value;
                _MD_PixelOrientationCodeSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MD_TopologyLevelCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_TopologyLevelCode_PropertyType
    {
        [XmlIgnore] private MD_TopologyLevelCode _MD_TopologyLevelCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_TopologyLevelCode), ElementName = "MD_TopologyLevelCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_TopologyLevelCode MD_TopologyLevelCode
        {
            get { return _MD_TopologyLevelCode; }
            set { _MD_TopologyLevelCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_TopologyLevelCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_GeometricObjectTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_GeometricObjectTypeCode_PropertyType
    {
        [XmlIgnore] private MD_GeometricObjectTypeCode _MD_GeometricObjectTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_GeometricObjectTypeCode), ElementName = "MD_GeometricObjectTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_GeometricObjectTypeCode MD_GeometricObjectTypeCode
        {
            get { return _MD_GeometricObjectTypeCode; }
            set { _MD_GeometricObjectTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_GeometricObjectTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_CellGeometryCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_CellGeometryCode_PropertyType
    {
        [XmlIgnore] private MD_CellGeometryCode _MD_CellGeometryCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_CellGeometryCode), ElementName = "MD_CellGeometryCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_CellGeometryCode MD_CellGeometryCode
        {
            get { return _MD_CellGeometryCode; }
            set { _MD_CellGeometryCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_CellGeometryCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_DimensionNameTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_DimensionNameTypeCode_PropertyType
    {
        [XmlIgnore] private MD_DimensionNameTypeCode _MD_DimensionNameTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_DimensionNameTypeCode), ElementName = "MD_DimensionNameTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_DimensionNameTypeCode MD_DimensionNameTypeCode
        {
            get { return _MD_DimensionNameTypeCode; }
            set { _MD_DimensionNameTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_DimensionNameTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ExtendedElementInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ExtendedElementInformation_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _condition;
        [XmlIgnore] private MD_DatatypeCode_PropertyType _dataType;
        [XmlIgnore] private CharacterString_PropertyType _definition;
        [XmlIgnore] private Integer_PropertyType _domainCode;
        [XmlIgnore] private CharacterString_PropertyType _domainValue;
        [XmlIgnore] private CharacterString_PropertyType _maximumOccurrence;
        [XmlIgnore] private CharacterString_PropertyType _name;
        [XmlIgnore] private MD_ObligationCode_PropertyType _obligation;
        [XmlIgnore] private List<CharacterString_PropertyType> _parentEntity;
        [XmlIgnore] private List<CharacterString_PropertyType> _rationale;
        [XmlIgnore] private CharacterString_PropertyType _rule;

        [XmlIgnore] private CharacterString_PropertyType _shortName;
        [XmlIgnore] private List<CI_ResponsibleParty_PropertyType> _source;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "shortName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType shortName
        {
            get { return _shortName; }
            set { _shortName = value; }
        }

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "domainCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType domainCode
        {
            get { return _domainCode; }
            set { _domainCode = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "definition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType definition
        {
            get { return _definition; }
            set { _definition = value; }
        }

        [XmlElement(Type = typeof (MD_ObligationCode_PropertyType), ElementName = "obligation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ObligationCode_PropertyType obligation
        {
            get { return _obligation; }
            set { _obligation = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "condition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType condition
        {
            get { return _condition; }
            set { _condition = value; }
        }

        [XmlElement(Type = typeof (MD_DatatypeCode_PropertyType), ElementName = "dataType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_DatatypeCode_PropertyType dataType
        {
            get { return _dataType; }
            set { _dataType = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "maximumOccurrence", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType maximumOccurrence
        {
            get { return _maximumOccurrence; }
            set { _maximumOccurrence = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "domainValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType domainValue
        {
            get { return _domainValue; }
            set { _domainValue = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "parentEntity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> parentEntity
        {
            get
            {
                if (_parentEntity == null) _parentEntity = new List<CharacterString_PropertyType>();
                return _parentEntity;
            }
            set { _parentEntity = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "rule", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType rule
        {
            get { return _rule; }
            set { _rule = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "rationale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> rationale
        {
            get
            {
                if (_rationale == null) _rationale = new List<CharacterString_PropertyType>();
                return _rationale;
            }
            set { _rationale = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "source", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_ResponsibleParty_PropertyType> source
        {
            get
            {
                if (_source == null) _source = new List<CI_ResponsibleParty_PropertyType>();
                return _source;
            }
            set { _source = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            name.MakeSchemaCompliant();
            definition.MakeSchemaCompliant();
            dataType.MakeSchemaCompliant();
            foreach (CharacterString_PropertyType _c in parentEntity) _c.MakeSchemaCompliant();
            rule.MakeSchemaCompliant();
            foreach (CI_ResponsibleParty_PropertyType _c in source) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ExtendedElementInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ExtendedElementInformation_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_ExtendedElementInformation _MD_ExtendedElementInformation;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_ExtendedElementInformation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ExtendedElementInformation), ElementName = "MD_ExtendedElementInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ExtendedElementInformation MD_ExtendedElementInformation
        {
            get { return _MD_ExtendedElementInformation; }
            set { _MD_ExtendedElementInformation = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ExtendedElementInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_MetadataExtensionInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_MetadataExtensionInformation_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<MD_ExtendedElementInformation_PropertyType> _extendedElementInformation;
        [XmlIgnore] private CI_OnlineResource_PropertyType _extensionOnLineResource;

        [XmlElement(Type = typeof (CI_OnlineResource_PropertyType), ElementName = "extensionOnLineResource",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_OnlineResource_PropertyType extensionOnLineResource
        {
            get { return _extensionOnLineResource; }
            set { _extensionOnLineResource = value; }
        }

        [XmlElement(Type = typeof (MD_ExtendedElementInformation_PropertyType),
            ElementName = "extendedElementInformation", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ExtendedElementInformation_PropertyType> extendedElementInformation
        {
            get
            {
                if (_extendedElementInformation == null)
                    _extendedElementInformation = new List<MD_ExtendedElementInformation_PropertyType>();
                return _extendedElementInformation;
            }
            set { _extendedElementInformation = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_MetadataExtensionInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_MetadataExtensionInformation_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_MetadataExtensionInformation _MD_MetadataExtensionInformation;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_MetadataExtensionInformation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_MetadataExtensionInformation), ElementName = "MD_MetadataExtensionInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_MetadataExtensionInformation MD_MetadataExtensionInformation
        {
            get { return _MD_MetadataExtensionInformation; }
            set { _MD_MetadataExtensionInformation = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_MetadataExtensionInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ObligationCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_ObligationCode_PropertyType
    {
        [XmlIgnore] private MD_ObligationCode_Type _MD_ObligationCode;

        [XmlIgnore] public bool _MD_ObligationCodeSpecified;
        [XmlIgnore] private string _nilReason;


        public MD_ObligationCode_PropertyType()
        {
            _MD_ObligationCodeSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "MD_ObligationCode", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ObligationCode_Type MD_ObligationCode
        {
            get { return _MD_ObligationCode; }
            set
            {
                _MD_ObligationCode = value;
                _MD_ObligationCodeSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MD_DatatypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_DatatypeCode_PropertyType
    {
        [XmlIgnore] private MD_DatatypeCode _MD_DatatypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_DatatypeCode), ElementName = "MD_DatatypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_DatatypeCode MD_DatatypeCode
        {
            get { return _MD_DatatypeCode; }
            set { _MD_DatatypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_DatatypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_FeatureCatalogueDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_FeatureCatalogueDescription_Type : AbstractMD_ContentInformation_Type
    {
        [XmlIgnore] private Boolean_PropertyType _complianceCode;
        [XmlIgnore] private List<CI_Citation_PropertyType> _featureCatalogueCitation;
        [XmlIgnore] private List<GenericName_PropertyType> _featureTypes;
        [XmlIgnore] private Boolean_PropertyType _includedWithDataset;

        [XmlIgnore] private List<CharacterString_PropertyType> _language;

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "complianceCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType complianceCode
        {
            get { return _complianceCode; }
            set { _complianceCode = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "language", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> language
        {
            get
            {
                if (_language == null) _language = new List<CharacterString_PropertyType>();
                return _language;
            }
            set { _language = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "includedWithDataset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType includedWithDataset
        {
            get { return _includedWithDataset; }
            set { _includedWithDataset = value; }
        }

        [XmlElement(Type = typeof (GenericName_PropertyType), ElementName = "featureTypes", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<GenericName_PropertyType> featureTypes
        {
            get
            {
                if (_featureTypes == null) _featureTypes = new List<GenericName_PropertyType>();
                return _featureTypes;
            }
            set { _featureTypes = value; }
        }

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "featureCatalogueCitation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_Citation_PropertyType> featureCatalogueCitation
        {
            get
            {
                if (_featureCatalogueCitation == null) _featureCatalogueCitation = new List<CI_Citation_PropertyType>();
                return _featureCatalogueCitation;
            }
            set { _featureCatalogueCitation = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            includedWithDataset.MakeSchemaCompliant();
            foreach (CI_Citation_PropertyType _c in featureCatalogueCitation) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_FeatureCatalogueDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_FeatureCatalogueDescription_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_FeatureCatalogueDescription _MD_FeatureCatalogueDescription;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_FeatureCatalogueDescription_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_FeatureCatalogueDescription), ElementName = "MD_FeatureCatalogueDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_FeatureCatalogueDescription MD_FeatureCatalogueDescription
        {
            get { return _MD_FeatureCatalogueDescription; }
            set { _MD_FeatureCatalogueDescription = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_FeatureCatalogueDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_CoverageDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_CoverageDescription_Type : AbstractMD_ContentInformation_Type
    {
        [XmlIgnore] private RecordType_PropertyType _attributeDescription;

        [XmlIgnore] private MD_CoverageContentTypeCode_PropertyType _contentType;

        [XmlIgnore] private List<MD_RangeDimension_PropertyType> _dimension;

        [XmlElement(Type = typeof (RecordType_PropertyType), ElementName = "attributeDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RecordType_PropertyType attributeDescription
        {
            get { return _attributeDescription; }
            set { _attributeDescription = value; }
        }

        [XmlElement(Type = typeof (MD_CoverageContentTypeCode_PropertyType), ElementName = "contentType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_CoverageContentTypeCode_PropertyType contentType
        {
            get { return _contentType; }
            set { _contentType = value; }
        }

        [XmlElement(Type = typeof (MD_RangeDimension_PropertyType), ElementName = "dimension", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_RangeDimension_PropertyType> dimension
        {
            get
            {
                if (_dimension == null) _dimension = new List<MD_RangeDimension_PropertyType>();
                return _dimension;
            }
            set { _dimension = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            attributeDescription.MakeSchemaCompliant();
            contentType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_CoverageDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_CoverageDescription_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_CoverageDescription _MD_CoverageDescription;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_CoverageDescription_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_CoverageDescription), ElementName = "MD_CoverageDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_CoverageDescription MD_CoverageDescription
        {
            get { return _MD_CoverageDescription; }
            set { _MD_CoverageDescription = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_CoverageDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ImageDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_ImageDescription_Type : MD_CoverageDescription_Type
    {
        [XmlIgnore] private Boolean_PropertyType _cameraCalibrationInformationAvailability;
        [XmlIgnore] private Real_PropertyType _cloudCoverPercentage;
        [XmlIgnore] private Integer_PropertyType _compressionGenerationQuantity;
        [XmlIgnore] private Boolean_PropertyType _filmDistortionInformationAvailability;
        [XmlIgnore] private Real_PropertyType _illuminationAzimuthAngle;
        [XmlIgnore] private Real_PropertyType _illuminationElevationAngle;
        [XmlIgnore] private MD_Identifier_PropertyType _imageQualityCode;
        [XmlIgnore] private MD_ImagingConditionCode_PropertyType _imagingCondition;
        [XmlIgnore] private Boolean_PropertyType _lensDistortionInformationAvailability;
        [XmlIgnore] private MD_Identifier_PropertyType _processingLevelCode;
        [XmlIgnore] private Boolean_PropertyType _radiometricCalibrationDataAvailability;
        [XmlIgnore] private Boolean_PropertyType _triangulationIndicator;

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "illuminationElevationAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType illuminationElevationAngle
        {
            get { return _illuminationElevationAngle; }
            set { _illuminationElevationAngle = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "illuminationAzimuthAngle", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType illuminationAzimuthAngle
        {
            get { return _illuminationAzimuthAngle; }
            set { _illuminationAzimuthAngle = value; }
        }

        [XmlElement(Type = typeof (MD_ImagingConditionCode_PropertyType), ElementName = "imagingCondition",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ImagingConditionCode_PropertyType imagingCondition
        {
            get { return _imagingCondition; }
            set { _imagingCondition = value; }
        }

        [XmlElement(Type = typeof (MD_Identifier_PropertyType), ElementName = "imageQualityCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Identifier_PropertyType imageQualityCode
        {
            get { return _imageQualityCode; }
            set { _imageQualityCode = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "cloudCoverPercentage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType cloudCoverPercentage
        {
            get { return _cloudCoverPercentage; }
            set { _cloudCoverPercentage = value; }
        }

        [XmlElement(Type = typeof (MD_Identifier_PropertyType), ElementName = "processingLevelCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Identifier_PropertyType processingLevelCode
        {
            get { return _processingLevelCode; }
            set { _processingLevelCode = value; }
        }

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "compressionGenerationQuantity",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType compressionGenerationQuantity
        {
            get { return _compressionGenerationQuantity; }
            set { _compressionGenerationQuantity = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "triangulationIndicator", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType triangulationIndicator
        {
            get { return _triangulationIndicator; }
            set { _triangulationIndicator = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "radiometricCalibrationDataAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType radiometricCalibrationDataAvailability
        {
            get { return _radiometricCalibrationDataAvailability; }
            set { _radiometricCalibrationDataAvailability = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "cameraCalibrationInformationAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType cameraCalibrationInformationAvailability
        {
            get { return _cameraCalibrationInformationAvailability; }
            set { _cameraCalibrationInformationAvailability = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "filmDistortionInformationAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType filmDistortionInformationAvailability
        {
            get { return _filmDistortionInformationAvailability; }
            set { _filmDistortionInformationAvailability = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "lensDistortionInformationAvailability",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType lensDistortionInformationAvailability
        {
            get { return _lensDistortionInformationAvailability; }
            set { _lensDistortionInformationAvailability = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ImageDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ImageDescription_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_ImageDescription _MD_ImageDescription;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_ImageDescription_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ImageDescription), ElementName = "MD_ImageDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ImageDescription MD_ImageDescription
        {
            get { return _MD_ImageDescription; }
            set { _MD_ImageDescription = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ImageDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractMD_ContentInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractMD_ContentInformation_Type : AbstractObject_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ContentInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (MD_CoverageDescription_Type))]
    [XmlInclude(typeof (MD_FeatureCatalogueDescription_Type))]
    public class MD_ContentInformation_PropertyType
    {
        [XmlIgnore] private AbstractMD_ContentInformation _AbstractMD_ContentInformation;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_ContentInformation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractMD_ContentInformation), ElementName = "AbstractMD_ContentInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractMD_ContentInformation AbstractMD_ContentInformation
        {
            get { return _AbstractMD_ContentInformation; }
            set { _AbstractMD_ContentInformation = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractMD_ContentInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_RangeDimension_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_RangeDimension_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _descriptor;
        [XmlIgnore] private MemberName_PropertyType _sequenceIdentifier;

        [XmlElement(Type = typeof (MemberName_PropertyType), ElementName = "sequenceIdentifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MemberName_PropertyType sequenceIdentifier
        {
            get { return _sequenceIdentifier; }
            set { _sequenceIdentifier = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "descriptor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType descriptor
        {
            get { return _descriptor; }
            set { _descriptor = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_RangeDimension_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_RangeDimension_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_RangeDimension _MD_RangeDimension;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_RangeDimension_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_RangeDimension), ElementName = "MD_RangeDimension", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_RangeDimension MD_RangeDimension
        {
            get { return _MD_RangeDimension; }
            set { _MD_RangeDimension = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_RangeDimension.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Band_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Band_Type : MD_RangeDimension_Type
    {
        [XmlIgnore] private Integer_PropertyType _bitsPerValue;
        [XmlIgnore] private Real_PropertyType _maxValue;

        [XmlIgnore] private Real_PropertyType _minValue;
        [XmlIgnore] private Real_PropertyType _offset;
        [XmlIgnore] private Real_PropertyType _peakResponse;
        [XmlIgnore] private Real_PropertyType _scaleFactor;
        [XmlIgnore] private Integer_PropertyType _toneGradation;

        [XmlIgnore] private UomLength_PropertyType _units;

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "maxValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType maxValue
        {
            get { return _maxValue; }
            set { _maxValue = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "minValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType minValue
        {
            get { return _minValue; }
            set { _minValue = value; }
        }

        [XmlElement(Type = typeof (UomLength_PropertyType), ElementName = "units", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public UomLength_PropertyType units
        {
            get { return _units; }
            set { _units = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "peakResponse", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType peakResponse
        {
            get { return _peakResponse; }
            set { _peakResponse = value; }
        }

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "bitsPerValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType bitsPerValue
        {
            get { return _bitsPerValue; }
            set { _bitsPerValue = value; }
        }

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "toneGradation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType toneGradation
        {
            get { return _toneGradation; }
            set { _toneGradation = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "scaleFactor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType scaleFactor
        {
            get { return _scaleFactor; }
            set { _scaleFactor = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "offset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType offset
        {
            get { return _offset; }
            set { _offset = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Band_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Band_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Band _MD_Band;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Band_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Band), ElementName = "MD_Band", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Band MD_Band
        {
            get { return _MD_Band; }
            set { _MD_Band = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Band.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_CoverageContentTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_CoverageContentTypeCode_PropertyType
    {
        [XmlIgnore] private MD_CoverageContentTypeCode _MD_CoverageContentTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_CoverageContentTypeCode), ElementName = "MD_CoverageContentTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_CoverageContentTypeCode MD_CoverageContentTypeCode
        {
            get { return _MD_CoverageContentTypeCode; }
            set { _MD_CoverageContentTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_CoverageContentTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ImagingConditionCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ImagingConditionCode_PropertyType
    {
        [XmlIgnore] private MD_ImagingConditionCode _MD_ImagingConditionCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ImagingConditionCode), ElementName = "MD_ImagingConditionCode", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ImagingConditionCode MD_ImagingConditionCode
        {
            get { return _MD_ImagingConditionCode; }
            set { _MD_ImagingConditionCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ImagingConditionCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ApplicationSchemaInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ApplicationSchemaInformation_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _constraintLanguage;
        [XmlIgnore] private Binary_PropertyType _graphicsFile;
        [XmlIgnore] private CI_Citation_PropertyType _name;
        [XmlIgnore] private CharacterString_PropertyType _schemaAscii;

        [XmlIgnore] private CharacterString_PropertyType _schemaLanguage;
        [XmlIgnore] private Binary_PropertyType _softwareDevelopmentFile;
        [XmlIgnore] private CharacterString_PropertyType _softwareDevelopmentFileFormat;

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation_PropertyType name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "schemaLanguage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType schemaLanguage
        {
            get { return _schemaLanguage; }
            set { _schemaLanguage = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "constraintLanguage", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType constraintLanguage
        {
            get { return _constraintLanguage; }
            set { _constraintLanguage = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "schemaAscii", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType schemaAscii
        {
            get { return _schemaAscii; }
            set { _schemaAscii = value; }
        }

        [XmlElement(Type = typeof (Binary_PropertyType), ElementName = "graphicsFile", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Binary_PropertyType graphicsFile
        {
            get { return _graphicsFile; }
            set { _graphicsFile = value; }
        }

        [XmlElement(Type = typeof (Binary_PropertyType), ElementName = "softwareDevelopmentFile", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Binary_PropertyType softwareDevelopmentFile
        {
            get { return _softwareDevelopmentFile; }
            set { _softwareDevelopmentFile = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "softwareDevelopmentFileFormat",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType softwareDevelopmentFileFormat
        {
            get { return _softwareDevelopmentFileFormat; }
            set { _softwareDevelopmentFileFormat = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            name.MakeSchemaCompliant();
            schemaLanguage.MakeSchemaCompliant();
            constraintLanguage.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ApplicationSchemaInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ApplicationSchemaInformation_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_ApplicationSchemaInformation _MD_ApplicationSchemaInformation;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_ApplicationSchemaInformation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ApplicationSchemaInformation), ElementName = "MD_ApplicationSchemaInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ApplicationSchemaInformation MD_ApplicationSchemaInformation
        {
            get { return _MD_ApplicationSchemaInformation; }
            set { _MD_ApplicationSchemaInformation = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ApplicationSchemaInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_PortrayalCatalogueReference_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_PortrayalCatalogueReference_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<CI_Citation_PropertyType> _portrayalCatalogueCitation;

        [XmlIgnore]
        public CI_Citation_PropertyType this[int index]
        {
            get { return portrayalCatalogueCitation[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return portrayalCatalogueCitation.Count; }
        }

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "portrayalCatalogueCitation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_Citation_PropertyType> portrayalCatalogueCitation
        {
            get
            {
                if (_portrayalCatalogueCitation == null)
                    _portrayalCatalogueCitation = new List<CI_Citation_PropertyType>();
                return _portrayalCatalogueCitation;
            }
            set { _portrayalCatalogueCitation = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return portrayalCatalogueCitation.GetEnumerator();
        }

        public void Add(CI_Citation_PropertyType obj)
        {
            portrayalCatalogueCitation.Add(obj);
        }

        public void Clear()
        {
            portrayalCatalogueCitation.Clear();
        }

        public CI_Citation_PropertyType Remove(int index)
        {
            CI_Citation_PropertyType obj = portrayalCatalogueCitation[index];
            portrayalCatalogueCitation.Remove(obj);
            return obj;
        }

        public bool Remove(CI_Citation_PropertyType obj)
        {
            return portrayalCatalogueCitation.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CI_Citation_PropertyType _c in portrayalCatalogueCitation) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_PortrayalCatalogueReference_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_PortrayalCatalogueReference_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_PortrayalCatalogueReference _MD_PortrayalCatalogueReference;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_PortrayalCatalogueReference_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_PortrayalCatalogueReference), ElementName = "MD_PortrayalCatalogueReference",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_PortrayalCatalogueReference MD_PortrayalCatalogueReference
        {
            get { return _MD_PortrayalCatalogueReference; }
            set { _MD_PortrayalCatalogueReference = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_PortrayalCatalogueReference.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Constraints_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Constraints_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<CharacterString_PropertyType> _useLimitation;

        [XmlIgnore]
        public CharacterString_PropertyType this[int index]
        {
            get { return useLimitation[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return useLimitation.Count; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "useLimitation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> useLimitation
        {
            get
            {
                if (_useLimitation == null) _useLimitation = new List<CharacterString_PropertyType>();
                return _useLimitation;
            }
            set { _useLimitation = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return useLimitation.GetEnumerator();
        }

        public void Add(CharacterString_PropertyType obj)
        {
            useLimitation.Add(obj);
        }

        public void Clear()
        {
            useLimitation.Clear();
        }

        public CharacterString_PropertyType Remove(int index)
        {
            CharacterString_PropertyType obj = useLimitation[index];
            useLimitation.Remove(obj);
            return obj;
        }

        public bool Remove(CharacterString_PropertyType obj)
        {
            return useLimitation.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Constraints_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Constraints_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Constraints _MD_Constraints;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Constraints_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Constraints), ElementName = "MD_Constraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Constraints MD_Constraints
        {
            get { return _MD_Constraints; }
            set { _MD_Constraints = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Constraints.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_LegalConstraints_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_LegalConstraints_Type : MD_Constraints_Type
    {
        [XmlIgnore] private List<MD_RestrictionCode_PropertyType> _accessConstraints;
        [XmlIgnore] private List<CharacterString_PropertyType> _otherConstraints;

        [XmlIgnore] private List<MD_RestrictionCode_PropertyType> _useConstraints;

        [XmlElement(Type = typeof (MD_RestrictionCode_PropertyType), ElementName = "accessConstraints",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_RestrictionCode_PropertyType> accessConstraints
        {
            get
            {
                if (_accessConstraints == null) _accessConstraints = new List<MD_RestrictionCode_PropertyType>();
                return _accessConstraints;
            }
            set { _accessConstraints = value; }
        }

        [XmlElement(Type = typeof (MD_RestrictionCode_PropertyType), ElementName = "useConstraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_RestrictionCode_PropertyType> useConstraints
        {
            get
            {
                if (_useConstraints == null) _useConstraints = new List<MD_RestrictionCode_PropertyType>();
                return _useConstraints;
            }
            set { _useConstraints = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "otherConstraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> otherConstraints
        {
            get
            {
                if (_otherConstraints == null) _otherConstraints = new List<CharacterString_PropertyType>();
                return _otherConstraints;
            }
            set { _otherConstraints = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_LegalConstraints_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_LegalConstraints_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_LegalConstraints _MD_LegalConstraints;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_LegalConstraints_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_LegalConstraints), ElementName = "MD_LegalConstraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_LegalConstraints MD_LegalConstraints
        {
            get { return _MD_LegalConstraints; }
            set { _MD_LegalConstraints = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_LegalConstraints.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_SecurityConstraints_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_SecurityConstraints_Type : MD_Constraints_Type
    {
        [XmlIgnore] private MD_ClassificationCode_PropertyType _classification;
        [XmlIgnore] private CharacterString_PropertyType _classificationSystem;
        [XmlIgnore] private CharacterString_PropertyType _handlingDescription;

        [XmlIgnore] private CharacterString_PropertyType _userNote;

        [XmlElement(Type = typeof (MD_ClassificationCode_PropertyType), ElementName = "classification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ClassificationCode_PropertyType classification
        {
            get { return _classification; }
            set { _classification = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "userNote", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType userNote
        {
            get { return _userNote; }
            set { _userNote = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "classificationSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType classificationSystem
        {
            get { return _classificationSystem; }
            set { _classificationSystem = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "handlingDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType handlingDescription
        {
            get { return _handlingDescription; }
            set { _handlingDescription = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            classification.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_SecurityConstraints_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_SecurityConstraints_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_SecurityConstraints _MD_SecurityConstraints;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_SecurityConstraints_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_SecurityConstraints), ElementName = "MD_SecurityConstraints", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_SecurityConstraints MD_SecurityConstraints
        {
            get { return _MD_SecurityConstraints; }
            set { _MD_SecurityConstraints = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_SecurityConstraints.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ClassificationCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ClassificationCode_PropertyType
    {
        [XmlIgnore] private MD_ClassificationCode _MD_ClassificationCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ClassificationCode), ElementName = "MD_ClassificationCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ClassificationCode MD_ClassificationCode
        {
            get { return _MD_ClassificationCode; }
            set { _MD_ClassificationCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ClassificationCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_RestrictionCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class MD_RestrictionCode_PropertyType
    {
        [XmlIgnore] private MD_RestrictionCode _MD_RestrictionCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_RestrictionCode), ElementName = "MD_RestrictionCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_RestrictionCode MD_RestrictionCode
        {
            get { return _MD_RestrictionCode; }
            set { _MD_RestrictionCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_RestrictionCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Medium_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Medium_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<Real_PropertyType> _density;
        [XmlIgnore] private CharacterString_PropertyType _densityUnits;
        [XmlIgnore] private List<MD_MediumFormatCode_PropertyType> _mediumFormat;
        [XmlIgnore] private CharacterString_PropertyType _mediumNote;
        [XmlIgnore] private MD_MediumNameCode_PropertyType _name;
        [XmlIgnore] private Integer_PropertyType _volumes;

        [XmlElement(Type = typeof (MD_MediumNameCode_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_MediumNameCode_PropertyType name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "density", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<Real_PropertyType> density
        {
            get
            {
                if (_density == null) _density = new List<Real_PropertyType>();
                return _density;
            }
            set { _density = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "densityUnits", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType densityUnits
        {
            get { return _densityUnits; }
            set { _densityUnits = value; }
        }

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "volumes", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType volumes
        {
            get { return _volumes; }
            set { _volumes = value; }
        }

        [XmlElement(Type = typeof (MD_MediumFormatCode_PropertyType), ElementName = "mediumFormat", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_MediumFormatCode_PropertyType> mediumFormat
        {
            get
            {
                if (_mediumFormat == null) _mediumFormat = new List<MD_MediumFormatCode_PropertyType>();
                return _mediumFormat;
            }
            set { _mediumFormat = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "mediumNote", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType mediumNote
        {
            get { return _mediumNote; }
            set { _mediumNote = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Medium_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Medium_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Medium _MD_Medium;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Medium_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Medium), ElementName = "MD_Medium", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Medium MD_Medium
        {
            get { return _MD_Medium; }
            set { _MD_Medium = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Medium.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_DigitalTransferOptions_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_DigitalTransferOptions_Type : AbstractObject_Type
    {
        [XmlIgnore] private MD_Medium_PropertyType _offLine;
        [XmlIgnore] private List<CI_OnlineResource_PropertyType> _onLine;
        [XmlIgnore] private Real_PropertyType _transferSize;
        [XmlIgnore] private CharacterString_PropertyType _unitsOfDistribution;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "unitsOfDistribution",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType unitsOfDistribution
        {
            get { return _unitsOfDistribution; }
            set { _unitsOfDistribution = value; }
        }

        [XmlElement(Type = typeof (Real_PropertyType), ElementName = "transferSize", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Real_PropertyType transferSize
        {
            get { return _transferSize; }
            set { _transferSize = value; }
        }

        [XmlElement(Type = typeof (CI_OnlineResource_PropertyType), ElementName = "onLine", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_OnlineResource_PropertyType> onLine
        {
            get
            {
                if (_onLine == null) _onLine = new List<CI_OnlineResource_PropertyType>();
                return _onLine;
            }
            set { _onLine = value; }
        }

        [XmlElement(Type = typeof (MD_Medium_PropertyType), ElementName = "offLine", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Medium_PropertyType offLine
        {
            get { return _offLine; }
            set { _offLine = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_DigitalTransferOptions_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_DigitalTransferOptions_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_DigitalTransferOptions _MD_DigitalTransferOptions;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_DigitalTransferOptions_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_DigitalTransferOptions), ElementName = "MD_DigitalTransferOptions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_DigitalTransferOptions MD_DigitalTransferOptions
        {
            get { return _MD_DigitalTransferOptions; }
            set { _MD_DigitalTransferOptions = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_DigitalTransferOptions.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_StandardOrderProcess_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_StandardOrderProcess_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _fees;
        [XmlIgnore] private CharacterString_PropertyType _orderingInstructions;

        [XmlIgnore] private DateTime_PropertyType _plannedAvailableDateTime;
        [XmlIgnore] private CharacterString_PropertyType _turnaround;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "fees", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType fees
        {
            get { return _fees; }
            set { _fees = value; }
        }

        [XmlElement(Type = typeof (DateTime_PropertyType), ElementName = "plannedAvailableDateTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DateTime_PropertyType plannedAvailableDateTime
        {
            get { return _plannedAvailableDateTime; }
            set { _plannedAvailableDateTime = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "orderingInstructions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType orderingInstructions
        {
            get { return _orderingInstructions; }
            set { _orderingInstructions = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "turnaround", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType turnaround
        {
            get { return _turnaround; }
            set { _turnaround = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_StandardOrderProcess_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_StandardOrderProcess_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_StandardOrderProcess _MD_StandardOrderProcess;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_StandardOrderProcess_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_StandardOrderProcess), ElementName = "MD_StandardOrderProcess", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_StandardOrderProcess MD_StandardOrderProcess
        {
            get { return _MD_StandardOrderProcess; }
            set { _MD_StandardOrderProcess = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_StandardOrderProcess.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Distributor_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Distributor_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<MD_StandardOrderProcess_PropertyType> _distributionOrderProcess;
        [XmlIgnore] private CI_ResponsibleParty_PropertyType _distributorContact;
        [XmlIgnore] private List<MD_Format_PropertyType> _distributorFormat;
        [XmlIgnore] private List<MD_DigitalTransferOptions_PropertyType> _distributorTransferOptions;

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "distributorContact",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_ResponsibleParty_PropertyType distributorContact
        {
            get { return _distributorContact; }
            set { _distributorContact = value; }
        }

        [XmlElement(Type = typeof (MD_StandardOrderProcess_PropertyType), ElementName = "distributionOrderProcess",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_StandardOrderProcess_PropertyType> distributionOrderProcess
        {
            get
            {
                if (_distributionOrderProcess == null)
                    _distributionOrderProcess = new List<MD_StandardOrderProcess_PropertyType>();
                return _distributionOrderProcess;
            }
            set { _distributionOrderProcess = value; }
        }

        [XmlElement(Type = typeof (MD_Format_PropertyType), ElementName = "distributorFormat", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Format_PropertyType> distributorFormat
        {
            get
            {
                if (_distributorFormat == null) _distributorFormat = new List<MD_Format_PropertyType>();
                return _distributorFormat;
            }
            set { _distributorFormat = value; }
        }

        [XmlElement(Type = typeof (MD_DigitalTransferOptions_PropertyType), ElementName = "distributorTransferOptions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_DigitalTransferOptions_PropertyType> distributorTransferOptions
        {
            get
            {
                if (_distributorTransferOptions == null)
                    _distributorTransferOptions = new List<MD_DigitalTransferOptions_PropertyType>();
                return _distributorTransferOptions;
            }
            set { _distributorTransferOptions = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            distributorContact.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Distributor_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Distributor_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Distributor _MD_Distributor;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Distributor_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Distributor), ElementName = "MD_Distributor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Distributor MD_Distributor
        {
            get { return _MD_Distributor; }
            set { _MD_Distributor = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Distributor.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Distribution_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Distribution_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<MD_Format_PropertyType> _distributionFormat;

        [XmlIgnore] private List<MD_Distributor_PropertyType> _distributor;

        [XmlIgnore] private List<MD_DigitalTransferOptions_PropertyType> _transferOptions;

        [XmlElement(Type = typeof (MD_Format_PropertyType), ElementName = "distributionFormat", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Format_PropertyType> distributionFormat
        {
            get
            {
                if (_distributionFormat == null) _distributionFormat = new List<MD_Format_PropertyType>();
                return _distributionFormat;
            }
            set { _distributionFormat = value; }
        }

        [XmlElement(Type = typeof (MD_Distributor_PropertyType), ElementName = "distributor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Distributor_PropertyType> distributor
        {
            get
            {
                if (_distributor == null) _distributor = new List<MD_Distributor_PropertyType>();
                return _distributor;
            }
            set { _distributor = value; }
        }

        [XmlElement(Type = typeof (MD_DigitalTransferOptions_PropertyType), ElementName = "transferOptions",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_DigitalTransferOptions_PropertyType> transferOptions
        {
            get
            {
                if (_transferOptions == null) _transferOptions = new List<MD_DigitalTransferOptions_PropertyType>();
                return _transferOptions;
            }
            set { _transferOptions = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Distribution_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Distribution_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Distribution _MD_Distribution;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Distribution_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Distribution), ElementName = "MD_Distribution", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Distribution MD_Distribution
        {
            get { return _MD_Distribution; }
            set { _MD_Distribution = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Distribution.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Format_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Format_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _amendmentNumber;
        [XmlIgnore] private CharacterString_PropertyType _fileDecompressionTechnique;
        [XmlIgnore] private List<MD_Distributor_PropertyType> _formatDistributor;
        [XmlIgnore] private CharacterString_PropertyType _name;
        [XmlIgnore] private CharacterString_PropertyType _specification;

        [XmlIgnore] private CharacterString_PropertyType _version;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "name", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType name
        {
            get { return _name; }
            set { _name = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "version", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType version
        {
            get { return _version; }
            set { _version = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "amendmentNumber", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType amendmentNumber
        {
            get { return _amendmentNumber; }
            set { _amendmentNumber = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "specification", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType specification
        {
            get { return _specification; }
            set { _specification = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "fileDecompressionTechnique",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType fileDecompressionTechnique
        {
            get { return _fileDecompressionTechnique; }
            set { _fileDecompressionTechnique = value; }
        }

        [XmlElement(Type = typeof (MD_Distributor_PropertyType), ElementName = "formatDistributor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Distributor_PropertyType> formatDistributor
        {
            get
            {
                if (_formatDistributor == null) _formatDistributor = new List<MD_Distributor_PropertyType>();
                return _formatDistributor;
            }
            set { _formatDistributor = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            name.MakeSchemaCompliant();
            version.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Format_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Format_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Format _MD_Format;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Format_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Format), ElementName = "MD_Format", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Format MD_Format
        {
            get { return _MD_Format; }
            set { _MD_Format = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Format.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_DistributionUnits_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_DistributionUnits_PropertyType
    {
        [XmlIgnore] private MD_DistributionUnits _MD_DistributionUnits;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_DistributionUnits), ElementName = "MD_DistributionUnits", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_DistributionUnits MD_DistributionUnits
        {
            get { return _MD_DistributionUnits; }
            set { _MD_DistributionUnits = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_DistributionUnits.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_MediumFormatCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_MediumFormatCode_PropertyType
    {
        [XmlIgnore] private MD_MediumFormatCode _MD_MediumFormatCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_MediumFormatCode), ElementName = "MD_MediumFormatCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_MediumFormatCode MD_MediumFormatCode
        {
            get { return _MD_MediumFormatCode; }
            set { _MD_MediumFormatCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_MediumFormatCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_MediumNameCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_MediumNameCode_PropertyType
    {
        [XmlIgnore] private MD_MediumNameCode _MD_MediumNameCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_MediumNameCode), ElementName = "MD_MediumNameCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_MediumNameCode MD_MediumNameCode
        {
            get { return _MD_MediumNameCode; }
            set { _MD_MediumNameCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_MediumNameCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_MaintenanceInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_MaintenanceInformation_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<CI_ResponsibleParty_PropertyType> _contact;
        [XmlIgnore] private Date_PropertyType _dateOfNextUpdate;
        [XmlIgnore] private MD_MaintenanceFrequencyCode_PropertyType _maintenanceAndUpdateFrequency;
        [XmlIgnore] private List<CharacterString_PropertyType> _maintenanceNote;
        [XmlIgnore] private List<MD_ScopeCode_PropertyType> _updateScope;
        [XmlIgnore] private List<MD_ScopeDescription_PropertyType> _updateScopeDescription;
        [XmlIgnore] private TM_PeriodDuration_PropertyType _userDefinedMaintenanceFrequency;

        [XmlElement(Type = typeof (MD_MaintenanceFrequencyCode_PropertyType),
            ElementName = "maintenanceAndUpdateFrequency", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_MaintenanceFrequencyCode_PropertyType maintenanceAndUpdateFrequency
        {
            get { return _maintenanceAndUpdateFrequency; }
            set { _maintenanceAndUpdateFrequency = value; }
        }

        [XmlElement(Type = typeof (Date_PropertyType), ElementName = "dateOfNextUpdate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Date_PropertyType dateOfNextUpdate
        {
            get { return _dateOfNextUpdate; }
            set { _dateOfNextUpdate = value; }
        }

        [XmlElement(Type = typeof (TM_PeriodDuration_PropertyType), ElementName = "userDefinedMaintenanceFrequency",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public TM_PeriodDuration_PropertyType userDefinedMaintenanceFrequency
        {
            get { return _userDefinedMaintenanceFrequency; }
            set { _userDefinedMaintenanceFrequency = value; }
        }

        [XmlElement(Type = typeof (MD_ScopeCode_PropertyType), ElementName = "updateScope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ScopeCode_PropertyType> updateScope
        {
            get
            {
                if (_updateScope == null) _updateScope = new List<MD_ScopeCode_PropertyType>();
                return _updateScope;
            }
            set { _updateScope = value; }
        }

        [XmlElement(Type = typeof (MD_ScopeDescription_PropertyType), ElementName = "updateScopeDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ScopeDescription_PropertyType> updateScopeDescription
        {
            get
            {
                if (_updateScopeDescription == null)
                    _updateScopeDescription = new List<MD_ScopeDescription_PropertyType>();
                return _updateScopeDescription;
            }
            set { _updateScopeDescription = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "maintenanceNote", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> maintenanceNote
        {
            get
            {
                if (_maintenanceNote == null) _maintenanceNote = new List<CharacterString_PropertyType>();
                return _maintenanceNote;
            }
            set { _maintenanceNote = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "contact", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_ResponsibleParty_PropertyType> contact
        {
            get
            {
                if (_contact == null) _contact = new List<CI_ResponsibleParty_PropertyType>();
                return _contact;
            }
            set { _contact = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            maintenanceAndUpdateFrequency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_MaintenanceInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_MaintenanceInformation_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_MaintenanceInformation _MD_MaintenanceInformation;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_MaintenanceInformation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_MaintenanceInformation), ElementName = "MD_MaintenanceInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_MaintenanceInformation MD_MaintenanceInformation
        {
            get { return _MD_MaintenanceInformation; }
            set { _MD_MaintenanceInformation = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_MaintenanceInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ScopeDescription_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_ScopeDescription_Type
    {
        [XmlIgnore] private List<ObjectReference_PropertyType> _attributeInstances;
        [XmlIgnore] private List<ObjectReference_PropertyType> _attributes;
        [XmlIgnore] private CharacterString_PropertyType _dataset;
        [XmlIgnore] private List<ObjectReference_PropertyType> _featureInstances;

        [XmlIgnore] private List<ObjectReference_PropertyType> _features;
        [XmlIgnore] private CharacterString_PropertyType _other;

        [XmlElement(Type = typeof (ObjectReference_PropertyType), ElementName = "attributes", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReference_PropertyType> attributes
        {
            get
            {
                if (_attributes == null) _attributes = new List<ObjectReference_PropertyType>();
                return _attributes;
            }
            set { _attributes = value; }
        }

        [XmlElement(Type = typeof (ObjectReference_PropertyType), ElementName = "features", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReference_PropertyType> features
        {
            get
            {
                if (_features == null) _features = new List<ObjectReference_PropertyType>();
                return _features;
            }
            set { _features = value; }
        }

        [XmlElement(Type = typeof (ObjectReference_PropertyType), ElementName = "featureInstances", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReference_PropertyType> featureInstances
        {
            get
            {
                if (_featureInstances == null) _featureInstances = new List<ObjectReference_PropertyType>();
                return _featureInstances;
            }
            set { _featureInstances = value; }
        }

        [XmlElement(Type = typeof (ObjectReference_PropertyType), ElementName = "attributeInstances", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReference_PropertyType> attributeInstances
        {
            get
            {
                if (_attributeInstances == null) _attributeInstances = new List<ObjectReference_PropertyType>();
                return _attributeInstances;
            }
            set { _attributeInstances = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "dataset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType dataset
        {
            get { return _dataset; }
            set { _dataset = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "other", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType other
        {
            get { return _other; }
            set { _other = value; }
        }

        public void MakeSchemaCompliant()
        {
            foreach (ObjectReference_PropertyType _c in attributes) _c.MakeSchemaCompliant();
            foreach (ObjectReference_PropertyType _c in features) _c.MakeSchemaCompliant();
            foreach (ObjectReference_PropertyType _c in featureInstances) _c.MakeSchemaCompliant();
            foreach (ObjectReference_PropertyType _c in attributeInstances) _c.MakeSchemaCompliant();
            dataset.MakeSchemaCompliant();
            other.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ScopeDescription_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ScopeDescription_PropertyType
    {
        [XmlIgnore] private MD_ScopeDescription _MD_ScopeDescription;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ScopeDescription), ElementName = "MD_ScopeDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ScopeDescription MD_ScopeDescription
        {
            get { return _MD_ScopeDescription; }
            set { _MD_ScopeDescription = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ScopeDescription.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_MaintenanceFrequencyCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_MaintenanceFrequencyCode_PropertyType
    {
        [XmlIgnore] private MD_MaintenanceFrequencyCode _MD_MaintenanceFrequencyCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_MaintenanceFrequencyCode), ElementName = "MD_MaintenanceFrequencyCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_MaintenanceFrequencyCode MD_MaintenanceFrequencyCode
        {
            get { return _MD_MaintenanceFrequencyCode; }
            set { _MD_MaintenanceFrequencyCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_MaintenanceFrequencyCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ScopeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_ScopeCode_PropertyType
    {
        [XmlIgnore] private MD_ScopeCode _MD_ScopeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ScopeCode), ElementName = "MD_ScopeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ScopeCode MD_ScopeCode
        {
            get { return _MD_ScopeCode; }
            set { _MD_ScopeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ScopeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractMD_Identification_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractMD_Identification_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _abstract;
        [XmlIgnore] private List<MD_AggregateInformation_PropertyType> _aggregationInfo;
        [XmlIgnore] private CI_Citation_PropertyType _citation;
        [XmlIgnore] private List<CharacterString_PropertyType> _credit;
        [XmlIgnore] private List<MD_Keywords_PropertyType> _descriptiveKeywords;
        [XmlIgnore] private List<MD_BrowseGraphic_PropertyType> _graphicOverview;
        [XmlIgnore] private List<CI_ResponsibleParty_PropertyType> _pointOfContact;
        [XmlIgnore] private CharacterString_PropertyType _purpose;
        [XmlIgnore] private List<MD_Constraints_PropertyType> _resourceConstraints;
        [XmlIgnore] private List<MD_Format_PropertyType> _resourceFormat;
        [XmlIgnore] private List<MD_MaintenanceInformation_PropertyType> _resourceMaintenance;
        [XmlIgnore] private List<MD_Usage_PropertyType> _resourceSpecificUsage;
        [XmlIgnore] private List<MD_ProgressCode_PropertyType> _status;

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "citation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation_PropertyType citation
        {
            get { return _citation; }
            set { _citation = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "abstract", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType @abstract
        {
            get { return _abstract; }
            set { _abstract = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "purpose", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType purpose
        {
            get { return _purpose; }
            set { _purpose = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "credit", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> credit
        {
            get
            {
                if (_credit == null) _credit = new List<CharacterString_PropertyType>();
                return _credit;
            }
            set { _credit = value; }
        }

        [XmlElement(Type = typeof (MD_ProgressCode_PropertyType), ElementName = "status", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ProgressCode_PropertyType> status
        {
            get
            {
                if (_status == null) _status = new List<MD_ProgressCode_PropertyType>();
                return _status;
            }
            set { _status = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "pointOfContact", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_ResponsibleParty_PropertyType> pointOfContact
        {
            get
            {
                if (_pointOfContact == null) _pointOfContact = new List<CI_ResponsibleParty_PropertyType>();
                return _pointOfContact;
            }
            set { _pointOfContact = value; }
        }

        [XmlElement(Type = typeof (MD_MaintenanceInformation_PropertyType), ElementName = "resourceMaintenance",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_MaintenanceInformation_PropertyType> resourceMaintenance
        {
            get
            {
                if (_resourceMaintenance == null)
                    _resourceMaintenance = new List<MD_MaintenanceInformation_PropertyType>();
                return _resourceMaintenance;
            }
            set { _resourceMaintenance = value; }
        }

        [XmlElement(Type = typeof (MD_BrowseGraphic_PropertyType), ElementName = "graphicOverview", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_BrowseGraphic_PropertyType> graphicOverview
        {
            get
            {
                if (_graphicOverview == null) _graphicOverview = new List<MD_BrowseGraphic_PropertyType>();
                return _graphicOverview;
            }
            set { _graphicOverview = value; }
        }

        [XmlElement(Type = typeof (MD_Format_PropertyType), ElementName = "resourceFormat", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Format_PropertyType> resourceFormat
        {
            get
            {
                if (_resourceFormat == null) _resourceFormat = new List<MD_Format_PropertyType>();
                return _resourceFormat;
            }
            set { _resourceFormat = value; }
        }

        [XmlElement(Type = typeof (MD_Keywords_PropertyType), ElementName = "descriptiveKeywords", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Keywords_PropertyType> descriptiveKeywords
        {
            get
            {
                if (_descriptiveKeywords == null) _descriptiveKeywords = new List<MD_Keywords_PropertyType>();
                return _descriptiveKeywords;
            }
            set { _descriptiveKeywords = value; }
        }

        [XmlElement(Type = typeof (MD_Usage_PropertyType), ElementName = "resourceSpecificUsage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Usage_PropertyType> resourceSpecificUsage
        {
            get
            {
                if (_resourceSpecificUsage == null) _resourceSpecificUsage = new List<MD_Usage_PropertyType>();
                return _resourceSpecificUsage;
            }
            set { _resourceSpecificUsage = value; }
        }

        [XmlElement(Type = typeof (MD_Constraints_PropertyType), ElementName = "resourceConstraints", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Constraints_PropertyType> resourceConstraints
        {
            get
            {
                if (_resourceConstraints == null) _resourceConstraints = new List<MD_Constraints_PropertyType>();
                return _resourceConstraints;
            }
            set { _resourceConstraints = value; }
        }

        [XmlElement(Type = typeof (MD_AggregateInformation_PropertyType), ElementName = "aggregationInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_AggregateInformation_PropertyType> aggregationInfo
        {
            get
            {
                if (_aggregationInfo == null) _aggregationInfo = new List<MD_AggregateInformation_PropertyType>();
                return _aggregationInfo;
            }
            set { _aggregationInfo = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            citation.MakeSchemaCompliant();
            @abstract.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Identification_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (MD_DataIdentification_Type))]
    [XmlInclude(typeof (MD_ServiceIdentification_Type))]
    public class MD_Identification_PropertyType
    {
        [XmlIgnore] private AbstractMD_Identification _AbstractMD_Identification;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Identification_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractMD_Identification), ElementName = "AbstractMD_Identification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractMD_Identification AbstractMD_Identification
        {
            get { return _AbstractMD_Identification; }
            set { _AbstractMD_Identification = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractMD_Identification.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_BrowseGraphic_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_BrowseGraphic_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _fileDescription;
        [XmlIgnore] private CharacterString_PropertyType _fileName;
        [XmlIgnore] private CharacterString_PropertyType _fileType;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "fileName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType fileName
        {
            get { return _fileName; }
            set { _fileName = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "fileDescription", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType fileDescription
        {
            get { return _fileDescription; }
            set { _fileDescription = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "fileType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType fileType
        {
            get { return _fileType; }
            set { _fileType = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            fileName.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_BrowseGraphic_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_BrowseGraphic_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_BrowseGraphic _MD_BrowseGraphic;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_BrowseGraphic_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_BrowseGraphic), ElementName = "MD_BrowseGraphic", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_BrowseGraphic MD_BrowseGraphic
        {
            get { return _MD_BrowseGraphic; }
            set { _MD_BrowseGraphic = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_BrowseGraphic.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_DataIdentification_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_DataIdentification_Type : AbstractMD_Identification_Type
    {
        [XmlIgnore] private List<MD_CharacterSetCode_PropertyType> _characterSet;
        [XmlIgnore] private CharacterString_PropertyType _environmentDescription;
        [XmlIgnore] private List<EX_Extent_PropertyType> _extent;
        [XmlIgnore] private List<CharacterString_PropertyType> _language;
        [XmlIgnore] private List<MD_SpatialRepresentationTypeCode_PropertyType> _spatialRepresentationType;

        [XmlIgnore] private List<MD_Resolution_PropertyType> _spatialResolution;
        [XmlIgnore] private CharacterString_PropertyType _supplementalInformation;
        [XmlIgnore] private List<MD_TopicCategoryCode_PropertyType> _topicCategory;

        [XmlElement(Type = typeof (MD_SpatialRepresentationTypeCode_PropertyType),
            ElementName = "spatialRepresentationType", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_SpatialRepresentationTypeCode_PropertyType> spatialRepresentationType
        {
            get
            {
                if (_spatialRepresentationType == null)
                    _spatialRepresentationType = new List<MD_SpatialRepresentationTypeCode_PropertyType>();
                return _spatialRepresentationType;
            }
            set { _spatialRepresentationType = value; }
        }

        [XmlElement(Type = typeof (MD_Resolution_PropertyType), ElementName = "spatialResolution", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Resolution_PropertyType> spatialResolution
        {
            get
            {
                if (_spatialResolution == null) _spatialResolution = new List<MD_Resolution_PropertyType>();
                return _spatialResolution;
            }
            set { _spatialResolution = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "language", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> language
        {
            get
            {
                if (_language == null) _language = new List<CharacterString_PropertyType>();
                return _language;
            }
            set { _language = value; }
        }

        [XmlElement(Type = typeof (MD_CharacterSetCode_PropertyType), ElementName = "characterSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_CharacterSetCode_PropertyType> characterSet
        {
            get
            {
                if (_characterSet == null) _characterSet = new List<MD_CharacterSetCode_PropertyType>();
                return _characterSet;
            }
            set { _characterSet = value; }
        }

        [XmlElement(Type = typeof (MD_TopicCategoryCode_PropertyType), ElementName = "topicCategory", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_TopicCategoryCode_PropertyType> topicCategory
        {
            get
            {
                if (_topicCategory == null) _topicCategory = new List<MD_TopicCategoryCode_PropertyType>();
                return _topicCategory;
            }
            set { _topicCategory = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "environmentDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType environmentDescription
        {
            get { return _environmentDescription; }
            set { _environmentDescription = value; }
        }

        [XmlElement(Type = typeof (EX_Extent_PropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_Extent_PropertyType> extent
        {
            get
            {
                if (_extent == null) _extent = new List<EX_Extent_PropertyType>();
                return _extent;
            }
            set { _extent = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "supplementalInformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType supplementalInformation
        {
            get { return _supplementalInformation; }
            set { _supplementalInformation = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CharacterString_PropertyType _c in language) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_DataIdentification_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_DataIdentification_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_DataIdentification _MD_DataIdentification;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_DataIdentification_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_DataIdentification), ElementName = "MD_DataIdentification", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_DataIdentification MD_DataIdentification
        {
            get { return _MD_DataIdentification; }
            set { _MD_DataIdentification = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_DataIdentification.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ServiceIdentification_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_ServiceIdentification_Type : AbstractMD_Identification_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ServiceIdentification_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_ServiceIdentification_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_ServiceIdentification _MD_ServiceIdentification;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_ServiceIdentification_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ServiceIdentification), ElementName = "MD_ServiceIdentification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ServiceIdentification MD_ServiceIdentification
        {
            get { return _MD_ServiceIdentification; }
            set { _MD_ServiceIdentification = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ServiceIdentification.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_RepresentativeFraction_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_RepresentativeFraction_Type : AbstractObject_Type
    {
        [XmlIgnore] private Integer_PropertyType _denominator;

        [XmlElement(Type = typeof (Integer_PropertyType), ElementName = "denominator", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Integer_PropertyType denominator
        {
            get { return _denominator; }
            set { _denominator = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            denominator.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_RepresentativeFraction_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_RepresentativeFraction_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_RepresentativeFraction _MD_RepresentativeFraction;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_RepresentativeFraction_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_RepresentativeFraction), ElementName = "MD_RepresentativeFraction",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_RepresentativeFraction MD_RepresentativeFraction
        {
            get { return _MD_RepresentativeFraction; }
            set { _MD_RepresentativeFraction = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_RepresentativeFraction.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Usage_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Usage_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _specificUsage;

        [XmlIgnore] private DateTime_PropertyType _usageDateTime;
        [XmlIgnore] private List<CI_ResponsibleParty_PropertyType> _userContactInfo;

        [XmlIgnore] private CharacterString_PropertyType _userDeterminedLimitations;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "specificUsage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType specificUsage
        {
            get { return _specificUsage; }
            set { _specificUsage = value; }
        }

        [XmlElement(Type = typeof (DateTime_PropertyType), ElementName = "usageDateTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DateTime_PropertyType usageDateTime
        {
            get { return _usageDateTime; }
            set { _usageDateTime = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "userDeterminedLimitations",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType userDeterminedLimitations
        {
            get { return _userDeterminedLimitations; }
            set { _userDeterminedLimitations = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "userContactInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_ResponsibleParty_PropertyType> userContactInfo
        {
            get
            {
                if (_userContactInfo == null) _userContactInfo = new List<CI_ResponsibleParty_PropertyType>();
                return _userContactInfo;
            }
            set { _userContactInfo = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            specificUsage.MakeSchemaCompliant();
            foreach (CI_ResponsibleParty_PropertyType _c in userContactInfo) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Usage_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Usage_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Usage _MD_Usage;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Usage_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Usage), ElementName = "MD_Usage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Usage MD_Usage
        {
            get { return _MD_Usage; }
            set { _MD_Usage = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Usage.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Keywords_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Keywords_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<CharacterString_PropertyType> _keyword;
        [XmlIgnore] private CI_Citation_PropertyType _thesaurusName;

        [XmlIgnore] private MD_KeywordTypeCode_PropertyType _type;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "keyword", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> keyword
        {
            get
            {
                if (_keyword == null) _keyword = new List<CharacterString_PropertyType>();
                return _keyword;
            }
            set { _keyword = value; }
        }

        [XmlElement(Type = typeof (MD_KeywordTypeCode_PropertyType), ElementName = "type", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_KeywordTypeCode_PropertyType type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "thesaurusName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation_PropertyType thesaurusName
        {
            get { return _thesaurusName; }
            set { _thesaurusName = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CharacterString_PropertyType _c in keyword) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Keywords_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Keywords_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Keywords _MD_Keywords;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Keywords_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Keywords), ElementName = "MD_Keywords", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Keywords MD_Keywords
        {
            get { return _MD_Keywords; }
            set { _MD_Keywords = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Keywords.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Association_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Association_Type : AbstractObject_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Association_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Association_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_Association _DS_Association;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_Association_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_Association), ElementName = "DS_Association", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_Association DS_Association
        {
            get { return _DS_Association; }
            set { _DS_Association = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_Association.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_AggregateInformation_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_AggregateInformation_Type : AbstractObject_Type
    {
        [XmlIgnore] private MD_Identifier_PropertyType _aggregateDataSetIdentifier;
        [XmlIgnore] private CI_Citation_PropertyType _aggregateDataSetName;
        [XmlIgnore] private DS_AssociationTypeCode_PropertyType _associationType;
        [XmlIgnore] private DS_InitiativeTypeCode_PropertyType _initiativeType;

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "aggregateDataSetName", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation_PropertyType aggregateDataSetName
        {
            get { return _aggregateDataSetName; }
            set { _aggregateDataSetName = value; }
        }

        [XmlElement(Type = typeof (MD_Identifier_PropertyType), ElementName = "aggregateDataSetIdentifier",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Identifier_PropertyType aggregateDataSetIdentifier
        {
            get { return _aggregateDataSetIdentifier; }
            set { _aggregateDataSetIdentifier = value; }
        }

        [XmlElement(Type = typeof (DS_AssociationTypeCode_PropertyType), ElementName = "associationType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_AssociationTypeCode_PropertyType associationType
        {
            get { return _associationType; }
            set { _associationType = value; }
        }

        [XmlElement(Type = typeof (DS_InitiativeTypeCode_PropertyType), ElementName = "initiativeType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_InitiativeTypeCode_PropertyType initiativeType
        {
            get { return _initiativeType; }
            set { _initiativeType = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            associationType.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_AggregateInformation_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_AggregateInformation_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_AggregateInformation _MD_AggregateInformation;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_AggregateInformation_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_AggregateInformation), ElementName = "MD_AggregateInformation", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_AggregateInformation MD_AggregateInformation
        {
            get { return _MD_AggregateInformation; }
            set { _MD_AggregateInformation = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_AggregateInformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Resolution_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Resolution_Type
    {
        [XmlIgnore] private Distance_PropertyType _distance;
        [XmlIgnore] private MD_RepresentativeFraction_PropertyType _equivalentScale;

        [XmlElement(Type = typeof (MD_RepresentativeFraction_PropertyType), ElementName = "equivalentScale",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_RepresentativeFraction_PropertyType equivalentScale
        {
            get { return _equivalentScale; }
            set { _equivalentScale = value; }
        }

        [XmlElement(Type = typeof (Distance_PropertyType), ElementName = "distance", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Distance_PropertyType distance
        {
            get { return _distance; }
            set { _distance = value; }
        }

        public void MakeSchemaCompliant()
        {
            equivalentScale.MakeSchemaCompliant();
            distance.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Resolution_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Resolution_PropertyType
    {
        [XmlIgnore] private MD_Resolution _MD_Resolution;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Resolution), ElementName = "MD_Resolution", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Resolution MD_Resolution
        {
            get { return _MD_Resolution; }
            set { _MD_Resolution = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Resolution.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_TopicCategoryCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_TopicCategoryCode_PropertyType
    {
        [XmlIgnore] private MD_TopicCategoryCode_Type _MD_TopicCategoryCode;

        [XmlIgnore] public bool _MD_TopicCategoryCodeSpecified;
        [XmlIgnore] private string _nilReason;


        public MD_TopicCategoryCode_PropertyType()
        {
            _MD_TopicCategoryCodeSpecified = true;
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(ElementName = "MD_TopicCategoryCode", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_TopicCategoryCode_Type MD_TopicCategoryCode
        {
            get { return _MD_TopicCategoryCode; }
            set
            {
                _MD_TopicCategoryCode = value;
                _MD_TopicCategoryCodeSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "MD_CharacterSetCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class MD_CharacterSetCode_PropertyType
    {
        [XmlIgnore] private MD_CharacterSetCode _MD_CharacterSetCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_CharacterSetCode), ElementName = "MD_CharacterSetCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_CharacterSetCode MD_CharacterSetCode
        {
            get { return _MD_CharacterSetCode; }
            set { _MD_CharacterSetCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_CharacterSetCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_SpatialRepresentationTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd")
    , Serializable]
    public class MD_SpatialRepresentationTypeCode_PropertyType
    {
        [XmlIgnore] private MD_SpatialRepresentationTypeCode _MD_SpatialRepresentationTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_SpatialRepresentationTypeCode), ElementName = "MD_SpatialRepresentationTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_SpatialRepresentationTypeCode MD_SpatialRepresentationTypeCode
        {
            get { return _MD_SpatialRepresentationTypeCode; }
            set { _MD_SpatialRepresentationTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_SpatialRepresentationTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_ProgressCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_ProgressCode_PropertyType
    {
        [XmlIgnore] private MD_ProgressCode _MD_ProgressCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_ProgressCode), ElementName = "MD_ProgressCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ProgressCode MD_ProgressCode
        {
            get { return _MD_ProgressCode; }
            set { _MD_ProgressCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_ProgressCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_KeywordTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class MD_KeywordTypeCode_PropertyType
    {
        [XmlIgnore] private MD_KeywordTypeCode _MD_KeywordTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_KeywordTypeCode), ElementName = "MD_KeywordTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_KeywordTypeCode MD_KeywordTypeCode
        {
            get { return _MD_KeywordTypeCode; }
            set { _MD_KeywordTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_KeywordTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_AssociationTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DS_AssociationTypeCode_PropertyType
    {
        [XmlIgnore] private DS_AssociationTypeCode _DS_AssociationTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_AssociationTypeCode), ElementName = "DS_AssociationTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_AssociationTypeCode DS_AssociationTypeCode
        {
            get { return _DS_AssociationTypeCode; }
            set { _DS_AssociationTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_AssociationTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_InitiativeTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DS_InitiativeTypeCode_PropertyType
    {
        [XmlIgnore] private DS_InitiativeTypeCode _DS_InitiativeTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_InitiativeTypeCode), ElementName = "DS_InitiativeTypeCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_InitiativeTypeCode DS_InitiativeTypeCode
        {
            get { return _DS_InitiativeTypeCode; }
            set { _DS_InitiativeTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_InitiativeTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_ProcessStep_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_ProcessStep_Type : AbstractObject_Type
    {
        [XmlIgnore] private DateTime_PropertyType _dateTime;
        [XmlIgnore] private CharacterString_PropertyType _description;
        [XmlIgnore] private List<CI_ResponsibleParty_PropertyType> _processor;

        [XmlIgnore] private CharacterString_PropertyType _rationale;
        [XmlIgnore] private List<LI_Source_PropertyType> _source;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "rationale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType rationale
        {
            get { return _rationale; }
            set { _rationale = value; }
        }

        [XmlElement(Type = typeof (DateTime_PropertyType), ElementName = "dateTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DateTime_PropertyType @dateTime
        {
            get { return _dateTime; }
            set { _dateTime = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "processor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_ResponsibleParty_PropertyType> processor
        {
            get
            {
                if (_processor == null) _processor = new List<CI_ResponsibleParty_PropertyType>();
                return _processor;
            }
            set { _processor = value; }
        }

        [XmlElement(Type = typeof (LI_Source_PropertyType), ElementName = "source", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LI_Source_PropertyType> source
        {
            get
            {
                if (_source == null) _source = new List<LI_Source_PropertyType>();
                return _source;
            }
            set { _source = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            description.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_ProcessStep_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_ProcessStep_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private LI_ProcessStep _LI_ProcessStep;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public LI_ProcessStep_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LI_ProcessStep), ElementName = "LI_ProcessStep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LI_ProcessStep LI_ProcessStep
        {
            get { return _LI_ProcessStep; }
            set { _LI_ProcessStep = value; }
        }

        public void MakeSchemaCompliant()
        {
            LI_ProcessStep.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_Source_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_Source_Type : AbstractObject_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _description;

        [XmlIgnore] private MD_RepresentativeFraction_PropertyType _scaleDenominator;
        [XmlIgnore] private CI_Citation_PropertyType _sourceCitation;
        [XmlIgnore] private List<EX_Extent_PropertyType> _sourceExtent;

        [XmlIgnore] private MD_ReferenceSystem_PropertyType _sourceReferenceSystem;
        [XmlIgnore] private List<LI_ProcessStep_PropertyType> _sourceStep;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (MD_RepresentativeFraction_PropertyType), ElementName = "scaleDenominator",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_RepresentativeFraction_PropertyType scaleDenominator
        {
            get { return _scaleDenominator; }
            set { _scaleDenominator = value; }
        }

        [XmlElement(Type = typeof (MD_ReferenceSystem_PropertyType), ElementName = "sourceReferenceSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ReferenceSystem_PropertyType sourceReferenceSystem
        {
            get { return _sourceReferenceSystem; }
            set { _sourceReferenceSystem = value; }
        }

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "sourceCitation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation_PropertyType sourceCitation
        {
            get { return _sourceCitation; }
            set { _sourceCitation = value; }
        }

        [XmlElement(Type = typeof (EX_Extent_PropertyType), ElementName = "sourceExtent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<EX_Extent_PropertyType> sourceExtent
        {
            get
            {
                if (_sourceExtent == null) _sourceExtent = new List<EX_Extent_PropertyType>();
                return _sourceExtent;
            }
            set { _sourceExtent = value; }
        }

        [XmlElement(Type = typeof (LI_ProcessStep_PropertyType), ElementName = "sourceStep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LI_ProcessStep_PropertyType> sourceStep
        {
            get
            {
                if (_sourceStep == null) _sourceStep = new List<LI_ProcessStep_PropertyType>();
                return _sourceStep;
            }
            set { _sourceStep = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_Source_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_Source_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private LI_Source _LI_Source;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public LI_Source_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LI_Source), ElementName = "LI_Source", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LI_Source LI_Source
        {
            get { return _LI_Source; }
            set { _LI_Source = value; }
        }

        public void MakeSchemaCompliant()
        {
            LI_Source.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_Lineage_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_Lineage_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<LI_ProcessStep_PropertyType> _processStep;
        [XmlIgnore] private List<LI_Source_PropertyType> _source;
        [XmlIgnore] private CharacterString_PropertyType _statement;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "statement", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType statement
        {
            get { return _statement; }
            set { _statement = value; }
        }

        [XmlElement(Type = typeof (LI_ProcessStep_PropertyType), ElementName = "processStep", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LI_ProcessStep_PropertyType> processStep
        {
            get
            {
                if (_processStep == null) _processStep = new List<LI_ProcessStep_PropertyType>();
                return _processStep;
            }
            set { _processStep = value; }
        }

        [XmlElement(Type = typeof (LI_Source_PropertyType), ElementName = "source", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LI_Source_PropertyType> source
        {
            get
            {
                if (_source == null) _source = new List<LI_Source_PropertyType>();
                return _source;
            }
            set { _source = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LI_Lineage_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LI_Lineage_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private LI_Lineage _LI_Lineage;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public LI_Lineage_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LI_Lineage), ElementName = "LI_Lineage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LI_Lineage LI_Lineage
        {
            get { return _LI_Lineage; }
            set { _LI_Lineage = value; }
        }

        public void MakeSchemaCompliant()
        {
            LI_Lineage.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_ConformanceResult_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_ConformanceResult_Type : AbstractDQ_Result_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _explanation;
        [XmlIgnore] private Boolean_PropertyType _pass;
        [XmlIgnore] private CI_Citation_PropertyType _specification;

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "specification", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation_PropertyType specification
        {
            get { return _specification; }
            set { _specification = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "explanation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType explanation
        {
            get { return _explanation; }
            set { _explanation = value; }
        }

        [XmlElement(Type = typeof (Boolean_PropertyType), ElementName = "pass", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Boolean_PropertyType pass
        {
            get { return _pass; }
            set { _pass = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            specification.MakeSchemaCompliant();
            explanation.MakeSchemaCompliant();
            pass.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_ConformanceResult_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_ConformanceResult_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_ConformanceResult _DQ_ConformanceResult;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_ConformanceResult_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_ConformanceResult), ElementName = "DQ_ConformanceResult", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_ConformanceResult DQ_ConformanceResult
        {
            get { return _DQ_ConformanceResult; }
            set { _DQ_ConformanceResult = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_ConformanceResult.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_QuantitativeResult_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_QuantitativeResult_Type : AbstractDQ_Result_Type
    {
        [XmlIgnore] private CharacterString_PropertyType _errorStatistic;
        [XmlIgnore] private List<Record_PropertyType> _value;
        [XmlIgnore] private RecordType_PropertyType _valueType;

        [XmlIgnore] private UnitOfMeasure_PropertyType _valueUnit;

        [XmlElement(Type = typeof (RecordType_PropertyType), ElementName = "valueType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public RecordType_PropertyType valueType
        {
            get { return _valueType; }
            set { _valueType = value; }
        }

        [XmlElement(Type = typeof (UnitOfMeasure_PropertyType), ElementName = "valueUnit", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public UnitOfMeasure_PropertyType valueUnit
        {
            get { return _valueUnit; }
            set { _valueUnit = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "errorStatistic", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType errorStatistic
        {
            get { return _errorStatistic; }
            set { _errorStatistic = value; }
        }

        [XmlElement(Type = typeof (Record_PropertyType), ElementName = "value", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<Record_PropertyType> value
        {
            get
            {
                if (_value == null) _value = new List<Record_PropertyType>();
                return _value;
            }
            set { _value = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            valueUnit.MakeSchemaCompliant();
            foreach (Record_PropertyType _c in value) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_QuantitativeResult_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_QuantitativeResult_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_QuantitativeResult _DQ_QuantitativeResult;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_QuantitativeResult_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_QuantitativeResult), ElementName = "DQ_QuantitativeResult", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_QuantitativeResult DQ_QuantitativeResult
        {
            get { return _DQ_QuantitativeResult; }
            set { _DQ_QuantitativeResult = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_QuantitativeResult.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_Result_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractDQ_Result_Type : AbstractObject_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_Result_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (DQ_ConformanceResult_Type))]
    [XmlInclude(typeof (DQ_QuantitativeResult_Type))]
    public class DQ_Result_PropertyType
    {
        [XmlIgnore] private AbstractDQ_Result _AbstractDQ_Result;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_Result_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_Result), ElementName = "AbstractDQ_Result", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_Result AbstractDQ_Result
        {
            get { return _AbstractDQ_Result; }
            set { _AbstractDQ_Result = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDQ_Result.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_TemporalValidity_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_TemporalValidity_Type : AbstractDQ_TemporalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_TemporalValidity_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_TemporalValidity_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_TemporalValidity _DQ_TemporalValidity;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_TemporalValidity_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_TemporalValidity), ElementName = "DQ_TemporalValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_TemporalValidity DQ_TemporalValidity
        {
            get { return _DQ_TemporalValidity; }
            set { _DQ_TemporalValidity = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_TemporalValidity.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_TemporalConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_TemporalConsistency_Type : AbstractDQ_TemporalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_TemporalConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_TemporalConsistency_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_TemporalConsistency _DQ_TemporalConsistency;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_TemporalConsistency_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_TemporalConsistency), ElementName = "DQ_TemporalConsistency", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_TemporalConsistency DQ_TemporalConsistency
        {
            get { return _DQ_TemporalConsistency; }
            set { _DQ_TemporalConsistency = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_TemporalConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_AccuracyOfATimeMeasurement_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_AccuracyOfATimeMeasurement_Type : AbstractDQ_TemporalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_AccuracyOfATimeMeasurement_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_AccuracyOfATimeMeasurement_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_AccuracyOfATimeMeasurement _DQ_AccuracyOfATimeMeasurement;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_AccuracyOfATimeMeasurement_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_AccuracyOfATimeMeasurement), ElementName = "DQ_AccuracyOfATimeMeasurement",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_AccuracyOfATimeMeasurement DQ_AccuracyOfATimeMeasurement
        {
            get { return _DQ_AccuracyOfATimeMeasurement; }
            set { _DQ_AccuracyOfATimeMeasurement = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_AccuracyOfATimeMeasurement.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_QuantitativeAttributeAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_QuantitativeAttributeAccuracy_Type : AbstractDQ_ThematicAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_QuantitativeAttributeAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd")
    , Serializable]
    public class DQ_QuantitativeAttributeAccuracy_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_QuantitativeAttributeAccuracy _DQ_QuantitativeAttributeAccuracy;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_QuantitativeAttributeAccuracy_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_QuantitativeAttributeAccuracy), ElementName = "DQ_QuantitativeAttributeAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_QuantitativeAttributeAccuracy DQ_QuantitativeAttributeAccuracy
        {
            get { return _DQ_QuantitativeAttributeAccuracy; }
            set { _DQ_QuantitativeAttributeAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_QuantitativeAttributeAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_NonQuantitativeAttributeAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_NonQuantitativeAttributeAccuracy_Type : AbstractDQ_ThematicAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_NonQuantitativeAttributeAccuracy_PropertyType",
        Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_NonQuantitativeAttributeAccuracy_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_NonQuantitativeAttributeAccuracy _DQ_NonQuantitativeAttributeAccuracy;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_NonQuantitativeAttributeAccuracy_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_NonQuantitativeAttributeAccuracy),
            ElementName = "DQ_NonQuantitativeAttributeAccuracy", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_NonQuantitativeAttributeAccuracy DQ_NonQuantitativeAttributeAccuracy
        {
            get { return _DQ_NonQuantitativeAttributeAccuracy; }
            set { _DQ_NonQuantitativeAttributeAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_NonQuantitativeAttributeAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_ThematicClassificationCorrectness_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_ThematicClassificationCorrectness_Type : AbstractDQ_ThematicAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_ThematicClassificationCorrectness_PropertyType",
        Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_ThematicClassificationCorrectness_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_ThematicClassificationCorrectness _DQ_ThematicClassificationCorrectness;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_ThematicClassificationCorrectness_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_ThematicClassificationCorrectness),
            ElementName = "DQ_ThematicClassificationCorrectness", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_ThematicClassificationCorrectness DQ_ThematicClassificationCorrectness
        {
            get { return _DQ_ThematicClassificationCorrectness; }
            set { _DQ_ThematicClassificationCorrectness = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_ThematicClassificationCorrectness.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_RelativeInternalPositionalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_RelativeInternalPositionalAccuracy_Type : AbstractDQ_PositionalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_RelativeInternalPositionalAccuracy_PropertyType",
        Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_RelativeInternalPositionalAccuracy_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_RelativeInternalPositionalAccuracy _DQ_RelativeInternalPositionalAccuracy;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_RelativeInternalPositionalAccuracy_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_RelativeInternalPositionalAccuracy),
            ElementName = "DQ_RelativeInternalPositionalAccuracy", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_RelativeInternalPositionalAccuracy DQ_RelativeInternalPositionalAccuracy
        {
            get { return _DQ_RelativeInternalPositionalAccuracy; }
            set { _DQ_RelativeInternalPositionalAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_RelativeInternalPositionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_GriddedDataPositionalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_GriddedDataPositionalAccuracy_Type : AbstractDQ_PositionalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_GriddedDataPositionalAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd")
    , Serializable]
    public class DQ_GriddedDataPositionalAccuracy_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_GriddedDataPositionalAccuracy _DQ_GriddedDataPositionalAccuracy;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_GriddedDataPositionalAccuracy_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_GriddedDataPositionalAccuracy), ElementName = "DQ_GriddedDataPositionalAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_GriddedDataPositionalAccuracy DQ_GriddedDataPositionalAccuracy
        {
            get { return _DQ_GriddedDataPositionalAccuracy; }
            set { _DQ_GriddedDataPositionalAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_GriddedDataPositionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_AbsoluteExternalPositionalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_AbsoluteExternalPositionalAccuracy_Type : AbstractDQ_PositionalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_AbsoluteExternalPositionalAccuracy_PropertyType",
        Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_AbsoluteExternalPositionalAccuracy_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_AbsoluteExternalPositionalAccuracy _DQ_AbsoluteExternalPositionalAccuracy;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_AbsoluteExternalPositionalAccuracy_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_AbsoluteExternalPositionalAccuracy),
            ElementName = "DQ_AbsoluteExternalPositionalAccuracy", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_AbsoluteExternalPositionalAccuracy DQ_AbsoluteExternalPositionalAccuracy
        {
            get { return _DQ_AbsoluteExternalPositionalAccuracy; }
            set { _DQ_AbsoluteExternalPositionalAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_AbsoluteExternalPositionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_TopologicalConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_TopologicalConsistency_Type : AbstractDQ_LogicalConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_TopologicalConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_TopologicalConsistency_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_TopologicalConsistency _DQ_TopologicalConsistency;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_TopologicalConsistency_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_TopologicalConsistency), ElementName = "DQ_TopologicalConsistency",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_TopologicalConsistency DQ_TopologicalConsistency
        {
            get { return _DQ_TopologicalConsistency; }
            set { _DQ_TopologicalConsistency = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_TopologicalConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_FormatConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_FormatConsistency_Type : AbstractDQ_LogicalConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_FormatConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_FormatConsistency_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_FormatConsistency _DQ_FormatConsistency;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_FormatConsistency_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_FormatConsistency), ElementName = "DQ_FormatConsistency", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_FormatConsistency DQ_FormatConsistency
        {
            get { return _DQ_FormatConsistency; }
            set { _DQ_FormatConsistency = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_FormatConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_DomainConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_DomainConsistency_Type : AbstractDQ_LogicalConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_DomainConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_DomainConsistency_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_DomainConsistency _DQ_DomainConsistency;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_DomainConsistency_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_DomainConsistency), ElementName = "DQ_DomainConsistency", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_DomainConsistency DQ_DomainConsistency
        {
            get { return _DQ_DomainConsistency; }
            set { _DQ_DomainConsistency = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_DomainConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_ConceptualConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_ConceptualConsistency_Type : AbstractDQ_LogicalConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_ConceptualConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_ConceptualConsistency_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_ConceptualConsistency _DQ_ConceptualConsistency;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_ConceptualConsistency_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_ConceptualConsistency), ElementName = "DQ_ConceptualConsistency",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_ConceptualConsistency DQ_ConceptualConsistency
        {
            get { return _DQ_ConceptualConsistency; }
            set { _DQ_ConceptualConsistency = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_ConceptualConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_CompletenessOmission_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_CompletenessOmission_Type : AbstractDQ_Completeness_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_CompletenessOmission_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_CompletenessOmission_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_CompletenessOmission _DQ_CompletenessOmission;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_CompletenessOmission_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_CompletenessOmission), ElementName = "DQ_CompletenessOmission", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_CompletenessOmission DQ_CompletenessOmission
        {
            get { return _DQ_CompletenessOmission; }
            set { _DQ_CompletenessOmission = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_CompletenessOmission.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_CompletenessCommission_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_CompletenessCommission_Type : AbstractDQ_Completeness_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_CompletenessCommission_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_CompletenessCommission_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_CompletenessCommission _DQ_CompletenessCommission;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_CompletenessCommission_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_CompletenessCommission), ElementName = "DQ_CompletenessCommission",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_CompletenessCommission DQ_CompletenessCommission
        {
            get { return _DQ_CompletenessCommission; }
            set { _DQ_CompletenessCommission = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_CompletenessCommission.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_TemporalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractDQ_TemporalAccuracy_Type : AbstractDQ_Element_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_TemporalAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (DQ_AccuracyOfATimeMeasurement_Type))]
    [XmlInclude(typeof (DQ_TemporalConsistency_Type))]
    [XmlInclude(typeof (DQ_TemporalValidity_Type))]
    public class DQ_TemporalAccuracy_PropertyType
    {
        [XmlIgnore] private AbstractDQ_TemporalAccuracy _AbstractDQ_TemporalAccuracy;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_TemporalAccuracy_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_TemporalAccuracy), ElementName = "AbstractDQ_TemporalAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_TemporalAccuracy AbstractDQ_TemporalAccuracy
        {
            get { return _AbstractDQ_TemporalAccuracy; }
            set { _AbstractDQ_TemporalAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDQ_TemporalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_ThematicAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractDQ_ThematicAccuracy_Type : AbstractDQ_Element_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_ThematicAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (DQ_NonQuantitativeAttributeAccuracy_Type))]
    [XmlInclude(typeof (DQ_QuantitativeAttributeAccuracy_Type))]
    [XmlInclude(typeof (DQ_ThematicClassificationCorrectness_Type))]
    public class DQ_ThematicAccuracy_PropertyType
    {
        [XmlIgnore] private AbstractDQ_ThematicAccuracy _AbstractDQ_ThematicAccuracy;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_ThematicAccuracy_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_ThematicAccuracy), ElementName = "AbstractDQ_ThematicAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_ThematicAccuracy AbstractDQ_ThematicAccuracy
        {
            get { return _AbstractDQ_ThematicAccuracy; }
            set { _AbstractDQ_ThematicAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDQ_ThematicAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_PositionalAccuracy_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_PositionalAccuracy_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (DQ_RelativeInternalPositionalAccuracy_Type))]
    [XmlInclude(typeof (DQ_AbsoluteExternalPositionalAccuracy_Type))]
    [XmlInclude(typeof (DQ_GriddedDataPositionalAccuracy_Type))]
    public class DQ_PositionalAccuracy_PropertyType
    {
        [XmlIgnore] private AbstractDQ_PositionalAccuracy _AbstractDQ_PositionalAccuracy;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_PositionalAccuracy_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_PositionalAccuracy), ElementName = "AbstractDQ_PositionalAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy AbstractDQ_PositionalAccuracy
        {
            get { return _AbstractDQ_PositionalAccuracy; }
            set { _AbstractDQ_PositionalAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDQ_PositionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_LogicalConsistency_Type", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public abstract class AbstractDQ_LogicalConsistency_Type : AbstractDQ_Element_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_LogicalConsistency_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    [XmlInclude(typeof (DQ_FormatConsistency_Type))]
    [XmlInclude(typeof (DQ_ConceptualConsistency_Type))]
    [XmlInclude(typeof (DQ_TopologicalConsistency_Type))]
    [XmlInclude(typeof (DQ_DomainConsistency_Type))]
    public class DQ_LogicalConsistency_PropertyType
    {
        [XmlIgnore] private AbstractDQ_LogicalConsistency _AbstractDQ_LogicalConsistency;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_LogicalConsistency_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_LogicalConsistency), ElementName = "AbstractDQ_LogicalConsistency",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_LogicalConsistency AbstractDQ_LogicalConsistency
        {
            get { return _AbstractDQ_LogicalConsistency; }
            set { _AbstractDQ_LogicalConsistency = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDQ_LogicalConsistency.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_Completeness_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractDQ_Completeness_Type : AbstractDQ_Element_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_Completeness_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (DQ_CompletenessCommission_Type))]
    [XmlInclude(typeof (DQ_CompletenessOmission_Type))]
    public class DQ_Completeness_PropertyType
    {
        [XmlIgnore] private AbstractDQ_Completeness _AbstractDQ_Completeness;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_Completeness_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_Completeness), ElementName = "AbstractDQ_Completeness", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_Completeness AbstractDQ_Completeness
        {
            get { return _AbstractDQ_Completeness; }
            set { _AbstractDQ_Completeness = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDQ_Completeness.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDQ_Element_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractDQ_Element_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<DateTime_PropertyType> _dateTime;
        [XmlIgnore] private CharacterString_PropertyType _evaluationMethodDescription;
        [XmlIgnore] private DQ_EvaluationMethodTypeCode_PropertyType _evaluationMethodType;
        [XmlIgnore] private CI_Citation_PropertyType _evaluationProcedure;
        [XmlIgnore] private CharacterString_PropertyType _measureDescription;
        [XmlIgnore] private MD_Identifier_PropertyType _measureIdentification;
        [XmlIgnore] private List<CharacterString_PropertyType> _nameOfMeasure;
        [XmlIgnore] private List<DQ_Result_PropertyType> _result;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "nameOfMeasure", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> nameOfMeasure
        {
            get
            {
                if (_nameOfMeasure == null) _nameOfMeasure = new List<CharacterString_PropertyType>();
                return _nameOfMeasure;
            }
            set { _nameOfMeasure = value; }
        }

        [XmlElement(Type = typeof (MD_Identifier_PropertyType), ElementName = "measureIdentification",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Identifier_PropertyType measureIdentification
        {
            get { return _measureIdentification; }
            set { _measureIdentification = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "measureDescription", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType measureDescription
        {
            get { return _measureDescription; }
            set { _measureDescription = value; }
        }

        [XmlElement(Type = typeof (DQ_EvaluationMethodTypeCode_PropertyType), ElementName = "evaluationMethodType",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodType
        {
            get { return _evaluationMethodType; }
            set { _evaluationMethodType = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "evaluationMethodDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType evaluationMethodDescription
        {
            get { return _evaluationMethodDescription; }
            set { _evaluationMethodDescription = value; }
        }

        [XmlElement(Type = typeof (CI_Citation_PropertyType), ElementName = "evaluationProcedure", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation_PropertyType evaluationProcedure
        {
            get { return _evaluationProcedure; }
            set { _evaluationProcedure = value; }
        }

        [XmlElement(Type = typeof (DateTime_PropertyType), ElementName = "dateTime", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DateTime_PropertyType> dateTime
        {
            get
            {
                if (_dateTime == null) _dateTime = new List<DateTime_PropertyType>();
                return _dateTime;
            }
            set { _dateTime = value; }
        }

        [XmlElement(Type = typeof (DQ_Result_PropertyType), ElementName = "result", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DQ_Result_PropertyType> result
        {
            get
            {
                if (_result == null) _result = new List<DQ_Result_PropertyType>();
                return _result;
            }
            set { _result = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DQ_Result_PropertyType _c in result) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_Element_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (AbstractDQ_PositionalAccuracy_Type))]
    [XmlInclude(typeof (AbstractDQ_LogicalConsistency_Type))]
    [XmlInclude(typeof (AbstractDQ_Completeness_Type))]
    [XmlInclude(typeof (AbstractDQ_TemporalAccuracy_Type))]
    [XmlInclude(typeof (AbstractDQ_ThematicAccuracy_Type))]
    public class DQ_Element_PropertyType
    {
        [XmlIgnore] private AbstractDQ_Element _AbstractDQ_Element;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_Element_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_Element), ElementName = "AbstractDQ_Element", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_Element AbstractDQ_Element
        {
            get { return _AbstractDQ_Element; }
            set { _AbstractDQ_Element = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDQ_Element.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_DataQuality_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_DataQuality_Type : AbstractObject_Type
    {
        [XmlIgnore] private LI_Lineage_PropertyType _lineage;
        [XmlIgnore] private List<DQ_Element_PropertyType> _report;
        [XmlIgnore] private DQ_Scope_PropertyType _scope;

        [XmlElement(Type = typeof (DQ_Scope_PropertyType), ElementName = "scope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_Scope_PropertyType scope
        {
            get { return _scope; }
            set { _scope = value; }
        }

        [XmlElement(Type = typeof (DQ_Element_PropertyType), ElementName = "report", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DQ_Element_PropertyType> report
        {
            get
            {
                if (_report == null) _report = new List<DQ_Element_PropertyType>();
                return _report;
            }
            set { _report = value; }
        }

        [XmlElement(Type = typeof (LI_Lineage_PropertyType), ElementName = "lineage", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LI_Lineage_PropertyType lineage
        {
            get { return _lineage; }
            set { _lineage = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            scope.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_DataQuality_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_DataQuality_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_DataQuality _DQ_DataQuality;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_DataQuality_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_DataQuality), ElementName = "DQ_DataQuality", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_DataQuality DQ_DataQuality
        {
            get { return _DQ_DataQuality; }
            set { _DQ_DataQuality = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_DataQuality.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_Scope_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_Scope_Type : AbstractObject_Type
    {
        [XmlIgnore] private EX_Extent_PropertyType _extent;
        [XmlIgnore] private MD_ScopeCode_PropertyType _level;
        [XmlIgnore] private List<MD_ScopeDescription_PropertyType> _levelDescription;

        [XmlElement(Type = typeof (MD_ScopeCode_PropertyType), ElementName = "level", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_ScopeCode_PropertyType level
        {
            get { return _level; }
            set { _level = value; }
        }

        [XmlElement(Type = typeof (EX_Extent_PropertyType), ElementName = "extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_Extent_PropertyType extent
        {
            get { return _extent; }
            set { _extent = value; }
        }

        [XmlElement(Type = typeof (MD_ScopeDescription_PropertyType), ElementName = "levelDescription",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ScopeDescription_PropertyType> levelDescription
        {
            get
            {
                if (_levelDescription == null) _levelDescription = new List<MD_ScopeDescription_PropertyType>();
                return _levelDescription;
            }
            set { _levelDescription = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            level.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_Scope_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DQ_Scope_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DQ_Scope _DQ_Scope;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DQ_Scope_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_Scope), ElementName = "DQ_Scope", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_Scope DQ_Scope
        {
            get { return _DQ_Scope; }
            set { _DQ_Scope = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_Scope.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DQ_EvaluationMethodTypeCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DQ_EvaluationMethodTypeCode_PropertyType
    {
        [XmlIgnore] private DQ_EvaluationMethodTypeCode _DQ_EvaluationMethodTypeCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DQ_EvaluationMethodTypeCode), ElementName = "DQ_EvaluationMethodTypeCode",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DQ_EvaluationMethodTypeCode DQ_EvaluationMethodTypeCode
        {
            get { return _DQ_EvaluationMethodTypeCode; }
            set { _DQ_EvaluationMethodTypeCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            DQ_EvaluationMethodTypeCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_FreeText_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_FreeText_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<LocalisedCharacterString_PropertyType> _textGroup;

        [XmlIgnore]
        public LocalisedCharacterString_PropertyType this[int index]
        {
            get { return textGroup[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return textGroup.Count; }
        }

        [XmlElement(Type = typeof (LocalisedCharacterString_PropertyType), ElementName = "textGroup", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LocalisedCharacterString_PropertyType> textGroup
        {
            get
            {
                if (_textGroup == null) _textGroup = new List<LocalisedCharacterString_PropertyType>();
                return _textGroup;
            }
            set { _textGroup = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return textGroup.GetEnumerator();
        }

        public void Add(LocalisedCharacterString_PropertyType obj)
        {
            textGroup.Add(obj);
        }

        public void Clear()
        {
            textGroup.Clear();
        }

        public LocalisedCharacterString_PropertyType Remove(int index)
        {
            LocalisedCharacterString_PropertyType obj = textGroup[index];
            textGroup.Remove(obj);
            return obj;
        }

        public bool Remove(LocalisedCharacterString_PropertyType obj)
        {
            return textGroup.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (LocalisedCharacterString_PropertyType _c in textGroup) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_FreeText_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_FreeText_PropertyType : CharacterString_PropertyType
    {
        [XmlIgnore] private PT_FreeText _PT_FreeText;

        [XmlElement(Type = typeof (PT_FreeText), ElementName = "PT_FreeText", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public PT_FreeText PT_FreeText
        {
            get { return _PT_FreeText; }
            set { _PT_FreeText = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            PT_FreeText.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_Locale_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_Locale_Type : AbstractObject_Type
    {
        [XmlIgnore] private MD_CharacterSetCode_PropertyType _characterEncoding;
        [XmlIgnore] private Country_PropertyType _country;
        [XmlIgnore] private LanguageCode_PropertyType _languageCode;

        [XmlElement(Type = typeof (LanguageCode_PropertyType), ElementName = "languageCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LanguageCode_PropertyType languageCode
        {
            get { return _languageCode; }
            set { _languageCode = value; }
        }

        [XmlElement(Type = typeof (Country_PropertyType), ElementName = "country", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Country_PropertyType country
        {
            get { return _country; }
            set { _country = value; }
        }

        [XmlElement(Type = typeof (MD_CharacterSetCode_PropertyType), ElementName = "characterEncoding",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_CharacterSetCode_PropertyType characterEncoding
        {
            get { return _characterEncoding; }
            set { _characterEncoding = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            languageCode.MakeSchemaCompliant();
            characterEncoding.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_Locale_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_Locale_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private PT_Locale _PT_Locale;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public PT_Locale_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (PT_Locale), ElementName = "PT_Locale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public PT_Locale PT_Locale
        {
            get { return _PT_Locale; }
            set { _PT_Locale = value; }
        }

        public void MakeSchemaCompliant()
        {
            PT_Locale.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LocalisedCharacterString_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LocalisedCharacterString_Type
    {
        [XmlIgnore] private string _id;

        [XmlIgnore] private string _locale;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlAttribute(AttributeName = "locale", DataType = "anyURI")]
        public string locale
        {
            get { return _locale; }
            set { _locale = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "LocalisedCharacterString_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class LocalisedCharacterString_PropertyType : ObjectReference_PropertyType
    {
        [XmlIgnore] private LocalisedCharacterString _LocalisedCharacterString;

        [XmlElement(Type = typeof (LocalisedCharacterString), ElementName = "LocalisedCharacterString",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LocalisedCharacterString LocalisedCharacterString
        {
            get { return _LocalisedCharacterString; }
            set { _LocalisedCharacterString = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            LocalisedCharacterString.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_LocaleContainer_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class PT_LocaleContainer_Type
    {
        [XmlIgnore] private List<CI_Date_PropertyType> _date;
        [XmlIgnore] private CharacterString_PropertyType _description;

        [XmlIgnore] private PT_Locale_PropertyType _locale;
        [XmlIgnore] private List<LocalisedCharacterString_PropertyType> _localisedString;
        [XmlIgnore] private List<CI_ResponsibleParty_PropertyType> _responsibleParty;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType description
        {
            get { return _description; }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (PT_Locale_PropertyType), ElementName = "locale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public PT_Locale_PropertyType locale
        {
            get { return _locale; }
            set { _locale = value; }
        }

        [XmlElement(Type = typeof (CI_Date_PropertyType), ElementName = "date", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_Date_PropertyType> date
        {
            get
            {
                if (_date == null) _date = new List<CI_Date_PropertyType>();
                return _date;
            }
            set { _date = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "responsibleParty",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_ResponsibleParty_PropertyType> responsibleParty
        {
            get
            {
                if (_responsibleParty == null) _responsibleParty = new List<CI_ResponsibleParty_PropertyType>();
                return _responsibleParty;
            }
            set { _responsibleParty = value; }
        }

        [XmlElement(Type = typeof (LocalisedCharacterString_PropertyType), ElementName = "localisedString",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<LocalisedCharacterString_PropertyType> localisedString
        {
            get
            {
                if (_localisedString == null) _localisedString = new List<LocalisedCharacterString_PropertyType>();
                return _localisedString;
            }
            set { _localisedString = value; }
        }

        public void MakeSchemaCompliant()
        {
            description.MakeSchemaCompliant();
            locale.MakeSchemaCompliant();
            foreach (CI_Date_PropertyType _c in date) _c.MakeSchemaCompliant();
            foreach (CI_ResponsibleParty_PropertyType _c in responsibleParty) _c.MakeSchemaCompliant();
            foreach (LocalisedCharacterString_PropertyType _c in localisedString) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PT_LocaleContainer_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable
    ]
    public class PT_LocaleContainer_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private PT_LocaleContainer _PT_LocaleContainer;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public PT_LocaleContainer_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (PT_LocaleContainer), ElementName = "PT_LocaleContainer", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public PT_LocaleContainer PT_LocaleContainer
        {
            get { return _PT_LocaleContainer; }
            set { _PT_LocaleContainer = value; }
        }

        public void MakeSchemaCompliant()
        {
            PT_LocaleContainer.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LanguageCode_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class LanguageCode_PropertyType
    {
        [XmlIgnore] private LanguageCode _LanguageCode;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (LanguageCode), ElementName = "LanguageCode", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public LanguageCode LanguageCode
        {
            get { return _LanguageCode; }
            set { _LanguageCode = value; }
        }

        public void MakeSchemaCompliant()
        {
            LanguageCode.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "Country_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class Country_PropertyType
    {
        [XmlIgnore] private Country _Country;
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (Country), ElementName = "Country", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = "http://www.isotc211.org/2005/gmd")]
        public Country Country
        {
            get { return _Country; }
            set { _Country = value; }
        }

        public void MakeSchemaCompliant()
        {
            Country.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Metadata_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Metadata_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<MD_ApplicationSchemaInformation_PropertyType> _applicationSchemaInfo;
        [XmlIgnore] private MD_CharacterSetCode_PropertyType _characterSet;
        [XmlIgnore] private List<CI_ResponsibleParty_PropertyType> _contact;
        [XmlIgnore] private List<MD_ContentInformation_PropertyType> _contentInfo;
        [XmlIgnore] private List<DQ_DataQuality_PropertyType> _dataQualityInfo;
        [XmlIgnore] private CharacterString_PropertyType _dataSetURI;
        [XmlIgnore] private Date_PropertyType _dateStamp;
        [XmlIgnore] private List<DS_DataSet_PropertyType> _describes;
        [XmlIgnore] private MD_Distribution_PropertyType _distributionInfo;
        [XmlIgnore] private List<ObjectReference_PropertyType> _featureAttribute;
        [XmlIgnore] private List<ObjectReference_PropertyType> _featureType;
        [XmlIgnore] private CharacterString_PropertyType _fileIdentifier;
        [XmlIgnore] private List<MD_ScopeCode_PropertyType> _hierarchyLevel;
        [XmlIgnore] private List<CharacterString_PropertyType> _hierarchyLevelName;
        [XmlIgnore] private List<MD_Identification_PropertyType> _identificationInfo;

        [XmlIgnore] private CharacterString_PropertyType _language;
        [XmlIgnore] private List<PT_Locale_PropertyType> _locale;
        [XmlIgnore] private List<MD_Constraints_PropertyType> _metadataConstraints;
        [XmlIgnore] private List<MD_MetadataExtensionInformation_PropertyType> _metadataExtensionInfo;
        [XmlIgnore] private MD_MaintenanceInformation_PropertyType _metadataMaintenance;
        [XmlIgnore] private CharacterString_PropertyType _metadataStandardName;
        [XmlIgnore] private CharacterString_PropertyType _metadataStandardVersion;
        [XmlIgnore] private CharacterString_PropertyType _parentIdentifier;
        [XmlIgnore] private List<MD_PortrayalCatalogueReference_PropertyType> _portrayalCatalogueInfo;
        [XmlIgnore] private List<ObjectReference_PropertyType> _propertyType;
        [XmlIgnore] private List<MD_ReferenceSystem_PropertyType> _referenceSystemInfo;
        [XmlIgnore] private List<DS_Aggregate_PropertyType> _series;
        [XmlIgnore] private List<MD_SpatialRepresentation_PropertyType> _spatialRepresentationInfo;

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "fileIdentifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType fileIdentifier
        {
            get { return _fileIdentifier; }
            set { _fileIdentifier = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "language", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType language
        {
            get { return _language; }
            set { _language = value; }
        }

        [XmlElement(Type = typeof (MD_CharacterSetCode_PropertyType), ElementName = "characterSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_CharacterSetCode_PropertyType characterSet
        {
            get { return _characterSet; }
            set { _characterSet = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "parentIdentifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType parentIdentifier
        {
            get { return _parentIdentifier; }
            set { _parentIdentifier = value; }
        }

        [XmlElement(Type = typeof (MD_ScopeCode_PropertyType), ElementName = "hierarchyLevel", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ScopeCode_PropertyType> hierarchyLevel
        {
            get
            {
                if (_hierarchyLevel == null) _hierarchyLevel = new List<MD_ScopeCode_PropertyType>();
                return _hierarchyLevel;
            }
            set { _hierarchyLevel = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "hierarchyLevelName", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CharacterString_PropertyType> hierarchyLevelName
        {
            get
            {
                if (_hierarchyLevelName == null) _hierarchyLevelName = new List<CharacterString_PropertyType>();
                return _hierarchyLevelName;
            }
            set { _hierarchyLevelName = value; }
        }

        [XmlElement(Type = typeof (CI_ResponsibleParty_PropertyType), ElementName = "contact", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<CI_ResponsibleParty_PropertyType> contact
        {
            get
            {
                if (_contact == null) _contact = new List<CI_ResponsibleParty_PropertyType>();
                return _contact;
            }
            set { _contact = value; }
        }

        [XmlElement(Type = typeof (Date_PropertyType), ElementName = "dateStamp", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public Date_PropertyType dateStamp
        {
            get { return _dateStamp; }
            set { _dateStamp = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "metadataStandardName",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType metadataStandardName
        {
            get { return _metadataStandardName; }
            set { _metadataStandardName = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "metadataStandardVersion",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType metadataStandardVersion
        {
            get { return _metadataStandardVersion; }
            set { _metadataStandardVersion = value; }
        }

        [XmlElement(Type = typeof (CharacterString_PropertyType), ElementName = "dataSetURI", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CharacterString_PropertyType dataSetURI
        {
            get { return _dataSetURI; }
            set { _dataSetURI = value; }
        }

        [XmlElement(Type = typeof (PT_Locale_PropertyType), ElementName = "locale", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<PT_Locale_PropertyType> locale
        {
            get
            {
                if (_locale == null) _locale = new List<PT_Locale_PropertyType>();
                return _locale;
            }
            set { _locale = value; }
        }

        [XmlElement(Type = typeof (MD_SpatialRepresentation_PropertyType), ElementName = "spatialRepresentationInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_SpatialRepresentation_PropertyType> spatialRepresentationInfo
        {
            get
            {
                if (_spatialRepresentationInfo == null)
                    _spatialRepresentationInfo = new List<MD_SpatialRepresentation_PropertyType>();
                return _spatialRepresentationInfo;
            }
            set { _spatialRepresentationInfo = value; }
        }

        [XmlElement(Type = typeof (MD_ReferenceSystem_PropertyType), ElementName = "referenceSystemInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ReferenceSystem_PropertyType> referenceSystemInfo
        {
            get
            {
                if (_referenceSystemInfo == null) _referenceSystemInfo = new List<MD_ReferenceSystem_PropertyType>();
                return _referenceSystemInfo;
            }
            set { _referenceSystemInfo = value; }
        }

        [XmlElement(Type = typeof (MD_MetadataExtensionInformation_PropertyType), ElementName = "metadataExtensionInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_MetadataExtensionInformation_PropertyType> metadataExtensionInfo
        {
            get
            {
                if (_metadataExtensionInfo == null)
                    _metadataExtensionInfo = new List<MD_MetadataExtensionInformation_PropertyType>();
                return _metadataExtensionInfo;
            }
            set { _metadataExtensionInfo = value; }
        }

        [XmlElement(Type = typeof (MD_Identification_PropertyType), ElementName = "identificationInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Identification_PropertyType> identificationInfo
        {
            get
            {
                if (_identificationInfo == null) _identificationInfo = new List<MD_Identification_PropertyType>();
                return _identificationInfo;
            }
            set { _identificationInfo = value; }
        }

        [XmlElement(Type = typeof (MD_ContentInformation_PropertyType), ElementName = "contentInfo", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ContentInformation_PropertyType> contentInfo
        {
            get
            {
                if (_contentInfo == null) _contentInfo = new List<MD_ContentInformation_PropertyType>();
                return _contentInfo;
            }
            set { _contentInfo = value; }
        }

        [XmlElement(Type = typeof (MD_Distribution_PropertyType), ElementName = "distributionInfo", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Distribution_PropertyType distributionInfo
        {
            get { return _distributionInfo; }
            set { _distributionInfo = value; }
        }

        [XmlElement(Type = typeof (DQ_DataQuality_PropertyType), ElementName = "dataQualityInfo", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DQ_DataQuality_PropertyType> dataQualityInfo
        {
            get
            {
                if (_dataQualityInfo == null) _dataQualityInfo = new List<DQ_DataQuality_PropertyType>();
                return _dataQualityInfo;
            }
            set { _dataQualityInfo = value; }
        }

        [XmlElement(Type = typeof (MD_PortrayalCatalogueReference_PropertyType), ElementName = "portrayalCatalogueInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_PortrayalCatalogueReference_PropertyType> portrayalCatalogueInfo
        {
            get
            {
                if (_portrayalCatalogueInfo == null)
                    _portrayalCatalogueInfo = new List<MD_PortrayalCatalogueReference_PropertyType>();
                return _portrayalCatalogueInfo;
            }
            set { _portrayalCatalogueInfo = value; }
        }

        [XmlElement(Type = typeof (MD_Constraints_PropertyType), ElementName = "metadataConstraints", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Constraints_PropertyType> metadataConstraints
        {
            get
            {
                if (_metadataConstraints == null) _metadataConstraints = new List<MD_Constraints_PropertyType>();
                return _metadataConstraints;
            }
            set { _metadataConstraints = value; }
        }

        [XmlElement(Type = typeof (MD_ApplicationSchemaInformation_PropertyType), ElementName = "applicationSchemaInfo",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_ApplicationSchemaInformation_PropertyType> applicationSchemaInfo
        {
            get
            {
                if (_applicationSchemaInfo == null)
                    _applicationSchemaInfo = new List<MD_ApplicationSchemaInformation_PropertyType>();
                return _applicationSchemaInfo;
            }
            set { _applicationSchemaInfo = value; }
        }

        [XmlElement(Type = typeof (MD_MaintenanceInformation_PropertyType), ElementName = "metadataMaintenance",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_MaintenanceInformation_PropertyType metadataMaintenance
        {
            get { return _metadataMaintenance; }
            set { _metadataMaintenance = value; }
        }

        [XmlElement(Type = typeof (DS_Aggregate_PropertyType), ElementName = "series", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_Aggregate_PropertyType> series
        {
            get
            {
                if (_series == null) _series = new List<DS_Aggregate_PropertyType>();
                return _series;
            }
            set { _series = value; }
        }

        [XmlElement(Type = typeof (DS_DataSet_PropertyType), ElementName = "describes", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_DataSet_PropertyType> describes
        {
            get
            {
                if (_describes == null) _describes = new List<DS_DataSet_PropertyType>();
                return _describes;
            }
            set { _describes = value; }
        }

        [XmlElement(Type = typeof (ObjectReference_PropertyType), ElementName = "propertyType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReference_PropertyType> propertyType
        {
            get
            {
                if (_propertyType == null) _propertyType = new List<ObjectReference_PropertyType>();
                return _propertyType;
            }
            set { _propertyType = value; }
        }

        [XmlElement(Type = typeof (ObjectReference_PropertyType), ElementName = "featureType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReference_PropertyType> featureType
        {
            get
            {
                if (_featureType == null) _featureType = new List<ObjectReference_PropertyType>();
                return _featureType;
            }
            set { _featureType = value; }
        }

        [XmlElement(Type = typeof (ObjectReference_PropertyType), ElementName = "featureAttribute", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<ObjectReference_PropertyType> featureAttribute
        {
            get
            {
                if (_featureAttribute == null) _featureAttribute = new List<ObjectReference_PropertyType>();
                return _featureAttribute;
            }
            set { _featureAttribute = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (CI_ResponsibleParty_PropertyType _c in contact) _c.MakeSchemaCompliant();
            dateStamp.MakeSchemaCompliant();
            foreach (MD_Identification_PropertyType _c in identificationInfo) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "MD_Metadata_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class MD_Metadata_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private MD_Metadata _MD_Metadata;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public MD_Metadata_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (MD_Metadata), ElementName = "MD_Metadata", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public MD_Metadata MD_Metadata
        {
            get { return _MD_Metadata; }
            set { _MD_Metadata = value; }
        }

        public void MakeSchemaCompliant()
        {
            MD_Metadata.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDS_Aggregate_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public abstract class AbstractDS_Aggregate_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<DS_DataSet_PropertyType> _composedOf;

        [XmlIgnore] private List<MD_Metadata_PropertyType> _seriesMetadata;

        [XmlIgnore] private List<DS_Aggregate_PropertyType> _subset;

        [XmlIgnore] private List<DS_Aggregate_PropertyType> _superset;

        [XmlElement(Type = typeof (DS_DataSet_PropertyType), ElementName = "composedOf", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_DataSet_PropertyType> composedOf
        {
            get
            {
                if (_composedOf == null) _composedOf = new List<DS_DataSet_PropertyType>();
                return _composedOf;
            }
            set { _composedOf = value; }
        }

        [XmlElement(Type = typeof (MD_Metadata_PropertyType), ElementName = "seriesMetadata", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Metadata_PropertyType> seriesMetadata
        {
            get
            {
                if (_seriesMetadata == null) _seriesMetadata = new List<MD_Metadata_PropertyType>();
                return _seriesMetadata;
            }
            set { _seriesMetadata = value; }
        }

        [XmlElement(Type = typeof (DS_Aggregate_PropertyType), ElementName = "subset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_Aggregate_PropertyType> subset
        {
            get
            {
                if (_subset == null) _subset = new List<DS_Aggregate_PropertyType>();
                return _subset;
            }
            set { _subset = value; }
        }

        [XmlElement(Type = typeof (DS_Aggregate_PropertyType), ElementName = "superset", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_Aggregate_PropertyType> superset
        {
            get
            {
                if (_superset == null) _superset = new List<DS_Aggregate_PropertyType>();
                return _superset;
            }
            set { _superset = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (DS_DataSet_PropertyType _c in composedOf) _c.MakeSchemaCompliant();
            foreach (MD_Metadata_PropertyType _c in seriesMetadata) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Aggregate_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    [XmlInclude(typeof (DS_OtherAggregate_Type))]
    [XmlInclude(typeof (DS_Series_Type))]
    [XmlInclude(typeof (DS_Initiative_Type))]
    public class DS_Aggregate_PropertyType
    {
        [XmlIgnore] private AbstractDS_Aggregate _AbstractDS_Aggregate;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_Aggregate_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (AbstractDS_Aggregate), ElementName = "AbstractDS_Aggregate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDS_Aggregate AbstractDS_Aggregate
        {
            get { return _AbstractDS_Aggregate; }
            set { _AbstractDS_Aggregate = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDS_Aggregate.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_DataSet_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_DataSet_Type : AbstractObject_Type
    {
        [XmlIgnore] private List<MD_Metadata_PropertyType> _has;

        [XmlIgnore] private List<DS_Aggregate_PropertyType> _partOf;

        [XmlElement(Type = typeof (MD_Metadata_PropertyType), ElementName = "has", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<MD_Metadata_PropertyType> has
        {
            get
            {
                if (_has == null) _has = new List<MD_Metadata_PropertyType>();
                return _has;
            }
            set { _has = value; }
        }

        [XmlElement(Type = typeof (DS_Aggregate_PropertyType), ElementName = "partOf", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public List<DS_Aggregate_PropertyType> partOf
        {
            get
            {
                if (_partOf == null) _partOf = new List<DS_Aggregate_PropertyType>();
                return _partOf;
            }
            set { _partOf = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (MD_Metadata_PropertyType _c in has) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_DataSet_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_DataSet_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_DataSet _DS_DataSet;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_DataSet_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_DataSet), ElementName = "DS_DataSet", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_DataSet DS_DataSet
        {
            get { return _DS_DataSet; }
            set { _DS_DataSet = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_DataSet.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_OtherAggregate_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_OtherAggregate_Type : AbstractDS_Aggregate_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_OtherAggregate_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_OtherAggregate_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_OtherAggregate _DS_OtherAggregate;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_OtherAggregate_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_OtherAggregate), ElementName = "DS_OtherAggregate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_OtherAggregate DS_OtherAggregate
        {
            get { return _DS_OtherAggregate; }
            set { _DS_OtherAggregate = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_OtherAggregate.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Series_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Series_Type : AbstractDS_Aggregate_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Series_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Series_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_Series _DS_Series;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_Series_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_Series), ElementName = "DS_Series", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_Series DS_Series
        {
            get { return _DS_Series; }
            set { _DS_Series = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_Series.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Initiative_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Initiative_Type : AbstractDS_Aggregate_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Initiative_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Initiative_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_Initiative _DS_Initiative;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_Initiative_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_Initiative), ElementName = "DS_Initiative", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_Initiative DS_Initiative
        {
            get { return _DS_Initiative; }
            set { _DS_Initiative = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_Initiative.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Platform_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Platform_Type : DS_Series_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Platform_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Platform_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_Platform _DS_Platform;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_Platform_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_Platform), ElementName = "DS_Platform", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_Platform DS_Platform
        {
            get { return _DS_Platform; }
            set { _DS_Platform = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_Platform.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Sensor_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Sensor_Type : DS_Series_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_Sensor_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_Sensor_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_Sensor _DS_Sensor;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_Sensor_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_Sensor), ElementName = "DS_Sensor", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_Sensor DS_Sensor
        {
            get { return _DS_Sensor; }
            set { _DS_Sensor = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_Sensor.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_ProductionSeries_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_ProductionSeries_Type : DS_Series_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_ProductionSeries_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"),
     Serializable]
    public class DS_ProductionSeries_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_ProductionSeries _DS_ProductionSeries;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_ProductionSeries_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_ProductionSeries), ElementName = "DS_ProductionSeries", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_ProductionSeries DS_ProductionSeries
        {
            get { return _DS_ProductionSeries; }
            set { _DS_ProductionSeries = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_ProductionSeries.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_StereoMate_Type", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_StereoMate_Type : DS_OtherAggregate_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DS_StereoMate_PropertyType", Namespace = "http://www.isotc211.org/2005/gmd"), Serializable]
    public class DS_StereoMate_PropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DS_StereoMate _DS_StereoMate;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private string _uuidref;

        public DS_StereoMate_PropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "uuidref", DataType = "string")]
        public string uuidref
        {
            get { return _uuidref; }
            set { _uuidref = value; }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlElement(Type = typeof (DS_StereoMate), ElementName = "DS_StereoMate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public DS_StereoMate DS_StereoMate
        {
            get { return _DS_StereoMate; }
            set { _DS_StereoMate = value; }
        }

        public void MakeSchemaCompliant()
        {
            DS_StereoMate.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "IdentifiedObjectType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class IdentifiedObjectType : DefinitionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCRSType : IdentifiedObjectType
    {
        [XmlIgnore] private List<domainOfValidity> _domainOfValidity;

        [XmlIgnore] private List<string> _scope;

        [XmlElement(Type = typeof (domainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<domainOfValidity> domainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new List<domainOfValidity>();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (string), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<string> scope
        {
            get
            {
                if (_scope == null) _scope = new List<string>();
                return _scope;
            }
            set { _scope = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeographicCRSType))]
    [XmlInclude(typeof (GeocentricCRSType))]
    [XmlInclude(typeof (TemporalCRSType))]
    [XmlInclude(typeof (AbstractGeneralDerivedCRSType))]
    [XmlInclude(typeof (ImageCRSType))]
    [XmlInclude(typeof (GeodeticCRSType))]
    [XmlInclude(typeof (CompoundCRSType))]
    [XmlInclude(typeof (VerticalCRSType))]
    [XmlInclude(typeof (EngineeringCRSType))]
    public class CRSPropertyType
    {
        [XmlIgnore] private AbstractCRS _AbstractCRS;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractCRS), ElementName = "AbstractCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCRS AbstractCRS
        {
            get { return _AbstractCRS; }
            set { _AbstractCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoordinateSystemAxisType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CoordinateSystemAxisType : IdentifiedObjectType
    {
        [XmlIgnore] private axisAbbrev _axisAbbrev;

        [XmlIgnore] private axisDirection _axisDirection;
        [XmlIgnore] private double _maximumValue;

        [XmlIgnore] public bool _maximumValueSpecified;

        [XmlIgnore] private double _minimumValue;

        [XmlIgnore] public bool _minimumValueSpecified;
        [XmlIgnore] private rangeMeaning _rangeMeaning;
        [XmlIgnore] private string _uom;

        [XmlAttribute(AttributeName = "uom")]
        public string uom
        {
            get { return _uom; }
            set { _uom = value; }
        }

        [XmlElement(Type = typeof (axisAbbrev), ElementName = "axisAbbrev", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public axisAbbrev axisAbbrev
        {
            get
            {
                if (_axisAbbrev == null) _axisAbbrev = new axisAbbrev();
                return _axisAbbrev;
            }
            set { _axisAbbrev = value; }
        }

        [XmlElement(Type = typeof (axisDirection), ElementName = "axisDirection", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public axisDirection axisDirection
        {
            get
            {
                if (_axisDirection == null) _axisDirection = new axisDirection();
                return _axisDirection;
            }
            set { _axisDirection = value; }
        }


        [XmlElement(ElementName = "minimumValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public double minimumValue
        {
            get { return _minimumValue; }
            set
            {
                _minimumValue = value;
                _minimumValueSpecified = true;
            }
        }


        [XmlElement(ElementName = "maximumValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "double", Namespace = Declarations.SchemaVersion)]
        public double maximumValue
        {
            get { return _maximumValue; }
            set
            {
                _maximumValue = value;
                _maximumValueSpecified = true;
            }
        }

        [XmlElement(Type = typeof (rangeMeaning), ElementName = "rangeMeaning", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public rangeMeaning rangeMeaning
        {
            get
            {
                if (_rangeMeaning == null) _rangeMeaning = new rangeMeaning();
                return _rangeMeaning;
            }
            set { _rangeMeaning = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            axisAbbrev.MakeSchemaCompliant();
            axisDirection.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoordinateSystemAxisPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CoordinateSystemAxisPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CoordinateSystemAxis _CoordinateSystemAxis;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CoordinateSystemAxisPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CoordinateSystemAxis), ElementName = "CoordinateSystemAxis", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CoordinateSystemAxis CoordinateSystemAxis
        {
            get
            {
                if (_CoordinateSystemAxis == null) _CoordinateSystemAxis = new CoordinateSystemAxis();
                return _CoordinateSystemAxis;
            }
            set { _CoordinateSystemAxis = value; }
        }

        public void MakeSchemaCompliant()
        {
            CoordinateSystemAxis.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCoordinateSystemType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCoordinateSystemType : IdentifiedObjectType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<axis> _axis;

        [XmlIgnore]
        public axis this[int index]
        {
            get { return axis[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return axis.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (axis), ElementName = "axis", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<axis> axis
        {
            get
            {
                if (_axis == null) _axis = new List<axis>();
                return _axis;
            }
            set { _axis = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return axis.GetEnumerator();
        }

        public void Add(axis obj)
        {
            axis.Add(obj);
        }

        public void Clear()
        {
            axis.Clear();
        }

        public axis Remove(int index)
        {
            axis obj = axis[index];
            axis.Remove(obj);
            return obj;
        }

        public bool Remove(axis obj)
        {
            return axis.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (axis _c in axis) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoordinateSystemPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (VerticalCSType))]
    [XmlInclude(typeof (TimeCSType))]
    [XmlInclude(typeof (LinearCSType))]
    [XmlInclude(typeof (SphericalCSType))]
    [XmlInclude(typeof (EllipsoidalCSType))]
    [XmlInclude(typeof (AffineCSType))]
    [XmlInclude(typeof (TemporalCSType))]
    [XmlInclude(typeof (UserDefinedCSType))]
    [XmlInclude(typeof (PolarCSType))]
    [XmlInclude(typeof (CylindricalCSType))]
    [XmlInclude(typeof (ObliqueCartesianCSType))]
    [XmlInclude(typeof (CartesianCSType))]
    public class CoordinateSystemPropertyType
    {
        [XmlIgnore] private AbstractCoordinateSystem _AbstractCoordinateSystem;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CoordinateSystemPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractCoordinateSystem), ElementName = "AbstractCoordinateSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCoordinateSystem AbstractCoordinateSystem
        {
            get { return _AbstractCoordinateSystem; }
            set { _AbstractCoordinateSystem = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractCoordinateSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EllipsoidalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EllipsoidalCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EllipsoidalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EllipsoidalCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EllipsoidalCS _EllipsoidalCS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public EllipsoidalCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (EllipsoidalCS), ElementName = "EllipsoidalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public EllipsoidalCS EllipsoidalCS
        {
            get
            {
                if (_EllipsoidalCS == null) _EllipsoidalCS = new EllipsoidalCS();
                return _EllipsoidalCS;
            }
            set { _EllipsoidalCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            EllipsoidalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CartesianCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CartesianCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CartesianCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CartesianCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CartesianCS _CartesianCS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CartesianCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CartesianCS), ElementName = "CartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CartesianCS CartesianCS
        {
            get
            {
                if (_CartesianCS == null) _CartesianCS = new CartesianCS();
                return _CartesianCS;
            }
            set { _CartesianCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            CartesianCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private VerticalCS _VerticalCS;

        public VerticalCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (VerticalCS), ElementName = "VerticalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VerticalCS VerticalCS
        {
            get
            {
                if (_VerticalCS == null) _VerticalCS = new VerticalCS();
                return _VerticalCS;
            }
            set { _VerticalCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            VerticalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TimeCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TimeCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TimeCS _TimeCS;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TimeCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TimeCS), ElementName = "TimeCS", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public TimeCS TimeCS
        {
            get
            {
                if (_TimeCS == null) _TimeCS = new TimeCS();
                return _TimeCS;
            }
            set { _TimeCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            TimeCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LinearCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LinearCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "LinearCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class LinearCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private LinearCS _LinearCS;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public LinearCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (LinearCS), ElementName = "LinearCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LinearCS LinearCS
        {
            get
            {
                if (_LinearCS == null) _LinearCS = new LinearCS();
                return _LinearCS;
            }
            set { _LinearCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            LinearCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UserDefinedCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class UserDefinedCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "UserDefinedCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class UserDefinedCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private UserDefinedCS _UserDefinedCS;

        public UserDefinedCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (UserDefinedCS), ElementName = "UserDefinedCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public UserDefinedCS UserDefinedCS
        {
            get
            {
                if (_UserDefinedCS == null) _UserDefinedCS = new UserDefinedCS();
                return _UserDefinedCS;
            }
            set { _UserDefinedCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            UserDefinedCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SphericalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SphericalCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SphericalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class SphericalCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private SphericalCS _SphericalCS;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public SphericalCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (SphericalCS), ElementName = "SphericalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SphericalCS SphericalCS
        {
            get
            {
                if (_SphericalCS == null) _SphericalCS = new SphericalCS();
                return _SphericalCS;
            }
            set { _SphericalCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            SphericalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PolarCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PolarCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PolarCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PolarCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private PolarCS _PolarCS;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public PolarCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (PolarCS), ElementName = "PolarCS", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public PolarCS PolarCS
        {
            get
            {
                if (_PolarCS == null) _PolarCS = new PolarCS();
                return _PolarCS;
            }
            set { _PolarCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            PolarCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CylindricalCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CylindricalCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CylindricalCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CylindricalCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CylindricalCS _CylindricalCS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CylindricalCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CylindricalCS), ElementName = "CylindricalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CylindricalCS CylindricalCS
        {
            get
            {
                if (_CylindricalCS == null) _CylindricalCS = new CylindricalCS();
                return _CylindricalCS;
            }
            set { _CylindricalCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            CylindricalCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AffineCSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AffineCSType : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AffineCSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class AffineCSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private AffineCS _AffineCS;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public AffineCSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AffineCS), ElementName = "AffineCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AffineCS AffineCS
        {
            get
            {
                if (_AffineCS == null) _AffineCS = new AffineCS();
                return _AffineCS;
            }
            set { _AffineCS = value; }
        }

        public void MakeSchemaCompliant()
        {
            AffineCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractDatumType : IdentifiedObjectType
    {
        [XmlIgnore] private anchorDefinition _anchorDefinition;
        [XmlIgnore] private domainOfValidity _domainOfValidity;
        [XmlIgnore] private DateTime _realizationEpoch;

        [XmlIgnore] public bool _realizationEpochSpecified;

        [XmlIgnore] private List<string> _scope;

        public AbstractDatumType()
        {
            _realizationEpoch = DateTime.Now;
        }

        [XmlElement(Type = typeof (domainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public domainOfValidity domainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new domainOfValidity();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (string), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<string> scope
        {
            get
            {
                if (_scope == null) _scope = new List<string>();
                return _scope;
            }
            set { _scope = value; }
        }

        [XmlElement(Type = typeof (anchorDefinition), ElementName = "anchorDefinition", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public anchorDefinition anchorDefinition
        {
            get
            {
                if (_anchorDefinition == null) _anchorDefinition = new anchorDefinition();
                return _anchorDefinition;
            }
            set { _anchorDefinition = value; }
        }


        [XmlElement(ElementName = "realizationEpoch", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "date", Namespace = Declarations.SchemaVersion)]
        public DateTime realizationEpoch
        {
            get { return _realizationEpoch; }
            set
            {
                _realizationEpoch = value;
                _realizationEpochSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime realizationEpochUtc
        {
            get { return _realizationEpoch.ToUniversalTime(); }
            set
            {
                _realizationEpoch = value.ToLocalTime();
                _realizationEpochSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (EngineeringDatumType))]
    [XmlInclude(typeof (VerticalDatumType))]
    [XmlInclude(typeof (ImageDatumType))]
    [XmlInclude(typeof (TemporalDatumBaseType))]
    [XmlInclude(typeof (GeodeticDatumType))]
    public class DatumPropertyType
    {
        [XmlIgnore] private AbstractDatum _AbstractDatum;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public DatumPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractDatum), ElementName = "AbstractDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractDatum AbstractDatum
        {
            get { return _AbstractDatum; }
            set { _AbstractDatum = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodeticDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodeticDatumType : AbstractDatumType
    {
        [XmlIgnore] private ellipsoid _ellipsoid;
        [XmlIgnore] private primeMeridian _primeMeridian;

        [XmlElement(Type = typeof (primeMeridian), ElementName = "primeMeridian", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public primeMeridian primeMeridian
        {
            get
            {
                if (_primeMeridian == null) _primeMeridian = new primeMeridian();
                return _primeMeridian;
            }
            set { _primeMeridian = value; }
        }

        [XmlElement(Type = typeof (ellipsoid), ElementName = "ellipsoid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ellipsoid ellipsoid
        {
            get
            {
                if (_ellipsoid == null) _ellipsoid = new ellipsoid();
                return _ellipsoid;
            }
            set { _ellipsoid = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            primeMeridian.MakeSchemaCompliant();
            ellipsoid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodeticDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodeticDatumPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private GeodeticDatum _GeodeticDatum;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public GeodeticDatumPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeodeticDatum), ElementName = "GeodeticDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeodeticDatum GeodeticDatum
        {
            get
            {
                if (_GeodeticDatum == null) _GeodeticDatum = new GeodeticDatum();
                return _GeodeticDatum;
            }
            set { _GeodeticDatum = value; }
        }

        public void MakeSchemaCompliant()
        {
            GeodeticDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EllipsoidType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EllipsoidType : IdentifiedObjectType
    {
        [XmlIgnore] private secondDefiningParameter _secondDefiningParameter;
        [XmlIgnore] private semiMajorAxis _semiMajorAxis;

        [XmlElement(Type = typeof (semiMajorAxis), ElementName = "semiMajorAxis", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public semiMajorAxis semiMajorAxis
        {
            get
            {
                if (_semiMajorAxis == null) _semiMajorAxis = new semiMajorAxis();
                return _semiMajorAxis;
            }
            set { _semiMajorAxis = value; }
        }

        [XmlElement(Type = typeof (secondDefiningParameter), ElementName = "secondDefiningParameter", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public secondDefiningParameter secondDefiningParameter
        {
            get
            {
                if (_secondDefiningParameter == null) _secondDefiningParameter = new secondDefiningParameter();
                return _secondDefiningParameter;
            }
            set { _secondDefiningParameter = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            semiMajorAxis.MakeSchemaCompliant();
            secondDefiningParameter.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EllipsoidPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EllipsoidPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Ellipsoid _Ellipsoid;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public EllipsoidPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Ellipsoid), ElementName = "Ellipsoid", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Ellipsoid Ellipsoid
        {
            get
            {
                if (_Ellipsoid == null) _Ellipsoid = new Ellipsoid();
                return _Ellipsoid;
            }
            set { _Ellipsoid = value; }
        }

        public void MakeSchemaCompliant()
        {
            Ellipsoid.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PrimeMeridianType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PrimeMeridianType : IdentifiedObjectType
    {
        [XmlIgnore] private greenwichLongitude _greenwichLongitude;

        [XmlElement(Type = typeof (greenwichLongitude), ElementName = "greenwichLongitude", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public greenwichLongitude greenwichLongitude
        {
            get
            {
                if (_greenwichLongitude == null) _greenwichLongitude = new greenwichLongitude();
                return _greenwichLongitude;
            }
            set { _greenwichLongitude = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            greenwichLongitude.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PrimeMeridianPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PrimeMeridianPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private PrimeMeridian _PrimeMeridian;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public PrimeMeridianPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (PrimeMeridian), ElementName = "PrimeMeridian", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PrimeMeridian PrimeMeridian
        {
            get
            {
                if (_PrimeMeridian == null) _PrimeMeridian = new PrimeMeridian();
                return _PrimeMeridian;
            }
            set { _PrimeMeridian = value; }
        }

        public void MakeSchemaCompliant()
        {
            PrimeMeridian.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EngineeringDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EngineeringDatumType : AbstractDatumType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EngineeringDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EngineeringDatumPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EngineeringDatum _EngineeringDatum;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public EngineeringDatumPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (EngineeringDatum), ElementName = "EngineeringDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public EngineeringDatum EngineeringDatum
        {
            get
            {
                if (_EngineeringDatum == null) _EngineeringDatum = new EngineeringDatum();
                return _EngineeringDatum;
            }
            set { _EngineeringDatum = value; }
        }

        public void MakeSchemaCompliant()
        {
            EngineeringDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ImageDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ImageDatumType : AbstractDatumType
    {
        [XmlIgnore] private pixelInCell _pixelInCell;

        [XmlElement(Type = typeof (pixelInCell), ElementName = "pixelInCell", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public pixelInCell pixelInCell
        {
            get
            {
                if (_pixelInCell == null) _pixelInCell = new pixelInCell();
                return _pixelInCell;
            }
            set { _pixelInCell = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            pixelInCell.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ImageDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ImageDatumPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private ImageDatum _ImageDatum;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public ImageDatumPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ImageDatum), ElementName = "ImageDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ImageDatum ImageDatum
        {
            get
            {
                if (_ImageDatum == null) _ImageDatum = new ImageDatum();
                return _ImageDatum;
            }
            set { _ImageDatum = value; }
        }

        public void MakeSchemaCompliant()
        {
            ImageDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalDatumType : AbstractDatumType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalDatumPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private VerticalDatum _VerticalDatum;

        public VerticalDatumPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (VerticalDatum), ElementName = "VerticalDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VerticalDatum VerticalDatum
        {
            get
            {
                if (_VerticalDatum == null) _VerticalDatum = new VerticalDatum();
                return _VerticalDatum;
            }
            set { _VerticalDatum = value; }
        }

        public void MakeSchemaCompliant()
        {
            VerticalDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalDatumType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalDatumType : TemporalDatumBaseType
    {
        [XmlIgnore] private DateTime _origin;

        [XmlIgnore] public bool _originSpecified;

        public TemporalDatumType()
        {
            origin = DateTime.Now;
        }


        [XmlElement(ElementName = "origin", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "dateTime",
            Namespace = Declarations.SchemaVersion)]
        public DateTime origin
        {
            get { return _origin; }
            set
            {
                _origin = value;
                _originSpecified = true;
            }
        }

        [XmlIgnore]
        public DateTime originUtc
        {
            get { return _origin.ToUniversalTime(); }
            set
            {
                _origin = value.ToLocalTime();
                _originSpecified = true;
            }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalDatumBaseType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class TemporalDatumBaseType : AbstractDatumType
    {
        [XmlIgnore] private description _description;
        [XmlIgnore] private descriptionReference _descriptionReference;
        [XmlIgnore] private domainOfValidity _domainOfValidity;
        [XmlIgnore] private string _id;
        [XmlIgnore] private identifier _identifier;

        [XmlIgnore] private List<metaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<name> _name;
        [XmlIgnore] private string _remarks;
        [XmlIgnore] private List<string> _scope;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (metaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<metaDataProperty> metaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<metaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public description description
        {
            get
            {
                if (_description == null) _description = new description();
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (descriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public descriptionReference descriptionReference
        {
            get
            {
                if (_descriptionReference == null) _descriptionReference = new descriptionReference();
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public identifier identifier
        {
            get
            {
                if (_identifier == null) _identifier = new identifier();
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<name> name
        {
            get
            {
                if (_name == null) _name = new List<name>();
                return _name;
            }
            set { _name = value; }
        }

        [XmlElement(ElementName = "remarks", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string",
            Namespace = Declarations.SchemaVersion)]
        public string remarks
        {
            get { return _remarks; }
            set { _remarks = value; }
        }

        [XmlElement(Type = typeof (domainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public domainOfValidity domainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new domainOfValidity();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (string), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<string> scope
        {
            get
            {
                if (_scope == null) _scope = new List<string>();
                return _scope;
            }
            set { _scope = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalDatumPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalDatumPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TemporalDatum _TemporalDatum;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TemporalDatumPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TemporalDatum), ElementName = "TemporalDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TemporalDatum TemporalDatum
        {
            get
            {
                if (_TemporalDatum == null) _TemporalDatum = new TemporalDatum();
                return _TemporalDatum;
            }
            set { _TemporalDatum = value; }
        }

        public void MakeSchemaCompliant()
        {
            TemporalDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractCoordinateOperationType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractCoordinateOperationType : IdentifiedObjectType
    {
        [XmlIgnore] private List<coordinateOperationAccuracy> _coordinateOperationAccuracy;
        [XmlIgnore] private domainOfValidity _domainOfValidity;
        [XmlIgnore] private string _operationVersion;

        [XmlIgnore] private List<string> _scope;
        [XmlIgnore] private sourceCRS _sourceCRS;
        [XmlIgnore] private targetCRS _targetCRS;

        [XmlElement(Type = typeof (domainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public domainOfValidity domainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new domainOfValidity();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (string), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<string> scope
        {
            get
            {
                if (_scope == null) _scope = new List<string>();
                return _scope;
            }
            set { _scope = value; }
        }

        [XmlElement(ElementName = "operationVersion", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public string operationVersion
        {
            get { return _operationVersion; }
            set { _operationVersion = value; }
        }

        [XmlElement(Type = typeof (coordinateOperationAccuracy), ElementName = "coordinateOperationAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<coordinateOperationAccuracy> coordinateOperationAccuracy
        {
            get
            {
                if (_coordinateOperationAccuracy == null)
                    _coordinateOperationAccuracy = new List<coordinateOperationAccuracy>();
                return _coordinateOperationAccuracy;
            }
            set { _coordinateOperationAccuracy = value; }
        }

        [XmlElement(Type = typeof (sourceCRS), ElementName = "sourceCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public sourceCRS sourceCRS
        {
            get
            {
                if (_sourceCRS == null) _sourceCRS = new sourceCRS();
                return _sourceCRS;
            }
            set { _sourceCRS = value; }
        }

        [XmlElement(Type = typeof (targetCRS), ElementName = "targetCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public targetCRS targetCRS
        {
            get
            {
                if (_targetCRS == null) _targetCRS = new targetCRS();
                return _targetCRS;
            }
            set { _targetCRS = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CoordinateOperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractGeneralTransformationType))]
    [XmlInclude(typeof (PassThroughOperationType))]
    [XmlInclude(typeof (ConcatenatedOperationType))]
    [XmlInclude(typeof (AbstractGeneralConversionType))]
    public class CoordinateOperationPropertyType
    {
        [XmlIgnore] private AbstractCoordinateOperation _AbstractCoordinateOperation;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CoordinateOperationPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractCoordinateOperation), ElementName = "AbstractCoordinateOperation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractCoordinateOperation AbstractCoordinateOperation
        {
            get { return _AbstractCoordinateOperation; }
            set { _AbstractCoordinateOperation = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractCoordinateOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SingleOperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (AbstractGeneralTransformationType))]
    [XmlInclude(typeof (PassThroughOperationType))]
    [XmlInclude(typeof (ConcatenatedOperationType))]
    [XmlInclude(typeof (AbstractGeneralConversionType))]
    public class SingleOperationPropertyType
    {
        [XmlIgnore] private AbstractSingleOperation _AbstractSingleOperation;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public SingleOperationPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractSingleOperation), ElementName = "AbstractSingleOperation", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractSingleOperation AbstractSingleOperation
        {
            get { return _AbstractSingleOperation; }
            set { _AbstractSingleOperation = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractSingleOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralConversionType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralConversionType : AbstractCoordinateOperationType
    {
        [XmlIgnore] private List<coordinateOperationAccuracy> _coordinateOperationAccuracy;
        [XmlIgnore] private description _description;
        [XmlIgnore] private descriptionReference _descriptionReference;
        [XmlIgnore] private domainOfValidity _domainOfValidity;
        [XmlIgnore] private string _id;
        [XmlIgnore] private identifier _identifier;

        [XmlIgnore] private List<metaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<name> _name;
        [XmlIgnore] private string _remarks;
        [XmlIgnore] private List<string> _scope;

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (metaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<metaDataProperty> metaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<metaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public description description
        {
            get
            {
                if (_description == null) _description = new description();
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (descriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public descriptionReference descriptionReference
        {
            get
            {
                if (_descriptionReference == null) _descriptionReference = new descriptionReference();
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public identifier identifier
        {
            get
            {
                if (_identifier == null) _identifier = new identifier();
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<name> name
        {
            get
            {
                if (_name == null) _name = new List<name>();
                return _name;
            }
            set { _name = value; }
        }

        [XmlElement(ElementName = "remarks", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string",
            Namespace = Declarations.SchemaVersion)]
        public string remarks
        {
            get { return _remarks; }
            set { _remarks = value; }
        }

        [XmlElement(Type = typeof (domainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public domainOfValidity domainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new domainOfValidity();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (string), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<string> scope
        {
            get
            {
                if (_scope == null) _scope = new List<string>();
                return _scope;
            }
            set { _scope = value; }
        }

        [XmlElement(Type = typeof (coordinateOperationAccuracy), ElementName = "coordinateOperationAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<coordinateOperationAccuracy> coordinateOperationAccuracy
        {
            get
            {
                if (_coordinateOperationAccuracy == null)
                    _coordinateOperationAccuracy = new List<coordinateOperationAccuracy>();
                return _coordinateOperationAccuracy;
            }
            set { _coordinateOperationAccuracy = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            identifier.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeneralConversionPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (ConversionType))]
    public class GeneralConversionPropertyType
    {
        [XmlIgnore] private AbstractGeneralConversion _AbstractGeneralConversion;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public GeneralConversionPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeneralConversion), ElementName = "AbstractGeneralConversion",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeneralConversion AbstractGeneralConversion
        {
            get { return _AbstractGeneralConversion; }
            set { _AbstractGeneralConversion = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeneralConversion.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralTransformationType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralTransformationType : AbstractCoordinateOperationType
    {
        [XmlIgnore] private List<coordinateOperationAccuracy> _coordinateOperationAccuracy;
        [XmlIgnore] private description _description;
        [XmlIgnore] private descriptionReference _descriptionReference;
        [XmlIgnore] private domainOfValidity _domainOfValidity;
        [XmlIgnore] private string _id;
        [XmlIgnore] private identifier _identifier;

        [XmlIgnore] private List<metaDataProperty> _metaDataProperty;
        [XmlIgnore] private List<name> _name;
        [XmlIgnore] private string _operationVersion;
        [XmlIgnore] private string _remarks;
        [XmlIgnore] private List<string> _scope;
        [XmlIgnore] private sourceCRS _sourceCRS;
        [XmlIgnore] private targetCRS _targetCRS;

        public AbstractGeneralTransformationType()
        {
            operationVersion = string.Empty;
        }

        [XmlAttribute(AttributeName = "id", DataType = "ID")]
        public string id
        {
            get { return _id; }
            set { _id = value; }
        }

        [XmlElement(Type = typeof (metaDataProperty), ElementName = "metaDataProperty", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<metaDataProperty> metaDataProperty
        {
            get
            {
                if (_metaDataProperty == null) _metaDataProperty = new List<metaDataProperty>();
                return _metaDataProperty;
            }
            set { _metaDataProperty = value; }
        }

        [XmlElement(Type = typeof (description), ElementName = "description", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public description description
        {
            get
            {
                if (_description == null) _description = new description();
                return _description;
            }
            set { _description = value; }
        }

        [XmlElement(Type = typeof (descriptionReference), ElementName = "descriptionReference", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public descriptionReference descriptionReference
        {
            get
            {
                if (_descriptionReference == null) _descriptionReference = new descriptionReference();
                return _descriptionReference;
            }
            set { _descriptionReference = value; }
        }

        [XmlElement(Type = typeof (identifier), ElementName = "identifier", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public identifier identifier
        {
            get
            {
                if (_identifier == null) _identifier = new identifier();
                return _identifier;
            }
            set { _identifier = value; }
        }

        [XmlElement(Type = typeof (name), ElementName = "name", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public List<name> name
        {
            get
            {
                if (_name == null) _name = new List<name>();
                return _name;
            }
            set { _name = value; }
        }

        [XmlElement(ElementName = "remarks", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string",
            Namespace = Declarations.SchemaVersion)]
        public string remarks
        {
            get { return _remarks; }
            set { _remarks = value; }
        }

        [XmlElement(Type = typeof (domainOfValidity), ElementName = "domainOfValidity", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public domainOfValidity domainOfValidity
        {
            get
            {
                if (_domainOfValidity == null) _domainOfValidity = new domainOfValidity();
                return _domainOfValidity;
            }
            set { _domainOfValidity = value; }
        }

        [XmlElement(Type = typeof (string), ElementName = "scope", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public List<string> scope
        {
            get
            {
                if (_scope == null) _scope = new List<string>();
                return _scope;
            }
            set { _scope = value; }
        }

        [XmlElement(ElementName = "operationVersion", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "string", Namespace = Declarations.SchemaVersion)]
        public string operationVersion
        {
            get { return _operationVersion; }
            set { _operationVersion = value; }
        }

        [XmlElement(Type = typeof (coordinateOperationAccuracy), ElementName = "coordinateOperationAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<coordinateOperationAccuracy> coordinateOperationAccuracy
        {
            get
            {
                if (_coordinateOperationAccuracy == null)
                    _coordinateOperationAccuracy = new List<coordinateOperationAccuracy>();
                return _coordinateOperationAccuracy;
            }
            set { _coordinateOperationAccuracy = value; }
        }

        [XmlElement(Type = typeof (sourceCRS), ElementName = "sourceCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public sourceCRS sourceCRS
        {
            get
            {
                if (_sourceCRS == null) _sourceCRS = new sourceCRS();
                return _sourceCRS;
            }
            set { _sourceCRS = value; }
        }

        [XmlElement(Type = typeof (targetCRS), ElementName = "targetCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public targetCRS targetCRS
        {
            get
            {
                if (_targetCRS == null) _targetCRS = new targetCRS();
                return _targetCRS;
            }
            set { _targetCRS = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            identifier.MakeSchemaCompliant();
            sourceCRS.MakeSchemaCompliant();
            targetCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeneralTransformationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (TransformationType))]
    public class GeneralTransformationPropertyType
    {
        [XmlIgnore] private AbstractGeneralTransformation _AbstractGeneralTransformation;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public GeneralTransformationPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeneralTransformation), ElementName = "AbstractGeneralTransformation",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeneralTransformation AbstractGeneralTransformation
        {
            get { return _AbstractGeneralTransformation; }
            set { _AbstractGeneralTransformation = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeneralTransformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConcatenatedOperationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConcatenatedOperationType : AbstractCoordinateOperationType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<coordOperation> _coordOperation;

        [XmlIgnore]
        public coordOperation this[int index]
        {
            get { return coordOperation[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return coordOperation.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (coordOperation), ElementName = "coordOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<coordOperation> coordOperation
        {
            get
            {
                if (_coordOperation == null) _coordOperation = new List<coordOperation>();
                return _coordOperation;
            }
            set { _coordOperation = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return coordOperation.GetEnumerator();
        }

        public void Add(coordOperation obj)
        {
            coordOperation.Add(obj);
        }

        public void Clear()
        {
            coordOperation.Clear();
        }

        public coordOperation Remove(int index)
        {
            coordOperation obj = coordOperation[index];
            coordOperation.Remove(obj);
            return obj;
        }

        public bool Remove(coordOperation obj)
        {
            return coordOperation.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (coordOperation _c in coordOperation) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConcatenatedOperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConcatenatedOperationPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private ConcatenatedOperation _ConcatenatedOperation;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public ConcatenatedOperationPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ConcatenatedOperation), ElementName = "ConcatenatedOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ConcatenatedOperation ConcatenatedOperation
        {
            get
            {
                if (_ConcatenatedOperation == null) _ConcatenatedOperation = new ConcatenatedOperation();
                return _ConcatenatedOperation;
            }
            set { _ConcatenatedOperation = value; }
        }

        public void MakeSchemaCompliant()
        {
            ConcatenatedOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PassThroughOperationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PassThroughOperationType : AbstractCoordinateOperationType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private coordOperation _coordOperation;

        [XmlIgnore] private List<string> _modifiedCoordinate;

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (string), ElementName = "modifiedCoordinate", IsNullable = false,
            Form = XmlSchemaForm.Qualified, DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public List<string> modifiedCoordinate
        {
            get
            {
                if (_modifiedCoordinate == null) _modifiedCoordinate = new List<string>();
                return _modifiedCoordinate;
            }
            set { _modifiedCoordinate = value; }
        }

        [XmlElement(Type = typeof (coordOperation), ElementName = "coordOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordOperation coordOperation
        {
            get
            {
                if (_coordOperation == null) _coordOperation = new coordOperation();
                return _coordOperation;
            }
            set { _coordOperation = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            coordOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "PassThroughOperationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class PassThroughOperationPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private PassThroughOperation _PassThroughOperation;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public PassThroughOperationPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (PassThroughOperation), ElementName = "PassThroughOperation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public PassThroughOperation PassThroughOperation
        {
            get
            {
                if (_PassThroughOperation == null) _PassThroughOperation = new PassThroughOperation();
                return _PassThroughOperation;
            }
            set { _PassThroughOperation = value; }
        }

        public void MakeSchemaCompliant()
        {
            PassThroughOperation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConversionType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConversionType : AbstractGeneralConversionType
    {
        [XmlIgnore] private method _method;

        [XmlIgnore] private List<parameterValue> _parameterValue;

        [XmlElement(Type = typeof (method), ElementName = "method", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public method method
        {
            get
            {
                if (_method == null) _method = new method();
                return _method;
            }
            set { _method = value; }
        }

        [XmlElement(Type = typeof (parameterValue), ElementName = "parameterValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<parameterValue> parameterValue
        {
            get
            {
                if (_parameterValue == null) _parameterValue = new List<parameterValue>();
                return _parameterValue;
            }
            set { _parameterValue = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            method.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ConversionPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ConversionPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private Conversion _Conversion;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public ConversionPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Conversion), ElementName = "Conversion", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Conversion Conversion
        {
            get
            {
                if (_Conversion == null) _Conversion = new Conversion();
                return _Conversion;
            }
            set { _Conversion = value; }
        }

        public void MakeSchemaCompliant()
        {
            Conversion.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TransformationType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TransformationType : AbstractGeneralTransformationType
    {
        [XmlIgnore] private method _method;

        [XmlIgnore] private List<parameterValue> _parameterValue;

        [XmlElement(Type = typeof (method), ElementName = "method", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public method method
        {
            get
            {
                if (_method == null) _method = new method();
                return _method;
            }
            set { _method = value; }
        }

        [XmlElement(Type = typeof (parameterValue), ElementName = "parameterValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<parameterValue> parameterValue
        {
            get
            {
                if (_parameterValue == null) _parameterValue = new List<parameterValue>();
                return _parameterValue;
            }
            set { _parameterValue = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            method.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TransformationPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TransformationPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private Transformation _Transformation;
        [XmlIgnore] private string _type;

        public TransformationPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (Transformation), ElementName = "Transformation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public Transformation Transformation
        {
            get
            {
                if (_Transformation == null) _Transformation = new Transformation();
                return _Transformation;
            }
            set { _Transformation = value; }
        }

        public void MakeSchemaCompliant()
        {
            Transformation.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralParameterValueType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralParameterValueType
    {
        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlType(TypeName = "AbstractGeneralParameterValuePropertyType", Namespace = Declarations.SchemaVersion),
     Serializable]
    [XmlInclude(typeof (ParameterValueGroupType))]
    [XmlInclude(typeof (ParameterValueType))]
    public class AbstractGeneralParameterValuePropertyType
    {
        [XmlIgnore] private AbstractGeneralParameterValue _AbstractGeneralParameterValue;

        [XmlElement(Type = typeof (AbstractGeneralParameterValue), ElementName = "AbstractGeneralParameterValue",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeneralParameterValue AbstractGeneralParameterValue
        {
            get { return _AbstractGeneralParameterValue; }
            set { _AbstractGeneralParameterValue = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeneralParameterValue.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ParameterValueType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ParameterValueType : AbstractGeneralParameterValueType
    {
        [XmlIgnore] private bool _booleanValue;

        [XmlIgnore] public bool _booleanValueSpecified;
        [XmlIgnore] private dmsAngleValue _dmsAngleValue;
        [XmlIgnore] private string _integerValue;
        [XmlIgnore] private string _integerValueList;
        [XmlIgnore] private operationParameter _operationParameter;
        [XmlIgnore] private string _stringValue;
        [XmlIgnore] private value _value;
        [XmlIgnore] private string _valueFile;
        [XmlIgnore] private valueList _valueList;

        public ParameterValueType()
        {
            stringValue = string.Empty;
            integerValue = string.Empty;
            _booleanValueSpecified = true;
            valueFile = string.Empty;
        }

        [XmlElement(Type = typeof (value), ElementName = "value", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public value @value
        {
            get
            {
                if (_value == null) _value = new value();
                return _value;
            }
            set { _value = value; }
        }

        [XmlElement(Type = typeof (dmsAngleValue), ElementName = "dmsAngleValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public dmsAngleValue dmsAngleValue
        {
            get
            {
                if (_dmsAngleValue == null) _dmsAngleValue = new dmsAngleValue();
                return _dmsAngleValue;
            }
            set { _dmsAngleValue = value; }
        }

        [XmlElement(ElementName = "stringValue", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string"
            , Namespace = Declarations.SchemaVersion)]
        public string stringValue
        {
            get { return _stringValue; }
            set { _stringValue = value; }
        }

        [XmlElement(ElementName = "integerValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public string integerValue
        {
            get { return _integerValue; }
            set { _integerValue = value; }
        }


        [XmlElement(ElementName = "booleanValue", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "boolean", Namespace = Declarations.SchemaVersion)]
        public bool booleanValue
        {
            get { return _booleanValue; }
            set
            {
                _booleanValue = value;
                _booleanValueSpecified = true;
            }
        }

        [XmlElement(Type = typeof (valueList), ElementName = "valueList", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public valueList valueList
        {
            get
            {
                if (_valueList == null) _valueList = new valueList();
                return _valueList;
            }
            set { _valueList = value; }
        }

        [XmlElement(ElementName = "integerValueList", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public string integerValueList
        {
            get { return _integerValueList; }
            set { _integerValueList = value; }
        }

        [XmlElement(ElementName = "valueFile", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "anyURI",
            Namespace = Declarations.SchemaVersion)]
        public string valueFile
        {
            get { return _valueFile; }
            set { _valueFile = value; }
        }

        [XmlElement(Type = typeof (operationParameter), ElementName = "operationParameter", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public operationParameter operationParameter
        {
            get
            {
                if (_operationParameter == null) _operationParameter = new operationParameter();
                return _operationParameter;
            }
            set { _operationParameter = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            @value.MakeSchemaCompliant();
            dmsAngleValue.MakeSchemaCompliant();
            valueList.MakeSchemaCompliant();
            operationParameter.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ParameterValueGroupType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ParameterValueGroupType : AbstractGeneralParameterValueType
    {
        [XmlIgnore] private group _group;
        [XmlIgnore] private List<parameterValue> _parameterValue;

        [XmlElement(Type = typeof (parameterValue), ElementName = "parameterValue", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<parameterValue> parameterValue
        {
            get
            {
                if (_parameterValue == null) _parameterValue = new List<parameterValue>();
                return _parameterValue;
            }
            set { _parameterValue = value; }
        }

        [XmlElement(Type = typeof (group), ElementName = "group", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public group group
        {
            get
            {
                if (_group == null) _group = new group();
                return _group;
            }
            set { _group = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (parameterValue _c in parameterValue) _c.MakeSchemaCompliant();
            group.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationMethodType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationMethodType : IdentifiedObjectType
    {
        [XmlIgnore] private formula _formula;
        [XmlIgnore] private formulaCitation _formulaCitation;
        [XmlIgnore] private List<parameter> _parameter;
        [XmlIgnore] private string _sourceDimensions;
        [XmlIgnore] private string _targetDimensions;

        [XmlElement(Type = typeof (formulaCitation), ElementName = "formulaCitation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public formulaCitation formulaCitation
        {
            get
            {
                if (_formulaCitation == null) _formulaCitation = new formulaCitation();
                return _formulaCitation;
            }
            set { _formulaCitation = value; }
        }

        [XmlElement(Type = typeof (formula), ElementName = "formula", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public formula formula
        {
            get
            {
                if (_formula == null) _formula = new formula();
                return _formula;
            }
            set { _formula = value; }
        }

        [XmlElement(ElementName = "sourceDimensions", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public string sourceDimensions
        {
            get { return _sourceDimensions; }
            set { _sourceDimensions = value; }
        }

        [XmlElement(ElementName = "targetDimensions", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public string targetDimensions
        {
            get { return _targetDimensions; }
            set { _targetDimensions = value; }
        }

        [XmlElement(Type = typeof (parameter), ElementName = "parameter", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<parameter> parameter
        {
            get
            {
                if (_parameter == null) _parameter = new List<parameter>();
                return _parameter;
            }
            set { _parameter = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            formulaCitation.MakeSchemaCompliant();
            formula.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationMethodPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationMethodPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private OperationMethod _OperationMethod;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public OperationMethodPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (OperationMethod), ElementName = "OperationMethod", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public OperationMethod OperationMethod
        {
            get
            {
                if (_OperationMethod == null) _OperationMethod = new OperationMethod();
                return _OperationMethod;
            }
            set { _OperationMethod = value; }
        }

        public void MakeSchemaCompliant()
        {
            OperationMethod.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralOperationParameterType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralOperationParameterType : IdentifiedObjectType
    {
        [XmlIgnore] private string _minimumOccurs;

        [XmlElement(ElementName = "minimumOccurs", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "nonNegativeInteger", Namespace = Declarations.SchemaVersion)]
        public string minimumOccurs
        {
            get { return _minimumOccurs; }
            set { _minimumOccurs = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralOperationParameterPropertyType", Namespace = Declarations.SchemaVersion),
     Serializable]
    [XmlInclude(typeof (OperationParameterGroupType))]
    [XmlInclude(typeof (OperationParameterType))]
    public class AbstractGeneralOperationParameterPropertyType
    {
        [XmlIgnore] private AbstractGeneralOperationParameter _AbstractGeneralOperationParameter;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public AbstractGeneralOperationParameterPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractGeneralOperationParameter), ElementName = "AbstractGeneralOperationParameter"
            , IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractGeneralOperationParameter AbstractGeneralOperationParameter
        {
            get { return _AbstractGeneralOperationParameter; }
            set { _AbstractGeneralOperationParameter = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractGeneralOperationParameter.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationParameterType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationParameterType : AbstractGeneralOperationParameterType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationParameterPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationParameterPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private OperationParameter _OperationParameter;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public OperationParameterPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (OperationParameter), ElementName = "OperationParameter", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public OperationParameter OperationParameter
        {
            get
            {
                if (_OperationParameter == null) _OperationParameter = new OperationParameter();
                return _OperationParameter;
            }
            set { _OperationParameter = value; }
        }

        public void MakeSchemaCompliant()
        {
            OperationParameter.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationParameterGroupType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationParameterGroupType : AbstractGeneralOperationParameterType
    {
        [XmlIgnore] private string _maximumOccurs;

        [XmlIgnore] private List<parameter> _parameter;

        [XmlElement(ElementName = "maximumOccurs", IsNullable = false, Form = XmlSchemaForm.Qualified,
            DataType = "positiveInteger", Namespace = Declarations.SchemaVersion)]
        public string maximumOccurs
        {
            get { return _maximumOccurs; }
            set { _maximumOccurs = value; }
        }

        [XmlElement(Type = typeof (parameter), ElementName = "parameter", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<parameter> parameter
        {
            get
            {
                if (_parameter == null) _parameter = new List<parameter>();
                return _parameter;
            }
            set { _parameter = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (parameter _c in parameter) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "OperationParameterGroupPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class OperationParameterGroupPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private OperationParameterGroup _OperationParameterGroup;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public OperationParameterGroupPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (OperationParameterGroup), ElementName = "OperationParameterGroup", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public OperationParameterGroup OperationParameterGroup
        {
            get
            {
                if (_OperationParameterGroup == null) _OperationParameterGroup = new OperationParameterGroup();
                return _OperationParameterGroup;
            }
            set { _OperationParameterGroup = value; }
        }

        public void MakeSchemaCompliant()
        {
            OperationParameterGroup.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "SingleCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    [XmlInclude(typeof (GeographicCRSType))]
    [XmlInclude(typeof (GeocentricCRSType))]
    [XmlInclude(typeof (TemporalCRSType))]
    [XmlInclude(typeof (AbstractGeneralDerivedCRSType))]
    [XmlInclude(typeof (ImageCRSType))]
    [XmlInclude(typeof (GeodeticCRSType))]
    [XmlInclude(typeof (CompoundCRSType))]
    [XmlInclude(typeof (VerticalCRSType))]
    [XmlInclude(typeof (EngineeringCRSType))]
    public class SingleCRSPropertyType
    {
        [XmlIgnore] private AbstractSingleCRS _AbstractSingleCRS;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public SingleCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractSingleCRS), ElementName = "AbstractSingleCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public AbstractSingleCRS AbstractSingleCRS
        {
            get { return _AbstractSingleCRS; }
            set { _AbstractSingleCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractSingleCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "AbstractGeneralDerivedCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public abstract class AbstractGeneralDerivedCRSType : AbstractCRSType
    {
        [XmlIgnore] private conversion _conversion;

        [XmlElement(Type = typeof (conversion), ElementName = "conversion", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public conversion conversion
        {
            get
            {
                if (_conversion == null) _conversion = new conversion();
                return _conversion;
            }
            set { _conversion = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            conversion.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompoundCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompoundCRSType : AbstractCRSType
    {
        [XmlIgnore] private AggregationType _aggregationType;

        [XmlIgnore] public bool _aggregationTypeSpecified;
        [XmlIgnore] private List<componentReferenceSystem> _componentReferenceSystem;

        [XmlIgnore]
        public componentReferenceSystem this[int index]
        {
            get { return componentReferenceSystem[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return componentReferenceSystem.Count; }
        }

        [XmlAttribute(AttributeName = "aggregationType")]
        public AggregationType aggregationType
        {
            get { return _aggregationType; }
            set
            {
                _aggregationType = value;
                _aggregationTypeSpecified = true;
            }
        }

        [XmlElement(Type = typeof (componentReferenceSystem), ElementName = "componentReferenceSystem",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public List<componentReferenceSystem> componentReferenceSystem
        {
            get
            {
                if (_componentReferenceSystem == null) _componentReferenceSystem = new List<componentReferenceSystem>();
                return _componentReferenceSystem;
            }
            set { _componentReferenceSystem = value; }
        }

        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return componentReferenceSystem.GetEnumerator();
        }

        public void Add(componentReferenceSystem obj)
        {
            componentReferenceSystem.Add(obj);
        }

        public void Clear()
        {
            componentReferenceSystem.Clear();
        }

        public componentReferenceSystem Remove(int index)
        {
            componentReferenceSystem obj = componentReferenceSystem[index];
            componentReferenceSystem.Remove(obj);
            return obj;
        }

        public bool Remove(componentReferenceSystem obj)
        {
            return componentReferenceSystem.Remove(obj);
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            foreach (componentReferenceSystem _c in componentReferenceSystem) _c.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "CompoundCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class CompoundCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CompoundCRS _CompoundCRS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public CompoundCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CompoundCRS), ElementName = "CompoundCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public CompoundCRS CompoundCRS
        {
            get
            {
                if (_CompoundCRS == null) _CompoundCRS = new CompoundCRS();
                return _CompoundCRS;
            }
            set { _CompoundCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            CompoundCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodeticCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodeticCRSType : AbstractCRSType
    {
        [XmlIgnore] private cartesianCS _cartesianCS;
        [XmlIgnore] private ellipsoidalCS _ellipsoidalCS;
        [XmlIgnore] private geodeticDatum _geodeticDatum;
        [XmlIgnore] private sphericalCS _sphericalCS;

        [XmlElement(Type = typeof (ellipsoidalCS), ElementName = "ellipsoidalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ellipsoidalCS ellipsoidalCS
        {
            get
            {
                if (_ellipsoidalCS == null) _ellipsoidalCS = new ellipsoidalCS();
                return _ellipsoidalCS;
            }
            set { _ellipsoidalCS = value; }
        }

        [XmlElement(Type = typeof (cartesianCS), ElementName = "cartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public cartesianCS cartesianCS
        {
            get
            {
                if (_cartesianCS == null) _cartesianCS = new cartesianCS();
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        [XmlElement(Type = typeof (sphericalCS), ElementName = "sphericalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public sphericalCS sphericalCS
        {
            get
            {
                if (_sphericalCS == null) _sphericalCS = new sphericalCS();
                return _sphericalCS;
            }
            set { _sphericalCS = value; }
        }

        [XmlElement(Type = typeof (geodeticDatum), ElementName = "geodeticDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public geodeticDatum geodeticDatum
        {
            get
            {
                if (_geodeticDatum == null) _geodeticDatum = new geodeticDatum();
                return _geodeticDatum;
            }
            set { _geodeticDatum = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            ellipsoidalCS.MakeSchemaCompliant();
            cartesianCS.MakeSchemaCompliant();
            sphericalCS.MakeSchemaCompliant();
            geodeticDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "GeodeticCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class GeodeticCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private GeodeticCRS _GeodeticCRS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public GeodeticCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (GeodeticCRS), ElementName = "GeodeticCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public GeodeticCRS GeodeticCRS
        {
            get
            {
                if (_GeodeticCRS == null) _GeodeticCRS = new GeodeticCRS();
                return _GeodeticCRS;
            }
            set { _GeodeticCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            GeodeticCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalCRSType : AbstractCRSType
    {
        [XmlIgnore] private verticalCS _verticalCS;

        [XmlIgnore] private verticalDatum _verticalDatum;

        [XmlElement(Type = typeof (verticalCS), ElementName = "verticalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public verticalCS verticalCS
        {
            get
            {
                if (_verticalCS == null) _verticalCS = new verticalCS();
                return _verticalCS;
            }
            set { _verticalCS = value; }
        }

        [XmlElement(Type = typeof (verticalDatum), ElementName = "verticalDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public verticalDatum verticalDatum
        {
            get
            {
                if (_verticalDatum == null) _verticalDatum = new verticalDatum();
                return _verticalDatum;
            }
            set { _verticalDatum = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            verticalCS.MakeSchemaCompliant();
            verticalDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "VerticalCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class VerticalCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;
        [XmlIgnore] private VerticalCRS _VerticalCRS;

        public VerticalCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (VerticalCRS), ElementName = "VerticalCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public VerticalCRS VerticalCRS
        {
            get
            {
                if (_VerticalCRS == null) _VerticalCRS = new VerticalCRS();
                return _VerticalCRS;
            }
            set { _VerticalCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            VerticalCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ProjectedCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ProjectedCRSType : AbstractGeneralDerivedCRSType
    {
        [XmlIgnore] private baseGeodeticCRS _baseGeodeticCRS;

        [XmlIgnore] private baseGeographicCRS _baseGeographicCRS;

        [XmlIgnore] private cartesianCS _cartesianCS;

        [XmlElement(Type = typeof (baseGeodeticCRS), ElementName = "baseGeodeticCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public baseGeodeticCRS baseGeodeticCRS
        {
            get
            {
                if (_baseGeodeticCRS == null) _baseGeodeticCRS = new baseGeodeticCRS();
                return _baseGeodeticCRS;
            }
            set { _baseGeodeticCRS = value; }
        }

        [XmlElement(Type = typeof (baseGeographicCRS), ElementName = "baseGeographicCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public baseGeographicCRS baseGeographicCRS
        {
            get
            {
                if (_baseGeographicCRS == null) _baseGeographicCRS = new baseGeographicCRS();
                return _baseGeographicCRS;
            }
            set { _baseGeographicCRS = value; }
        }

        [XmlElement(Type = typeof (cartesianCS), ElementName = "cartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public cartesianCS cartesianCS
        {
            get
            {
                if (_cartesianCS == null) _cartesianCS = new cartesianCS();
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            baseGeodeticCRS.MakeSchemaCompliant();
            baseGeographicCRS.MakeSchemaCompliant();
            cartesianCS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ProjectedCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ProjectedCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private ProjectedCRS _ProjectedCRS;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public ProjectedCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ProjectedCRS), ElementName = "ProjectedCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ProjectedCRS ProjectedCRS
        {
            get
            {
                if (_ProjectedCRS == null) _ProjectedCRS = new ProjectedCRS();
                return _ProjectedCRS;
            }
            set { _ProjectedCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            ProjectedCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DerivedCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DerivedCRSType : AbstractGeneralDerivedCRSType
    {
        [XmlIgnore] private baseCRS _baseCRS;
        [XmlIgnore] private coordinateSystem _coordinateSystem;

        [XmlIgnore] private derivedCRSType _derivedCRSType;

        [XmlElement(Type = typeof (baseCRS), ElementName = "baseCRS", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public baseCRS baseCRS
        {
            get
            {
                if (_baseCRS == null) _baseCRS = new baseCRS();
                return _baseCRS;
            }
            set { _baseCRS = value; }
        }

        [XmlElement(Type = typeof (derivedCRSType), ElementName = "derivedCRSType", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public derivedCRSType derivedCRSType
        {
            get
            {
                if (_derivedCRSType == null) _derivedCRSType = new derivedCRSType();
                return _derivedCRSType;
            }
            set { _derivedCRSType = value; }
        }

        [XmlElement(Type = typeof (coordinateSystem), ElementName = "coordinateSystem", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinateSystem coordinateSystem
        {
            get
            {
                if (_coordinateSystem == null) _coordinateSystem = new coordinateSystem();
                return _coordinateSystem;
            }
            set { _coordinateSystem = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            baseCRS.MakeSchemaCompliant();
            derivedCRSType.MakeSchemaCompliant();
            coordinateSystem.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "DerivedCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class DerivedCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private DerivedCRS _DerivedCRS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public DerivedCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (DerivedCRS), ElementName = "DerivedCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public DerivedCRS DerivedCRS
        {
            get
            {
                if (_DerivedCRS == null) _DerivedCRS = new DerivedCRS();
                return _DerivedCRS;
            }
            set { _DerivedCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            DerivedCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EngineeringCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EngineeringCRSType : AbstractCRSType
    {
        [XmlIgnore] private affineCS _affineCS;

        [XmlIgnore] private cartesianCS _cartesianCS;
        [XmlIgnore] private coordinateSystem _coordinateSystem;

        [XmlIgnore] private cylindricalCS _cylindricalCS;
        [XmlIgnore] private engineeringDatum _engineeringDatum;

        [XmlIgnore] private linearCS _linearCS;

        [XmlIgnore] private polarCS _polarCS;

        [XmlIgnore] private sphericalCS _sphericalCS;

        [XmlIgnore] private userDefinedCS _userDefinedCS;

        [XmlElement(Type = typeof (affineCS), ElementName = "affineCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public affineCS affineCS
        {
            get
            {
                if (_affineCS == null) _affineCS = new affineCS();
                return _affineCS;
            }
            set { _affineCS = value; }
        }

        [XmlElement(Type = typeof (cartesianCS), ElementName = "cartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public cartesianCS cartesianCS
        {
            get
            {
                if (_cartesianCS == null) _cartesianCS = new cartesianCS();
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        [XmlElement(Type = typeof (cylindricalCS), ElementName = "cylindricalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public cylindricalCS cylindricalCS
        {
            get
            {
                if (_cylindricalCS == null) _cylindricalCS = new cylindricalCS();
                return _cylindricalCS;
            }
            set { _cylindricalCS = value; }
        }

        [XmlElement(Type = typeof (linearCS), ElementName = "linearCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public linearCS linearCS
        {
            get
            {
                if (_linearCS == null) _linearCS = new linearCS();
                return _linearCS;
            }
            set { _linearCS = value; }
        }

        [XmlElement(Type = typeof (polarCS), ElementName = "polarCS", IsNullable = false, Form = XmlSchemaForm.Qualified
            , Namespace = Declarations.SchemaVersion)]
        public polarCS polarCS
        {
            get
            {
                if (_polarCS == null) _polarCS = new polarCS();
                return _polarCS;
            }
            set { _polarCS = value; }
        }

        [XmlElement(Type = typeof (sphericalCS), ElementName = "sphericalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public sphericalCS sphericalCS
        {
            get
            {
                if (_sphericalCS == null) _sphericalCS = new sphericalCS();
                return _sphericalCS;
            }
            set { _sphericalCS = value; }
        }

        [XmlElement(Type = typeof (userDefinedCS), ElementName = "userDefinedCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public userDefinedCS userDefinedCS
        {
            get
            {
                if (_userDefinedCS == null) _userDefinedCS = new userDefinedCS();
                return _userDefinedCS;
            }
            set { _userDefinedCS = value; }
        }

        [XmlElement(Type = typeof (coordinateSystem), ElementName = "coordinateSystem", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public coordinateSystem coordinateSystem
        {
            get
            {
                if (_coordinateSystem == null) _coordinateSystem = new coordinateSystem();
                return _coordinateSystem;
            }
            set { _coordinateSystem = value; }
        }

        [XmlElement(Type = typeof (engineeringDatum), ElementName = "engineeringDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public engineeringDatum engineeringDatum
        {
            get
            {
                if (_engineeringDatum == null) _engineeringDatum = new engineeringDatum();
                return _engineeringDatum;
            }
            set { _engineeringDatum = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            affineCS.MakeSchemaCompliant();
            cartesianCS.MakeSchemaCompliant();
            cylindricalCS.MakeSchemaCompliant();
            linearCS.MakeSchemaCompliant();
            polarCS.MakeSchemaCompliant();
            sphericalCS.MakeSchemaCompliant();
            userDefinedCS.MakeSchemaCompliant();
            coordinateSystem.MakeSchemaCompliant();
            engineeringDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "EngineeringCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class EngineeringCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EngineeringCRS _EngineeringCRS;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public EngineeringCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (EngineeringCRS), ElementName = "EngineeringCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public EngineeringCRS EngineeringCRS
        {
            get
            {
                if (_EngineeringCRS == null) _EngineeringCRS = new EngineeringCRS();
                return _EngineeringCRS;
            }
            set { _EngineeringCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            EngineeringCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ImageCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ImageCRSType : AbstractCRSType
    {
        [XmlIgnore] private affineCS _affineCS;
        [XmlIgnore] private cartesianCS _cartesianCS;
        [XmlIgnore] private imageDatum _imageDatum;
        [XmlIgnore] private usesObliqueCartesianCS _usesObliqueCartesianCS;

        [XmlElement(Type = typeof (cartesianCS), ElementName = "cartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public cartesianCS cartesianCS
        {
            get
            {
                if (_cartesianCS == null) _cartesianCS = new cartesianCS();
                return _cartesianCS;
            }
            set { _cartesianCS = value; }
        }

        [XmlElement(Type = typeof (affineCS), ElementName = "affineCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public affineCS affineCS
        {
            get
            {
                if (_affineCS == null) _affineCS = new affineCS();
                return _affineCS;
            }
            set { _affineCS = value; }
        }

        [XmlElement(Type = typeof (usesObliqueCartesianCS), ElementName = "usesObliqueCartesianCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public usesObliqueCartesianCS usesObliqueCartesianCS
        {
            get
            {
                if (_usesObliqueCartesianCS == null) _usesObliqueCartesianCS = new usesObliqueCartesianCS();
                return _usesObliqueCartesianCS;
            }
            set { _usesObliqueCartesianCS = value; }
        }

        [XmlElement(Type = typeof (imageDatum), ElementName = "imageDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public imageDatum imageDatum
        {
            get
            {
                if (_imageDatum == null) _imageDatum = new imageDatum();
                return _imageDatum;
            }
            set { _imageDatum = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            cartesianCS.MakeSchemaCompliant();
            affineCS.MakeSchemaCompliant();
            usesObliqueCartesianCS.MakeSchemaCompliant();
            imageDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "ImageCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class ImageCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private ImageCRS _ImageCRS;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public ImageCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (ImageCRS), ElementName = "ImageCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public ImageCRS ImageCRS
        {
            get
            {
                if (_ImageCRS == null) _ImageCRS = new ImageCRS();
                return _ImageCRS;
            }
            set { _ImageCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            ImageCRS.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalCRSType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalCRSType : AbstractCRSType
    {
        [XmlIgnore] private temporalDatum _temporalDatum;
        [XmlIgnore] private timeCS _timeCS;

        [XmlIgnore] private usesTemporalCS _usesTemporalCS;

        [XmlElement(Type = typeof (timeCS), ElementName = "timeCS", IsNullable = false, Form = XmlSchemaForm.Qualified,
            Namespace = Declarations.SchemaVersion)]
        public timeCS timeCS
        {
            get
            {
                if (_timeCS == null) _timeCS = new timeCS();
                return _timeCS;
            }
            set { _timeCS = value; }
        }

        [XmlElement(Type = typeof (usesTemporalCS), ElementName = "usesTemporalCS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public usesTemporalCS usesTemporalCS
        {
            get
            {
                if (_usesTemporalCS == null) _usesTemporalCS = new usesTemporalCS();
                return _usesTemporalCS;
            }
            set { _usesTemporalCS = value; }
        }

        [XmlElement(Type = typeof (temporalDatum), ElementName = "temporalDatum", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public temporalDatum temporalDatum
        {
            get
            {
                if (_temporalDatum == null) _temporalDatum = new temporalDatum();
                return _temporalDatum;
            }
            set { _temporalDatum = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
            timeCS.MakeSchemaCompliant();
            usesTemporalCS.MakeSchemaCompliant();
            temporalDatum.MakeSchemaCompliant();
        }
    }


    [XmlType(TypeName = "TemporalCRSPropertyType", Namespace = Declarations.SchemaVersion), Serializable]
    public class TemporalCRSPropertyType
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private TemporalCRS _TemporalCRS;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public TemporalCRSPropertyType()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (TemporalCRS), ElementName = "TemporalCRS", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public TemporalCRS TemporalCRS
        {
            get
            {
                if (_TemporalCRS == null) _TemporalCRS = new TemporalCRS();
                return _TemporalCRS;
            }
            set { _TemporalCRS = value; }
        }

        public void MakeSchemaCompliant()
        {
            TemporalCRS.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGML", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractGML : AbstractGMLType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractAssociationRole", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class abstractAssociationRole : AssociationRoleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractStrictAssociationRole", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class abstractStrictAssociationRole : AssociationRoleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class abstractReference : ReferenceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractInlineProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class abstractInlineProperty : InlinePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "description", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class description : StringOrRefType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "descriptionReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class descriptionReference : ReferenceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "name", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class name : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "identifier", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class identifier : CodeWithAuthorityType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Definition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Definition : DefinitionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Dictionary", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Dictionary : DictionaryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dictionaryEntry", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class dictionaryEntry : DictionaryEntryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "unitOfMeasure", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class unitOfMeasure : UnitOfMeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "UnitDefinition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class UnitDefinition : UnitDefinitionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "quantityType", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class quantityType : StringOrRefType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "quantityTypeReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class quantityTypeReference : ReferenceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "catalogSymbol", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class catalogSymbol : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "BaseUnit", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class BaseUnit : BaseUnitType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DerivedUnit", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DerivedUnit : DerivedUnitType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "derivationUnitTerm", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class derivationUnitTerm : DerivationUnitTermType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ConventionalUnit", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class ConventionalUnit : ConventionalUnitType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "conversionToPreferredUnit", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class conversionToPreferredUnit : ConversionToPreferredUnitType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "roughConversionToPreferredUnit", Namespace = Declarations.SchemaVersion, IsNullable = false)
    , Serializable]
    public class roughConversionToPreferredUnit : ConversionToPreferredUnitType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "measure", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class measure : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "angle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class angle : AngleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeometry", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public abstract class AbstractGeometry : AbstractGeometryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pos", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class pos : DirectPositionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "posList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class posList : DirectPositionListType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "vector", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class vector : VectorType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Envelope", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Envelope : EnvelopeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeometricPrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeometricPrimitive : AbstractGeometricPrimitiveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Point", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Point : PointType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class pointProperty : PointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractCurve : AbstractCurveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "curveProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class curveProperty : CurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LineString", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LineString : LineStringType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractSurface : AbstractSurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "surfaceProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class surfaceProperty : SurfacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Polygon", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Polygon : PolygonType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "exterior", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class exterior : AbstractRingPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "interior", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class interior : AbstractRingPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractRing", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractRing : AbstractRingType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LinearRing", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LinearRing : LinearRingType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Curve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Curve : CurveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class baseCurve : CurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OrientableCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class OrientableCurve : OrientableCurveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCurveSegment", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractCurveSegment : AbstractCurveSegmentType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "segments", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class segments : CurveSegmentArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LineStringSegment", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class LineStringSegment : LineStringSegmentType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ArcString", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ArcString : ArcStringType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Arc", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Arc : ArcType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Circle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Circle : CircleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ArcStringByBulge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class ArcStringByBulge : ArcStringByBulgeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ArcByBulge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ArcByBulge : ArcByBulgeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ArcByCenterPoint", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class ArcByCenterPoint : ArcByCenterPointType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CircleByCenterPoint", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class CircleByCenterPoint : CircleByCenterPointType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CubicSpline", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CubicSpline : CubicSplineType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "BSpline", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class BSpline : BSplineType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Bezier", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Bezier : BezierType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OffsetCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class OffsetCurve : OffsetCurveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AffinePlacement", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class AffinePlacement : AffinePlacementType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Clothoid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Clothoid : ClothoidType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeodesicString", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeodesicString : GeodesicStringType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Geodesic", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Geodesic : GeodesicType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Surface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Surface : SurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class baseSurface : SurfacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OrientableSurface", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class OrientableSurface : OrientableSurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSurfacePatch", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractSurfacePatch : AbstractSurfacePatchType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "patches", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class patches : SurfacePatchArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PolygonPatch", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class PolygonPatch : PolygonPatchType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Triangle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Triangle : TriangleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Rectangle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Rectangle : RectangleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Ring", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Ring : RingType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "curveMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class curveMember : CurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractParametricCurveSurface", Namespace = Declarations.SchemaVersion, IsNullable = false)
    , Serializable]
    public abstract class AbstractParametricCurveSurface : AbstractParametricCurveSurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGriddedSurface", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGriddedSurface : AbstractGriddedSurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Cone", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Cone : ConeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Cylinder", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Cylinder : CylinderType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Sphere", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Sphere : SphereType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PolyhedralSurface", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class PolyhedralSurface : SurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TriangulatedSurface", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class TriangulatedSurface : SurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Tin", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Tin : TinType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSolid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class AbstractSolid : AbstractSolidType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "solidProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class solidProperty : SolidPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Solid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Solid : SolidType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Shell", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Shell : ShellType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "surfaceMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class surfaceMember : SurfacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeometricAggregate", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeometricAggregate : AbstractGeometricAggregateType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiGeometry", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiGeometry : MultiGeometryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geometryMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class geometryMember : GeometryPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geometryMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class geometryMembers : GeometryArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiPoint", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiPoint : MultiPointType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class pointMember : PointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class pointMembers : PointArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiCurve : MultiCurveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "curveMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class curveMembers : CurveArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiSurface : MultiSurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "surfaceMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class surfaceMembers : SurfaceArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiSolid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MultiSolid : MultiSolidType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "solidMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class solidMember : SolidPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "solidMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class solidMembers : SolidArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeObject", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimeObject : AbstractTimeObjectType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimePrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimePrimitive : AbstractTimePrimitiveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "validTime", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class validTime : TimePrimitivePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeComplex", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimeComplex : AbstractTimeComplexType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeGeometricPrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false)
    , Serializable]
    public abstract class AbstractTimeGeometricPrimitive : AbstractTimeGeometricPrimitiveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeInstant", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeInstant : TimeInstantType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimePeriod", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimePeriod : TimePeriodType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "timePosition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class timePosition : TimePositionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "timeInterval", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class timeInterval : TimeIntervalLengthType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractFeature", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractFeature : AbstractFeatureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "boundedBy", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class boundedBy : BoundingShapeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EnvelopeWithTimePeriod", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class EnvelopeWithTimePeriod : EnvelopeWithTimePeriodType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "locationName", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class locationName : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "locationReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class locationReference : ReferenceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "direction", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class direction : DirectionPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dataSource", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class dataSource : StringOrRefType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dataSourceReference", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class dataSourceReference : ReferenceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DynamicFeature", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DynamicFeature : DynamicFeatureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DynamicFeatureCollection", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class DynamicFeatureCollection : DynamicFeatureCollectionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dynamicMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class dynamicMembers : DynamicFeatureMemberType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeSlice", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimeSlice : AbstractTimeSliceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "history", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class history : HistoryPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeometricComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class GeometricComplex : GeometricComplexType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompositeCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CompositeCurve : CompositeCurveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompositeSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class CompositeSurface : CompositeSurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompositeSolid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CompositeSolid : CompositeSolidType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTopology", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public abstract class AbstractTopology : AbstractTopologyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTopoPrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTopoPrimitive : AbstractTopoPrimitiveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Node", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Node : NodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "directedNode", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class directedNode : DirectedNodePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Edge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Edge : EdgeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "directedEdge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class directedEdge : DirectedEdgePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Face", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Face : FaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "directedFace", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class directedFace : DirectedFacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoSolid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoSolid : TopoSolidType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "directedTopoSolid", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class directedTopoSolid : DirectedTopoSolidPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoPoint", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoPoint : TopoPointType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoPointProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class topoPointProperty : TopoPointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoCurve", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoCurve : TopoCurveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoCurveProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class topoCurveProperty : TopoCurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoSurface", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoSurface : TopoSurfaceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoSurfaceProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class topoSurfaceProperty : TopoSurfacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoVolume", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoVolume : TopoVolumeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoVolumeProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class topoVolumeProperty : TopoVolumePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TopoComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TopoComplex : TopoComplexType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "subComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class subComplex : TopoComplexPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "superComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class superComplex : TopoComplexPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "maximalComplex", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class maximalComplex : TopoComplexPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoPrimitiveMember", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class topoPrimitiveMember : TopoPrimitiveMemberType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoPrimitiveMembers", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class topoPrimitiveMembers : TopoPrimitiveArrayAssociationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Boolean", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class Boolean
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private bool _Value;

        [XmlIgnore] public bool _ValueSpecified;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlText(typeof (System.Boolean))]
        public bool Value
        {
            get { return _Value; }
            set
            {
                _Value = value;
                _ValueSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlRoot(ElementName = "Category", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class Category : CodeType
    {
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CategoryList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CategoryList : CodeOrNilReasonListType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Count", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class Count
    {
        [XmlIgnore] private string _nilReason;

        [XmlIgnore] private string _Value;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlText(DataType = "string")]
        public string Value
        {
            get { return _Value; }
            set { _Value = value; }
        }

        public void MakeSchemaCompliant()
        {
        }
    }


    [XmlRoot(ElementName = "Quantity", Namespace = Declarations.SchemaVersion, IsNullable = true), Serializable]
    public class Quantity : MeasureType
    {
        [XmlIgnore] private string _nilReason;

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "QuantityList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class QuantityList : MeasureOrNilReasonListType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class valueProperty : ValuePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueComponent", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class valueComponent : ValuePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueComponents", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class valueComponents : ValueArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompositeValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CompositeValue : CompositeValueType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ValueArray", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ValueArray : ValueArrayType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CategoryExtent", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CategoryExtent : CategoryExtentType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "QuantityExtent", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class QuantityExtent : QuantityExtentType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Grid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Grid : GridType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractImplicitGeometry", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractImplicitGeometry : AbstractGeometryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "RectifiedGrid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class RectifiedGrid : RectifiedGridType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public abstract class AbstractCoverage : AbstractCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDiscreteCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class AbstractDiscreteCoverage : DiscreteCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractContinuousCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractContinuousCoverage : AbstractContinuousCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "domainSet", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class domainSet : DomainSetType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "rangeSet", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class rangeSet : RangeSetType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DataBlock", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DataBlock : DataBlockType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "rangeParameters", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class rangeParameters : AssociationRoleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "tupleList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class tupleList : CoordinatesType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "File", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class File : FileType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coverageFunction", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class coverageFunction : CoverageFunctionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CoverageMappingRule", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class CoverageMappingRule : MappingRuleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GridFunction", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GridFunction : GridFunctionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiPointCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MultiPointCoverage : DiscreteCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiCurveCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MultiCurveCoverage : DiscreteCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiSurfaceCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MultiSurfaceCoverage : DiscreteCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiSolidCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MultiSolidCoverage : DiscreteCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GridCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GridCoverage : DiscreteCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "RectifiedGridCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class RectifiedGridCoverage : DiscreteCoverageType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Observation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Observation : ObservationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "using", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class @using : ProcedurePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "target", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class target : TargetPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "subject", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class subject : TargetPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "resultOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class resultOf : ResultType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DirectedObservation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class DirectedObservation : DirectedObservationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DirectedObservationAtDistance", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class DirectedObservationAtDistance : DirectedObservationAtDistanceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractTimeTopologyPrimitive", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractTimeTopologyPrimitive : AbstractTimeTopologyPrimitiveType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeTopologyComplex", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class TimeTopologyComplex : TimeTopologyComplexType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeNode", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeNode : TimeNodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeEdge", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeEdge : TimeEdgeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeReferenceSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class TimeReferenceSystem : TimeReferenceSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeCoordinateSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class TimeCoordinateSystem : TimeCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeCalendar", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeCalendar : TimeCalendarType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeCalendarEra", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeCalendarEra : TimeCalendarEraType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeClock", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeClock : TimeClockType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeOrdinalReferenceSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class TimeOrdinalReferenceSystem : TimeOrdinalReferenceSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeOrdinalEra", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeOrdinalEra : TimeOrdinalEraType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "anchorPoint", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class anchorPoint : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "datumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class datumRef : DatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesPrimeMeridian", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class usesPrimeMeridian : PrimeMeridianPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesEllipsoid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesEllipsoid : EllipsoidPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geodeticDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class geodeticDatumRef : GeodeticDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ellipsoidRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ellipsoidRef : EllipsoidPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "primeMeridianRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class primeMeridianRef : PrimeMeridianPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "engineeringDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class engineeringDatumRef : EngineeringDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "imageDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class imageDatumRef : ImageDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class verticalDatumRef : VerticalDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "temporalDatumRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class temporalDatumRef : TemporalDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateOperationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class coordinateOperationRef : CoordinateOperationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "singleOperationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class singleOperationRef : SingleOperationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractOperation : AbstractCoordinateOperationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class operationRef : OperationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "generalConversionRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class generalConversionRef : GeneralConversionPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "generalTransformationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class generalTransformationRef : GeneralTransformationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesSingleOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class usesSingleOperation : CoordinateOperationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "concatenatedOperationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class concatenatedOperationRef : ConcatenatedOperationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesOperation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesOperation : CoordinateOperationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "passThroughOperationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class passThroughOperationRef : PassThroughOperationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesMethod", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesMethod : OperationMethodPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesValue : AbstractGeneralParameterValuePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "conversionRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class conversionRef : ConversionPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "transformationRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class transformationRef : TransformationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dmsAngleValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class dmsAngleValue : DMSAngleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueOfParameter", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class valueOfParameter : OperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "includesValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class includesValue : AbstractGeneralParameterValuePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valuesOfGroup", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class valuesOfGroup : OperationParameterGroupPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "methodFormula", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class methodFormula : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesParameter", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesParameter : AbstractGeneralOperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationMethodRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class operationMethodRef : OperationMethodPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "abstractGeneralOperationParameterRef", Namespace = Declarations.SchemaVersion,
        IsNullable = false), Serializable]
    public class abstractGeneralOperationParameterRef : AbstractGeneralOperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationParameterRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class operationParameterRef : OperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "includesParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class includesParameter : AbstractGeneralOperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationParameterGroupRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class operationParameterGroupRef : OperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "referenceSystemRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class referenceSystemRef : CRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "crsRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class crsRef : CRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateSystemAxisRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class coordinateSystemAxisRef : CoordinateSystemAxisPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesAxis", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesAxis : CoordinateSystemAxisPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateSystemRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class coordinateSystemRef : CoordinateSystemPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ellipsoidalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class ellipsoidalCSRef : EllipsoidalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "cartesianCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class cartesianCSRef : CartesianCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class verticalCSRef : VerticalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TemporalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TemporalCS : TemporalCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "temporalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class temporalCSRef : TemporalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "linearCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class linearCSRef : LinearCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "userDefinedCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class userDefinedCSRef : UserDefinedCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "sphericalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class sphericalCSRef : SphericalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "polarCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class polarCSRef : PolarCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "cylindricalCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class cylindricalCSRef : CylindricalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ObliqueCartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class ObliqueCartesianCS : ObliqueCartesianCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "obliqueCartesianCSRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class obliqueCartesianCSRef : ObliqueCartesianCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "singleCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class singleCRSRef : SingleCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "definedByConversion", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class definedByConversion : GeneralConversionPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "includesSingleCRS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class includesSingleCRS : SingleCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "compoundCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class compoundCRSRef : CompoundCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesEllipsoidalCS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class usesEllipsoidalCS : EllipsoidalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesCartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesCartesianCS : CartesianCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesSphericalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesSphericalCS : SphericalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesGeodeticDatum", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class usesGeodeticDatum : GeodeticDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesVerticalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesVerticalCS : VerticalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesVerticalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class usesVerticalDatum : VerticalDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class verticalCRSRef : VerticalCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseGeographicCRS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class baseGeographicCRS : GeographicCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "projectedCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class projectedCRSRef : ProjectedCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesCS : CoordinateSystemPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "derivedCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class derivedCRSRef : DerivedCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesEngineeringDatum", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class usesEngineeringDatum : EngineeringDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "engineeringCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class engineeringCRSRef : EngineeringCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesAffineCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesAffineCS : AffineCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesImageDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesImageDatum : ImageDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesObliqueCartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class usesObliqueCartesianCS : ObliqueCartesianCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "imageCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class imageCRSRef : ImageCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesTimeCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesTimeCS : TimeCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesTemporalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class usesTemporalCS : TemporalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "usesTemporalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class usesTemporalDatum : TemporalDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "temporalCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class temporalCRSRef : TemporalCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeographicCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeographicCRS : GeographicCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geographicCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class geographicCRSRef : GeographicCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeocentricCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeocentricCRS : GeocentricCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geocentricCRSRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class geocentricCRSRef : GeocentricCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "dmsAngle", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class dmsAngle : DMSAngleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "degrees", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class degrees : DegreesType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "member", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class member : AssociationRoleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "members", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class members : ArrayAssociationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "metaDataProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class metaDataProperty : MetaDataPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Bag", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Bag : BagType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Array", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Array : ArrayType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractMetaData", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public abstract class AbstractMetaData : AbstractMetaDataType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GenericMetaData", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GenericMetaData : GenericMetaDataType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinates", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class coordinates : CoordinatesType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointRep", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class pointRep : PointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "location", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class location : LocationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LocationString", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LocationString : StringOrRefType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LocationKeyWord", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LocationKeyWord : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "priorityLocation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class priorityLocation : PriorityLocationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "featureMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class featureMember : FeaturePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "featureProperty", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class featureProperty : FeaturePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "featureMembers", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class featureMembers : FeatureArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractFeatureCollection", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractFeatureCollection : AbstractFeatureCollectionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "FeatureCollection", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class FeatureCollection : FeatureCollectionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "track", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class track : HistoryPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DefinitionCollection", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class DefinitionCollection : DictionaryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "definitionMember", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class definitionMember : DictionaryEntryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "indirectEntry", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class indirectEntry : IndirectEntryType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DefinitionProxy", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DefinitionProxy : DefinitionProxyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "definitionRef", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class definitionRef : ReferenceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MappingRule", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class MappingRule : StringOrRefType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "centerOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class centerOf : PointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "position", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class position : PointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "extentOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class extentOf : SurfacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "edgeOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class edgeOf : CurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "centerLineOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class centerLineOf : CurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiLocation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class multiLocation : MultiPointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCenterOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class multiCenterOf : MultiPointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiPosition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class multiPosition : MultiPointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCenterLineOf", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class multiCenterLineOf : MultiCurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiEdgeOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class multiEdgeOf : MultiCurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCoverage", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class multiCoverage : MultiSurfacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiExtentOf", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class multiExtentOf : MultiSurfacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "polygonPatches", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class polygonPatches : SurfacePatchArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "trianglePatches", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class trianglePatches : SurfacePatchArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiPointDomain", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class multiPointDomain : DomainSetType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCurveDomain", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class multiCurveDomain : DomainSetType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiSurfaceDomain", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class multiSurfaceDomain : DomainSetType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiSolidDomain", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class multiSolidDomain : DomainSetType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "gridDomain", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class gridDomain : DomainSetType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "rectifiedGridDomain", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class rectifiedGridDomain : DomainSetType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "generalOperationParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class generalOperationParameter : AbstractGeneralOperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MovingObjectStatus", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class MovingObjectStatus : MovingObjectStatusType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "status", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class status : StringOrRefType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "statusReference", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class statusReference : ReferenceType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "topoComplexProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class topoComplexProperty : TopoComplexPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiPointProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class multiPointProperty : MultiPointPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiCurveProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class multiCurveProperty : MultiCurvePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiSurfaceProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class multiSurfaceProperty : MultiSurfacePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiSolidProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class multiSolidProperty : MultiSolidPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "multiGeometryProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class multiGeometryProperty : MultiGeometryPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pointArrayProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class pointArrayProperty : PointArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "curveArrayProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class curveArrayProperty : CurveArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "surfaceArrayProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class surfaceArrayProperty : SurfaceArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "solidArrayProperty", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class solidArrayProperty : SolidArrayPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractObject", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public abstract class AbstractObject : AbstractObject_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TypeName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable
    ]
    public class TypeName : TypeName_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MemberName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class MemberName : MemberName_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Multiplicity", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class Multiplicity : Multiplicity_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MultiplicityRange", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class MultiplicityRange : MultiplicityRange_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Measure", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Measure : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Length", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Length : LengthType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Angle", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Angle : AngleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Scale", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Scale : ScaleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Distance", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable
    ]
    public class Distance : LengthType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGenericName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class AbstractGenericName : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LocalName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class LocalName : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ScopedName", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class ScopedName : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "UnlimitedInteger", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = true),
     Serializable]
    public class UnlimitedInteger : UnlimitedInteger_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "RecordType", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false),
     Serializable]
    public class RecordType : RecordType_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Binary", Namespace = "http://www.isotc211.org/2005/gco", IsNullable = false), Serializable]
    public class Binary : Binary_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_TemporalExtent", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class EX_TemporalExtent : EX_TemporalExtent_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_VerticalExtent", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class EX_VerticalExtent : EX_VerticalExtent_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_BoundingPolygon", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class EX_BoundingPolygon : EX_BoundingPolygon_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_Extent", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class EX_Extent : EX_Extent_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractEX_GeographicExtent", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractEX_GeographicExtent : AbstractEX_GeographicExtent_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_GeographicBoundingBox", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class EX_GeographicBoundingBox : EX_GeographicBoundingBox_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_SpatialTemporalExtent", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class EX_SpatialTemporalExtent : EX_SpatialTemporalExtent_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EX_GeographicDescription", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class EX_GeographicDescription : EX_GeographicDescription_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "RS_Identifier", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class RS_Identifier : RS_Identifier_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ReferenceSystem", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_ReferenceSystem : MD_ReferenceSystem_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Identifier", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Identifier : MD_Identifier_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractRS_ReferenceSystem", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractRS_ReferenceSystem : AbstractRS_ReferenceSystem_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_ResponsibleParty", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_ResponsibleParty : CI_ResponsibleParty_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_Citation", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_Citation : CI_Citation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_Address", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_Address : CI_Address_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_OnlineResource", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_OnlineResource : CI_OnlineResource_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_Contact", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_Contact : CI_Contact_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_Telephone", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_Telephone : CI_Telephone_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_Date", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable]
    public class CI_Date : CI_Date_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_Series", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_Series : CI_Series_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_RoleCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_RoleCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_PresentationFormCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class CI_PresentationFormCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_OnLineFunctionCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_OnLineFunctionCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CI_DateTypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class CI_DateTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_GridSpatialRepresentation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_GridSpatialRepresentation : MD_GridSpatialRepresentation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_VectorSpatialRepresentation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_VectorSpatialRepresentation : MD_VectorSpatialRepresentation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractMD_SpatialRepresentation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractMD_SpatialRepresentation : AbstractMD_SpatialRepresentation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Georeferenceable", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Georeferenceable : MD_Georeferenceable_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Dimension", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Dimension : MD_Dimension_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Georectified", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Georectified : MD_Georectified_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_GeometricObjects", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_GeometricObjects : MD_GeometricObjects_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_TopologyLevelCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_TopologyLevelCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_GeometricObjectTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_GeometricObjectTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_CellGeometryCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_CellGeometryCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_DimensionNameTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_DimensionNameTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ExtendedElementInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_ExtendedElementInformation : MD_ExtendedElementInformation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_MetadataExtensionInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_MetadataExtensionInformation : MD_MetadataExtensionInformation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_DatatypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_DatatypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_FeatureCatalogueDescription", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_FeatureCatalogueDescription : MD_FeatureCatalogueDescription_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_CoverageDescription", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false)
    , Serializable]
    public class MD_CoverageDescription : MD_CoverageDescription_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ImageDescription", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_ImageDescription : MD_ImageDescription_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractMD_ContentInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractMD_ContentInformation : AbstractMD_ContentInformation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_RangeDimension", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_RangeDimension : MD_RangeDimension_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Band", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable]
    public class MD_Band : MD_Band_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_CoverageContentTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_CoverageContentTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ImagingConditionCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class MD_ImagingConditionCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ApplicationSchemaInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_ApplicationSchemaInformation : MD_ApplicationSchemaInformation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_PortrayalCatalogueReference", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_PortrayalCatalogueReference : MD_PortrayalCatalogueReference_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Constraints", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Constraints : MD_Constraints_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_LegalConstraints", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_LegalConstraints : MD_LegalConstraints_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_SecurityConstraints", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false)
    , Serializable]
    public class MD_SecurityConstraints : MD_SecurityConstraints_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ClassificationCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_ClassificationCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_RestrictionCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_RestrictionCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Medium", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Medium : MD_Medium_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_DigitalTransferOptions", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_DigitalTransferOptions : MD_DigitalTransferOptions_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_StandardOrderProcess", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class MD_StandardOrderProcess : MD_StandardOrderProcess_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Distributor", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Distributor : MD_Distributor_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Distribution", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Distribution : MD_Distribution_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Format", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Format : MD_Format_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_DistributionUnits", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_DistributionUnits : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_MediumFormatCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_MediumFormatCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_MediumNameCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_MediumNameCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_MaintenanceInformation", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_MaintenanceInformation : MD_MaintenanceInformation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ScopeDescription", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_ScopeDescription : MD_ScopeDescription_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_MaintenanceFrequencyCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_MaintenanceFrequencyCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ScopeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_ScopeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractMD_Identification", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractMD_Identification : AbstractMD_Identification_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_BrowseGraphic", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_BrowseGraphic : MD_BrowseGraphic_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_DataIdentification", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_DataIdentification : MD_DataIdentification_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ServiceIdentification", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_ServiceIdentification : MD_ServiceIdentification_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_RepresentativeFraction", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_RepresentativeFraction : MD_RepresentativeFraction_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Usage", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable
    ]
    public class MD_Usage : MD_Usage_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Keywords", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Keywords : MD_Keywords_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_Association", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_Association : DS_Association_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_AggregateInformation", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class MD_AggregateInformation : MD_AggregateInformation_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Resolution", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Resolution : MD_Resolution_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_CharacterSetCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_CharacterSetCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_SpatialRepresentationTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class MD_SpatialRepresentationTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_ProgressCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_ProgressCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_KeywordTypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_KeywordTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_AssociationTypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false)
    , Serializable]
    public class DS_AssociationTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_InitiativeTypeCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_InitiativeTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LI_ProcessStep", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class LI_ProcessStep : LI_ProcessStep_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LI_Source", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class LI_Source : LI_Source_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LI_Lineage", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class LI_Lineage : LI_Lineage_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_ConformanceResult", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_ConformanceResult : DQ_ConformanceResult_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_QuantitativeResult", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_QuantitativeResult : DQ_QuantitativeResult_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_Result", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public abstract class AbstractDQ_Result : AbstractDQ_Result_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_TemporalValidity", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_TemporalValidity : DQ_TemporalValidity_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_TemporalConsistency", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false)
    , Serializable]
    public class DQ_TemporalConsistency : DQ_TemporalConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_AccuracyOfATimeMeasurement", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_AccuracyOfATimeMeasurement : DQ_AccuracyOfATimeMeasurement_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_QuantitativeAttributeAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_QuantitativeAttributeAccuracy : DQ_QuantitativeAttributeAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_NonQuantitativeAttributeAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_NonQuantitativeAttributeAccuracy : DQ_NonQuantitativeAttributeAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_ThematicClassificationCorrectness", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_ThematicClassificationCorrectness : DQ_ThematicClassificationCorrectness_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_RelativeInternalPositionalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_RelativeInternalPositionalAccuracy : DQ_RelativeInternalPositionalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_GriddedDataPositionalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_GriddedDataPositionalAccuracy : DQ_GriddedDataPositionalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_AbsoluteExternalPositionalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_AbsoluteExternalPositionalAccuracy : DQ_AbsoluteExternalPositionalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_TopologicalConsistency", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_TopologicalConsistency : DQ_TopologicalConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_FormatConsistency", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_FormatConsistency : DQ_FormatConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_DomainConsistency", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_DomainConsistency : DQ_DomainConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_ConceptualConsistency", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_ConceptualConsistency : DQ_ConceptualConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_CompletenessOmission", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public class DQ_CompletenessOmission : DQ_CompletenessOmission_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_CompletenessCommission", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_CompletenessCommission : DQ_CompletenessCommission_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_TemporalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractDQ_TemporalAccuracy : AbstractDQ_TemporalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_ThematicAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractDQ_ThematicAccuracy : AbstractDQ_ThematicAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_PositionalAccuracy", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractDQ_PositionalAccuracy : AbstractDQ_PositionalAccuracy_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_LogicalConsistency", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public abstract class AbstractDQ_LogicalConsistency : AbstractDQ_LogicalConsistency_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_Completeness", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false
        ), Serializable]
    public abstract class AbstractDQ_Completeness : AbstractDQ_Completeness_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDQ_Element", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public abstract class AbstractDQ_Element : AbstractDQ_Element_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_DataQuality", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DQ_DataQuality : DQ_DataQuality_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_Scope", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable
    ]
    public class DQ_Scope : DQ_Scope_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DQ_EvaluationMethodTypeCode", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class DQ_EvaluationMethodTypeCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PT_FreeText", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class PT_FreeText : PT_FreeText_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PT_Locale", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class PT_Locale : PT_Locale_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LocalisedCharacterString", Namespace = "http://www.isotc211.org/2005/gmd",
        IsNullable = false), Serializable]
    public class LocalisedCharacterString : LocalisedCharacterString_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PT_LocaleContainer", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class PT_LocaleContainer : PT_LocaleContainer_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LanguageCode", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class LanguageCode : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Country", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false), Serializable]
    public class Country : CodeListValue_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "MD_Metadata", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class MD_Metadata : MD_Metadata_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDS_Aggregate", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public abstract class AbstractDS_Aggregate : AbstractDS_Aggregate_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_DataSet", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_DataSet : DS_DataSet_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_OtherAggregate", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_OtherAggregate : DS_OtherAggregate_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_Series", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_Series : DS_Series_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_Initiative", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_Initiative : DS_Initiative_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_Platform", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_Platform : DS_Platform_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_Sensor", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_Sensor : DS_Sensor_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_ProductionSeries", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_ProductionSeries : DS_ProductionSeries_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DS_StereoMate", Namespace = "http://www.isotc211.org/2005/gmd", IsNullable = false),
     Serializable]
    public class DS_StereoMate : DS_StereoMate_Type
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractCRS : AbstractCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "domainOfValidity", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class domainOfValidity
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private EX_Extent _EX_Extent;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public domainOfValidity()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (EX_Extent), ElementName = "EX_Extent", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public EX_Extent EX_Extent
        {
            get { return _EX_Extent; }
            set { _EX_Extent = value; }
        }

        public void MakeSchemaCompliant()
        {
            EX_Extent.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CoordinateSystemAxis", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class CoordinateSystemAxis : CoordinateSystemAxisType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "axisAbbrev", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class axisAbbrev : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "axisDirection", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class axisDirection : CodeWithAuthorityType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "rangeMeaning", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class rangeMeaning : CodeWithAuthorityType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCoordinateSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractCoordinateSystem : AbstractCoordinateSystemType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "axis", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class axis : CoordinateSystemAxisPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EllipsoidalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class EllipsoidalCS : EllipsoidalCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CartesianCS : CartesianCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "VerticalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class VerticalCS : VerticalCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TimeCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TimeCS : TimeCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "LinearCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class LinearCS : LinearCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "UserDefinedCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class UserDefinedCS : UserDefinedCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "SphericalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class SphericalCS : SphericalCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PolarCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class PolarCS : PolarCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CylindricalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CylindricalCS : CylindricalCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AffineCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class AffineCS : AffineCSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public abstract class AbstractDatum : AbstractDatumType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "anchorDefinition", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class anchorDefinition : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeodeticDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeodeticDatum : GeodeticDatumType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "primeMeridian", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class primeMeridian : PrimeMeridianPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ellipsoid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ellipsoid : EllipsoidPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Ellipsoid", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Ellipsoid : EllipsoidType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "semiMajorAxis", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class semiMajorAxis : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "secondDefiningParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class secondDefiningParameter
    {
        [XmlIgnore] private SecondDefiningParameter _SecondDefiningParameter;

        [XmlElement(Type = typeof (SecondDefiningParameter), ElementName = "SecondDefiningParameter", IsNullable = false
            , Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public SecondDefiningParameter SecondDefiningParameter
        {
            get
            {
                if (_SecondDefiningParameter == null) _SecondDefiningParameter = new SecondDefiningParameter();
                return _SecondDefiningParameter;
            }
            set { _SecondDefiningParameter = value; }
        }

        public void MakeSchemaCompliant()
        {
            SecondDefiningParameter.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "SecondDefiningParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class SecondDefiningParameter
    {
        [XmlIgnore] private MeasureType _inverseFlattening;

        [XmlIgnore] private bool _isSphere;

        [XmlIgnore] public bool _isSphereSpecified;
        [XmlIgnore] private LengthType _semiMinorAxis;


        public SecondDefiningParameter()
        {
            isSphere = true;
        }

        [XmlElement(Type = typeof (MeasureType), ElementName = "inverseFlattening", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public MeasureType inverseFlattening
        {
            get
            {
                if (_inverseFlattening == null) _inverseFlattening = new MeasureType();
                return _inverseFlattening;
            }
            set { _inverseFlattening = value; }
        }

        [XmlElement(Type = typeof (LengthType), ElementName = "semiMinorAxis", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = Declarations.SchemaVersion)]
        public LengthType semiMinorAxis
        {
            get
            {
                if (_semiMinorAxis == null) _semiMinorAxis = new LengthType();
                return _semiMinorAxis;
            }
            set { _semiMinorAxis = value; }
        }

        [XmlElement(ElementName = "isSphere", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "boolean",
            Namespace = Declarations.SchemaVersion)]
        public bool isSphere
        {
            get { return _isSphere; }
            set
            {
                _isSphere = value;
                _isSphereSpecified = true;
            }
        }

        public void MakeSchemaCompliant()
        {
            inverseFlattening.MakeSchemaCompliant();
            semiMinorAxis.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PrimeMeridian", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class PrimeMeridian : PrimeMeridianType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "greenwichLongitude", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class greenwichLongitude : AngleType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EngineeringDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class EngineeringDatum : EngineeringDatumType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ImageDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ImageDatum : ImageDatumType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "pixelInCell", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class pixelInCell : CodeWithAuthorityType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "VerticalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class VerticalDatum : VerticalDatumType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TemporalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TemporalDatum : TemporalDatumType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractCoordinateOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractCoordinateOperation : AbstractCoordinateOperationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateOperationAccuracy", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    [XmlInclude(typeof (DQ_RelativeInternalPositionalAccuracy_Type))]
    [XmlInclude(typeof (DQ_AbsoluteExternalPositionalAccuracy_Type))]
    [XmlInclude(typeof (DQ_GriddedDataPositionalAccuracy_Type))]
    public class coordinateOperationAccuracy
    {
        [XmlIgnore] private AbstractDQ_PositionalAccuracy _AbstractDQ_PositionalAccuracy;
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public coordinateOperationAccuracy()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (AbstractDQ_PositionalAccuracy), ElementName = "AbstractDQ_PositionalAccuracy",
            IsNullable = false, Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy AbstractDQ_PositionalAccuracy
        {
            get { return _AbstractDQ_PositionalAccuracy; }
            set { _AbstractDQ_PositionalAccuracy = value; }
        }

        public void MakeSchemaCompliant()
        {
            AbstractDQ_PositionalAccuracy.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "sourceCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class sourceCRS : CRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "targetCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class targetCRS : CRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSingleOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractSingleOperation : AbstractCoordinateOperationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralConversion", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeneralConversion : AbstractGeneralConversionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralTransformation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeneralTransformation : AbstractGeneralTransformationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ConcatenatedOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class ConcatenatedOperation : ConcatenatedOperationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordOperation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class coordOperation : CoordinateOperationPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "PassThroughOperation", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class PassThroughOperation : PassThroughOperationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Conversion", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Conversion : ConversionType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "method", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class method : OperationMethodPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "parameterValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class parameterValue : AbstractGeneralParameterValuePropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "Transformation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class Transformation : TransformationType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralParameterValue", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeneralParameterValue : AbstractGeneralParameterValueType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ParameterValue", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ParameterValue : ParameterValueType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "value", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class @value : MeasureType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "valueList", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class valueList : MeasureListType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "operationParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class operationParameter : OperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ParameterValueGroup", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class ParameterValueGroup : ParameterValueGroupType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "group", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class group : OperationParameterGroupPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OperationMethod", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class OperationMethod : OperationMethodType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "formulaCitation", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class formulaCitation
    {
        [XmlIgnore] private actuate _actuate;

        [XmlIgnore] public bool _actuateSpecified;
        [XmlIgnore] private string _arcrole;
        [XmlIgnore] private CI_Citation _CI_Citation;
        [XmlIgnore] private string _href;
        [XmlIgnore] private string _nilReason;
        [XmlIgnore] private string _remoteSchema;
        [XmlIgnore] private string _role;
        [XmlIgnore] private show _show;

        [XmlIgnore] public bool _showSpecified;
        [XmlIgnore] private string _title;
        [XmlIgnore] private string _type;

        public formulaCitation()
        {
            type = "simple";
        }

        [XmlAttribute(AttributeName = "type", DataType = "string")]
        public string type
        {
            get { return _type; }
            set { _type = value; }
        }

        [XmlAttribute(AttributeName = "href", DataType = "anyURI")]
        public string href
        {
            get { return _href; }
            set { _href = value; }
        }

        [XmlAttribute(AttributeName = "role", DataType = "anyURI")]
        public string role
        {
            get { return _role; }
            set { _role = value; }
        }

        [XmlAttribute(AttributeName = "arcrole", DataType = "anyURI")]
        public string arcrole
        {
            get { return _arcrole; }
            set { _arcrole = value; }
        }

        [XmlAttribute(AttributeName = "title", DataType = "string")]
        public string title
        {
            get { return _title; }
            set { _title = value; }
        }

        [XmlAttribute(AttributeName = "show")]
        public show show
        {
            get { return _show; }
            set
            {
                _show = value;
                _showSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "actuate")]
        public actuate actuate
        {
            get { return _actuate; }
            set
            {
                _actuate = value;
                _actuateSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "nilReason", DataType = "anyURI")]
        public string nilReason
        {
            get { return _nilReason; }
            set { _nilReason = value; }
        }

        [XmlAttribute(AttributeName = "remoteSchema", DataType = "anyURI")]
        public string remoteSchema
        {
            get { return _remoteSchema; }
            set { _remoteSchema = value; }
        }

        [XmlElement(Type = typeof (CI_Citation), ElementName = "CI_Citation", IsNullable = false,
            Form = XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gmd")]
        public CI_Citation CI_Citation
        {
            get { return _CI_Citation; }
            set { _CI_Citation = value; }
        }

        public void MakeSchemaCompliant()
        {
            CI_Citation.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "formula", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class formula : CodeType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "parameter", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class parameter : AbstractGeneralOperationParameterPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralOperationParameter", Namespace = Declarations.SchemaVersion,
        IsNullable = false), Serializable]
    public abstract class AbstractGeneralOperationParameter : AbstractGeneralOperationParameterType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OperationParameter", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class OperationParameter : OperationParameterType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "OperationParameterGroup", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class OperationParameterGroup : OperationParameterGroupType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractSingleCRS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractSingleCRS : AbstractCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "AbstractGeneralDerivedCRS", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public abstract class AbstractGeneralDerivedCRS : AbstractGeneralDerivedCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "conversion", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class conversion : GeneralConversionPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "CompoundCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class CompoundCRS : CompoundCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "componentReferenceSystem", Namespace = Declarations.SchemaVersion, IsNullable = false),
     Serializable]
    public class componentReferenceSystem : SingleCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "GeodeticCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class GeodeticCRS : GeodeticCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ellipsoidalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ellipsoidalCS : EllipsoidalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "cartesianCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class cartesianCS : CartesianCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "sphericalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class sphericalCS : SphericalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "geodeticDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class geodeticDatum : GeodeticDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "VerticalCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class VerticalCRS : VerticalCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class verticalCS : VerticalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "verticalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class verticalDatum : VerticalDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ProjectedCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ProjectedCRS : ProjectedCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseGeodeticCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class baseGeodeticCRS : GeodeticCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "DerivedCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class DerivedCRS : DerivedCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "baseCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class baseCRS : SingleCRSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "derivedCRSType", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class derivedCRSType : CodeWithAuthorityType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "coordinateSystem", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class coordinateSystem : CoordinateSystemPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "EngineeringCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class EngineeringCRS : EngineeringCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "cylindricalCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class cylindricalCS : CylindricalCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "linearCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class linearCS : LinearCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "polarCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class polarCS : PolarCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "userDefinedCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class userDefinedCS : UserDefinedCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "engineeringDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable
    ]
    public class engineeringDatum : EngineeringDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "ImageCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class ImageCRS : ImageCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "affineCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class affineCS : AffineCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "imageDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class imageDatum : ImageDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "TemporalCRS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class TemporalCRS : TemporalCRSType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "timeCS", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class timeCS : TimeCSPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }


    [XmlRoot(ElementName = "temporalDatum", Namespace = Declarations.SchemaVersion, IsNullable = false), Serializable]
    public class temporalDatum : TemporalDatumPropertyType
    {
        public new void MakeSchemaCompliant()
        {
            base.MakeSchemaCompliant();
        }
    }
}

